[{"content":"新生命的降临 恢复了二十来天了，现在打算整理一下这段时间的经历，心情以及想法。\n孕期到分娩 回想整个孕期到产后，都深深地感叹恰恰是一个懂事的天使宝宝。虽然他来的突然，但总感觉一切刚刚好，这也是他的小名——恰恰的由来：来的恰好。\n整个孕期，除了刚开始的胃口不佳和后期正常的耻骨疼痛倒是没什么过多的不适感，而且心情也没有像网上说的那样特别敏感易波动，反而想着自己有了小宝宝不能太情绪化，所以对待一切人事物都能保持 love \u0026amp; peace，就连同事也说感觉你每天都乐呵呵的。\n到了十二月，我是先休了一周年假，再从 12/16 休的产假。原本我们猜测恰恰会在 39 周后发动，但在 16 号早七点半就首次见红了，等到 17 号凌晨三点四十五第二次见红，然后我们坐不住了，吃了早饭洗了澡，带上所有产检材料去医院挂了急诊。急诊大夫做了内检说是宫颈管已经消失 80%，让我们办理住院。办理完所有手续已经是下午，恰恰爸爸也请了假把家里的待产包都拿到了医院。由于医院规定家属只能在住院当天凭借押金条进出送行李，所以当一切都安顿好后，恰恰爸爸没能待太久就回家了。\n一切妥当后恰恰这边却回归了平静。晚上在走廊喝水散步促进发动时还遇到了两位同样情况的孕妈妈，一位是自己在家检测到规律宫缩来的医院，另一位是胎儿心率太高被医院扣下了。我们都在担心如果孩子迟迟不发动明天会被医院赶回去，那我这大包小包的可太麻烦了（事后知道她俩确实在第二天就办理出院了）。\n病房九点多熄灯休息，但因为是六人间，当天还有三个床位都是已经生产完的妈妈和她们的小宝宝，所以熄灯了也是此起彼伏的婴儿哭闹声。迷迷糊糊睡着后，十八号凌晨，我突然醒了，感觉像是孩子踹了一脚，紧接着就是一股暖流流出，看了一眼手机接近凌晨四点，我意识到破水了。我有点恐慌想去护士台找护士，但一站起来羊水流的更厉害了，吓得我立马又躺回床上。也是没什么住院经验，一时没想起床边就有呼叫器，因为其他生产完的妈妈都有一个护工阿姨在，所以我抱着试一试的心态问：“阿姨，能帮我叫一下护士吗，我好像破水了。”幸好对床的姐姐和她的护工没睡熟，帮我叫了护士。护士来后询问了我的情况，然后带了一个值晚班的医生来。晚班医生看着年纪不大，她一直在尝试检测我是否破水了，可试了两三次都没有成功，我确定地告诉她自己应该是破水了，最后她终于检测出破水的事实。我以为会有什么紧急处理，结果她只是告诉我等七点多白班大夫来了处理。在护士的提醒下，我联系了恰恰爸爸和恰恰奶奶，因为破水后就不能再下床了，得有人照看我。等他们赶到医院，只有恰恰奶奶来了，恰恰爸爸被拦在了楼下。可以理解医院的规定，但总归有点失落。\n因为之前看过一些产前预兆的帖子，所以在我的认知里破水了就是快生了，而且羊水流失太多会导致胎儿缺氧，所以我平躺在床上一动不敢动。就这样伴随着宫缩熬到了七八点。早班大夫来看了我的情况说是一会进待产室打缩宫素，这时候我实在难受地忍不了了，翻了个身侧躺着，宫缩的不适感一下缓解了不少。终于，九点左右有护士来管我了，推我进了待产室。当时，待产室里除了我还有两位孕妈妈在。我旁边那位是早在前一天就破水了，但她一直没有规律宫缩也没有疼的感觉，而我对面那一位也是破水了，但她属于疼痛敏感型，护士一直强调“我还没碰到你，你就喊疼，别怕啊，不然一会你怎么生啊”。此时我们仨都挂上了缩宫素，等待着开十指。同时护士提醒我们多喝点水，多排尿，补充流失的羊水，不然大人小孩都容易发烧，那时候就不能顺产得转为剖了。我心想这么重要的信息怎么没人早点通知呢，这么长时间我这滴水未进的，还担心羊水流干了不敢动弹。\n随着时间的推移，宫缩的间隔越来越短，疼痛的程度越来越高。十二点左右，我跟对面的孕妈妈都开始疼出了声，这时护士再一次做了内检，已经开到三指了，护士让我们停止吃喝，等待麻醉师一会过来上无痛。因为我旁边的孕妈妈先破水先来，所以即便她没什么感觉也是先给她安排的无痛，而我的开指情况比较好，所以先一步来到了隔壁的产房。在产房的床上大概等了半个小时（前一个孕妈妈比较胖，所以上无痛有些费时间），麻醉师过来了。她让我弓着背，可我感觉肚子顶着，怎么都弓不起来，最后在麻醉师的手动辅助下达到了她想要的幅度。我了解过打无痛前会先打麻药，而且这个过程要保持不动。所以在麻醉师多次的叮嘱下我抱紧了膝盖，想着怎么也不能动，但在第一针刺入时那种酸疼的刺激下还是不自觉地打了个颤，自然收到了麻醉师“不要动”的警告。不得不说，无痛生效很快，感觉刚打完宫缩就没那么疼了，护士提醒我说可以趁这个时候睡一会补充点体力，我也确实很快就睡着了。大概睡了半个小时，疼痛感又慢慢回升了，等到一点多的时候，就感觉疼痛值又回到了打无痛前的水平。熬到两三点的时候护士再一次给我做了内检，我心想怎么得也该有六七指了吧，毕竟打了无痛都这么痛了。结果护士告诉我开到四指了。当时我有点绝望了，四指！这么久了，这么疼才四指，那我今天还能生上吗，不会要熬到明天吧，天呐！同时护士还告诉我另一个消息，说我胎位不正，让我侧趴着，等孩子自己转一转，不然开了十指也没法生。就这样，我左侧趴了一个小时，时间来到四点多，我真是疼的不行了，期间还加了两次无痛的泵，但疼痛感并没有消减，可能加的麻药药效和持续开指的疼痛相互抵消了。我期待着护士能再给我做一次内检，然后告知我最新进展，所以在护士再次来到产房时我向她询问了大概还得多长时间，护士回应做一次内检看看，终于我等到了开十指的好消息，心想这么快，也不由地怀疑之前开四指那会儿是不是护士没检查准。但胎位仍旧不适合生产，于是护士又让我右侧趴一会看看。当时我真是疼到没脾气了，心里默默地念到，“恰恰你动一动吧，算妈妈求你了。”。时间来到五点多，护士总算再一次过来看我了（护士不会一直守着我，大部分时间产房就我一个人），护士摸了摸我的肚子说可以开始生了。然后她开始教我把手搭在膝盖上，等到宫缩的时候使劲。在指导了我三四次后，她满意地告诉我做的不错，就这样保持着，之后她就去忙旁边产房的事了。在孤经军奋战了十来分钟后来了个新的护士照看我，每当我使劲儿时她就在旁边给我加油打气，在她的指引下，生产的进程推进地很顺利。可能就这样持续了一个小时，产房的人突然多了起来，氛围也紧张了起来，有点电视剧里生孩子的感觉了，这时来了位医生一进来就忙着做侧切的准备，给我打气的护士早前提醒过我应该需要侧切，但没想到这么突然。关于侧切是有点颠覆我的认知的，我原以为是顺着中间切，但其实是选择一边往大腿根的方向切，打麻药时我还疑惑呢，打在左边屁股的麻药怎么管得到右边屁股的疼痛呢。侧切后，护士说再宫缩个两三次就能生出来，长途跋涉这么久突然看见绿洲竟有点“失落”，感觉自己还能再走两公里的（犯欠呢）。果不其然，侧切后第三次宫缩时，就像便秘太久用了开塞露突然释放出来了一样，身下哗地一下，干的湿的都一起顺出来了。长舒一口气我听到了两声洪亮的哭声，护士问我要不要把孩子放在肚子上接触一会，我说行。在我俩肚皮贴在一起的那一刻我只感觉到温暖（产房温度比较低）。之后就剩收尾工作了，医生拽出我的胎盘，开始缝合伤口，我就一直盯着这个趴在我身上的小家伙，而他也睁着眼睛左右巡视，安安静静地探寻着这个新世界。最后医生告诉我这个线会自己吸收，注意保持伤口干净干爽就行，她只切了很小很小的一个口子。骗人！这伤口至少有三四厘米长，她都缝了半个来点儿！\n产后 由于新生儿 72 小时后要采足底血，但第三天是周六又采不了，所以多住了一天院，到了周天采了血才回家。住院这几天按照医院的规定可以让一名女性家属陪护也可以请护工，考虑到护工比较专业，最后选择了护工，刚好就是破水时帮我叫护士的那名护工。这几天恰恰都很乖，除了饿了拉了会哭两声提醒我们，其余时间都在安安静静地睡觉。而我这边仍然是在疼痛中度过，前两天是伤口很疼，用了冷敷贴好很多。每次来查班的医生护士还会用力地按压我的肚子，而我就像一个血包，随着按压淌出一股一股的血流。到了后两天由于不确定自己能不能顺利开奶便请了通乳师，第一次还挺舒服的，就像是按摩，但后面的几次一次比一次疼。通乳师看我好说话在原本三次的疗程上本就多加了一次，最后她还想在我出院当天再加一次，我笑笑没说话，心想，免了免了，受不住。\n到了出院的日子，终于见到恰恰爸爸了（医院不让家属进病房，送饭也是护工去楼下拿），回到家里紧绷的神经终于放松了。可舒心的日子并没有持续太久，由于前几天有护工的帮衬，让我简单地认为饿了给喂奶，拉了给换尿布就行，从而忽略了恰恰饭后是需要拍拍嗝的，结果导致他肚子不舒服哭闹地撕心裂肺。本来恰恰就是一个不怎么哭闹的孩子，就连打疫苗都没哭，那他哭得这么厉害是得多难受啊，一想到这，我也跟着哭起来。此时就变成了奶奶哄孩子，恰恰爸爸哄我的场面了。后面大概猜测到他哭闹的原因了，就采取了抱喂加拍嗝的方式，确实好了很多。但带孩子可无法一招鲜吃遍天，这两天恰恰又开始胀气哭闹，尝试了热水袋，胀气贴，排气操，又买了斜坡枕，益生菌。不知道哪一种方式能让他好受些，就把了解到的都试试看。后续的育儿之路道阻且长。\n家人朋友的关心 在得知恰恰的出生后，我和恰恰爸爸两边的亲人朋友都纷纷表示了自己的祝愿以及红包/礼物。有几位是想单独说一说的。一个是我的好朋友——H，她在我孕期的时候就来家里看望我了好几次，出院后一礼拜再次来到家里看望我跟孩子，不仅送了恰恰玩具礼盒和大红包还亲手给恰恰织了一双特别可爱的黄色小鞋。另一个是我的好朋友——Z，她是我小学五年级开始的好朋友，但高中后就分开了，虽然很久没有见面了，但还是保持着联系。每年我生日都能收到她的礼物和一大段真挚的祝愿，每每这种时候我都会感叹自己读书太少，说不出她这样打动人心的话语。同样，这一次也是，不仅恰恰收到了她的礼物，我也收到了一份大礼和真挚的祝福语。随着新生命的到来，周边人的注意力大多都转移到了孩子身上，我也不是什么矫情的人，况且孩子得到关注也是因为父母的原因，所以我并没觉得有什么。但收到她专门给我的礼物时多多少少还是矫情了一会。还有一个就是恰恰奶奶了，伺候月子本身就是费力不讨好的事，既要做家务准备一日三餐，还要帮着带孩子。虽然我从来不会说什么，但月子前两个礼拜可能是体内激素的变动，也可能是觉得自己精力还够用，即便大体上对恰恰奶奶无可指摘，但一些小细节上还是因为没按照自己的心意来而生闷气。好在两周之后自己没那么敏感了，反过来开始庆幸有恰恰奶奶帮着带孩子，现阶段独自带孩子还是有些不切实际。等恰恰将来结婚生子了，我会出钱让他们去月子中心或者请月嫂，我可不干这费力不讨好的活。\n对医院的“吐槽” 由于一开始就在中日友好医院看病，所以怀孕后也选择了这家医院建档。中日分为普通部和国际部，一开始建档的时候也没太了解两者的不同，而且也顺利抢到了普通部的号，就自然而然地在普通部建档了。简单来说，国际部就是花更多的钱享受更好的病房以及一些特殊照顾，比如：住院可以选择单间，家属可以进产房，住院期间也能让家属进病房陪护。但医生都是同一批人，产检时如果选择无创 plus 也得转去妇产医院。所以感觉国际部的性价比一般。\n至于想吐槽的点主要有两点。一个是转院检查，比如上面提到的无创 plus 要转到妇产医院检查，中日只有基础版的无创。并且在整个产检流程中，但凡出现临界指标那么中日的医生也会让转到妇产医院再复查看看。如果妇产医院的复查没问题则回到中日继续走常规的产检流程，如果有问题则听从妇产医院的安排。所以产检就变成了两个医院双线并行，属实麻烦搞心态。因此还不如一开始就在妇产医院建档就不用两个医院来回跑了。妇产医院的产检环境也比中日普通部的好一些。第二点是上面提到的国际部的特殊照顾。当时我的病房里前后有两个妈妈都是中日的员工，虽然她们也是普通部，可除了没住上单人病房，其他的待遇还是比我们更特殊。一是家属进产房陪产了，二是她们的家属每天都能来病房探视，其中一个妈妈的家属还是好几个人一起来，而正常规定下的家属却只有刚生产完那半个小时的一人探视名额。所以规则也只是给外面的人制定的罢了，那外面的人想要享受同等的服务怎么办呢，加钱，上国际部。\n","date":"2025-01-07T16:55:10+08:00","permalink":"https://ldsdsy.github.io/p/%E6%81%B0%E6%81%B0%E6%97%A5%E8%AE%B0_01/","title":"恰恰日记_01"},{"content":"壇蜜日記 爱人最近发现了这本书，但是日语的读起来比较麻烦，虽然可以机翻，但由于我最近休假了，一方面有时间另一方面也在自学日语，这本书里都是简短的日记所以正好用来当练习的素材。不知道能坚持多久，但希望能翻译到最后。\n正文 二零一三年五月三十日（星期四）雨 下雨了，天气很冷。正是在这段时间里我第一次拍摄了 CM（广告）。与三年前相比已经进步了很多。负责的化妆师就是两年前我录制 DVD 时照顾过我的那个人。我怀念重聚。和往常一样，她明确表示她不喜欢自己不擅长的事情，而吹风机的声音让我昏昏欲睡。我很高兴她没有改变。\n五月三十一日（星期五）冷雨 我去了成田机场。虽然还没到想坐飞机到某个地方去的程度，但有点羡慕拖着大包和行李箱走来走去的人们。如果存在“小离家出走”的概念，那么“小私奔”不也能存在吗？去个没人认识的地方吧\u0026hellip;\u0026hellip;总感觉不这样说在死后就不能成佛了。把这追加到死前想做的十件事里。\n六月一日（星期六）晴 傍晚，网购的东西送到了。因为是家具，来了两位看上去是安装人员的年轻人。他们都身材小巧，皮肤被晒得黝黑，还有点面无表情。由于他们小巧瘦削的体型在造型上让人觉得有些性感，我差点在评价里写下“除了安装服务以外，其他方面也非常周到”，不过最终还是忍住了。今天开始就是六月了，我翻开了日历。深海生物日历，日历的图案从温泉花蟹变成了水母。\n六月二日（星期日）晴 自行车的钥匙不见了。因为备用钥匙早就扔掉了，所以完全束手无策。没办法，只好用钳子和螺丝刀把锁强拆掉。为什么即使有正当理由，但一拿起钳子和螺丝刀破坏某物时，就会让人觉得有一股犯罪的味道呢？话说回来，我为什么会把备用钥匙给扔了呢？去附近的超市买新锁时，看到刺身拼盘打七折，于是优先买了刺身。\n六月三日（星期一）晴 从白天开始的整日电视剧拍摄。到了今天是拍摄的最后一天，真是感慨万千。晚餐吃了咖喱。想想看，开拍时的午餐也是咖喱，可以说这次拍摄是以咖喱开始又以咖喱结束。拍摄期间，我和饰演我前夫的演员聊起了裸体海滩的话题。他说，如果接到裸体海滩的外景拍摄工作，至少希望能提前一个月通知他。他想去日光浴沙龙，把身体晒出均匀的色泽。“真是细致入微啊。” 我说。他回了一句：“嘛，电视上也拍不出来就是了。”\n六月四日（星期二）暑热 因为头痛而购买了止痛药。立刻服用后发现其中温和的成分对胃真的很友好，万分感谢。同时也想感谢不经意间碰上的特价日。傍晚时，我作为应邀嘉宾参加了一档音乐类节目。连及格线都达不到的歌声在工作人员的耐心指导下，总算让表演勉强成形。今天是感受到来自体内体外双重善意的一天。回到家时，看了一眼邮箱，发现被塞了一张男性增强体力的保健品广告。这也是一种善意吧。\n六月五日（星期三）晴 一大早在便利店里，店员建议我拿一张印有长颈鹿图案的积分卡。电子货币看起来很方便，但生于昭和五十五年的人还是喜欢拿着现金去购物。每次收到闪亮亮的一百日元硬币，我依然会感到高兴。直到中午之后，我参加了一家女性杂志的拍摄和采访。经常有人问我“有在收集什么吗？”我通常会解释说，我并不是那种会收集东西并把它们好好保存的人，反而会把抽屉里的东西连同抽屉一起丢掉。不过我确实喜欢收集理由。\n六月六日（星期四）晴 今天是母亲的生日，于是发了邮件并寄了礼物。每年都会为送什么而烦恼，这次买了吹风机。希望那些所谓的纳米护理功能随着风吹到头皮上，能发挥些作用吧。傍晚参加了一本女性杂志的拍摄。在现场，有位工作人员帮我穿衣服，但我发现她的裤子拉链开着。虽然她是女性，我却一瞬间误以为她是不是在向我示好\u0026hellip;\u0026hellip;不过，恋爱也有从误会开始的。这种事情，其实真的发生过呢。\n六月七日（星期五）阴 虽然炒饭是我的幸运午餐，但还是打算吃猪肉生姜烧来反抗看看。来到便利店，目光停留在一本封面上同时出现了粗俗词语和自己名字的杂志上，莫名地感觉这一周还能继续活下去。回到家后，一边盯着香薰蜡烛的火焰发呆，一边处理着让人心灰意冷的工作。其实我知道为什么会这么“emo”。因为今天是曾经喜欢过的人的生日。沉浸在回忆里，也是可以的吧。\n六月八日（星期六）晴 我买了一条牛仔裤。看着像是从男朋友那儿借来的，于是我一边试穿一边想象着和同等体型的男士一起迎接早晨的情景。为了增加些真实感，我选择了稍微大一点的款式。为了进一步增强临场感，我在最近的车站卫生间里换上了那条牛仔裤，在回家的路上继续购物。因为途中去了一家吃鱼的饭店，回到家时我隐约感觉牛仔裤上散发着烤鱼的香味。结果，我脑海中形成了一个小个子的渔夫（船是中型的）男朋友形象。我猜他是一个四十五岁长得像虎鲸并且会夸我像鳗鱼的人。\n六月九日（星期日）阴 我因为拍摄前往大阪。本打算在新干线上读小说，却倍感困顿。今夜只是提前到酒店入住，困意来袭也无可奈何。说到“提前到”（前乗り）这个词，总让我联想到某种积极的床上表现，应该不止我一个人有这种感觉吧。当被要求“提前到”时，怎样回答才显得得体呢？毕竟我也是普通人，若遇到这种情况，还是想真诚地回应“我会认真准备的”。在意识尚清醒时，阅读了一本新干线专属杂志，其中一篇题为“模仿品的下场不会光明”的文章给我留下了深刻印象。回想起来，我也曾被称作某某的接班人或某某的再来者。\n六月十日（星期一）晴 一整天都在拍摄。在道顿堀川的岸边，我发现了韩国纸币。那一片儿总是弥漫着淡淡的烤肉香味，给人一种异国情调。今天一起合作的演员，是在我学生时代的班级里深受追捧的音乐人。现在三十二岁的我，在大阪，以坛蜜这个艺人的身份与他面对面，真是完全无法预料的人生。更令人意外的是，还有吻戏。真的太让人意想不到了。\n六月十一日（星期二）晴 由于拍摄安排在晚上开始，白天得以悠闲度过。说是悠闲，但其实昨天的拍摄直到黎明才结束，累到几乎不记得淋浴后的事情。就连我这样都如此疲惫的话，那工作人员们的疲劳更是难以想象。晚上的拍摄是一场车内的戏，期间与饰演司机和乘客的演员们聊了起来。对于“什么时候会感到不安”的问题，饰演乘客的女性给出的答案让大家深感共鸣：“当餐馆老板看起来骨瘦如柴时”。顺便一提，我的答案是“当有人对我说‘别在意’时”以及“当莫名其妙收到一堆东西时”。\n六月十二日（星期三）晴转雨 中午乘坐新干线返回东京，大约两个半小时能回到家。回想起来，这次在大阪住了三晚。回到家后，发现有几张快递公司的通知，写着“您不在家，所以我们就先回去了”。买东西、洗衣服、处理这些通知和支付账单，不知不觉中一天就过去了。我并不讨厌这种从出差状态回到原本的生活中并重置一切的过程，因为它让我意识到现在有一个属于自己的地方。虽然，这个“地方”是完全物理意义上的。\n","date":"2024-12-13T11:58:28+08:00","permalink":"https://ldsdsy.github.io/p/%E5%A3%87%E8%9C%9C%E6%97%A5%E8%A8%98/","title":"壇蜜日記"},{"content":"Kubernetes Dashboard https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/\n一，简介 Dashboard 是 K8s 官方出的一个管理集群的可视化网页工具。\n二，部署 [ldsdsy@ml-redhat ~]$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml namespace/kubernetes-dashboard created serviceaccount/kubernetes-dashboard created service/kubernetes-dashboard created secret/kubernetes-dashboard-certs created secret/kubernetes-dashboard-csrf created secret/kubernetes-dashboard-key-holder created configmap/kubernetes-dashboard-settings created role.rbac.authorization.k8s.io/kubernetes-dashboard created clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created deployment.apps/kubernetes-dashboard created service/dashboard-metrics-scraper created deployment.apps/dashboard-metrics-scraper created [ldsdsy@ml-redhat ~]$ 三，暴露服务 // 方式一： [ldsdsy@ml-redhat ~]$ kubectl proxy Starting to serve on 127.0.0.1:8001 // 这种方式需要在执行这条命令的机器上打开网页，但我的集群都是虚拟机，所以再加后面一步 $ ssh -L8001:localhost:8001 ldsdsy@master_ip // 把本地主机的 8001 映射到 ldsdsy@ml-redhat 这台 master 节点的 8001 // 方式二： // 直接把名为 kubernetes-dashboard 的 svc 类型改为 NodePort [ldsdsy@ml-redhat ~]$ k edit -n kubernetes-dashboard svc kubernetes-dashboard service/kubernetes-dashboard edited [ldsdsy@ml-redhat ~]$ k get -n kubernetes-dashboard svc NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE dashboard-metrics-scraper ClusterIP 10.111.78.87 \u0026lt;none\u0026gt; 8000/TCP 3m10s kubernetes-dashboard NodePort 10.109.113.255 \u0026lt;none\u0026gt; 443:31018/TCP 3m10s [ldsdsy@ml-redhat ~]$ 四，访问登录页面 // 方式一：\nhttp://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\n// 方式二：\nhttps://nodeIP:31018/\npicture // 如图所示需要 token https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md\n如文档所示，在集群里创建 Service Account 和 ClusterRoleBinding 保存为 dashboard-adminuser.yaml\n$ kubectl apply -f dashboard-adminuser.yaml $ kubectl -n kubernetes-dashboard create token admin-user // 获取到 token 输入到网页点击登录 五，Dashboard 页面 picture 六，使用 界面很简洁，上侧是 ns 选择区和一个搜索框，左侧以列表形式展示的各种集群资源，结合 ns 一起过滤显示资源。以 Pod 为例，除了基本的信息显示外，还可在页面对它进行查看日志，进入容器，编辑，删除这四种操作。同时在右上方有一个 + 图标，点击 + 可在页面直接创建资源，当前 v2.7.0 的版本有三种创建方式：直接编辑 yaml/json 文本，从本地选取 yaml/josn 文件，设定部分关键信息来创建。简单说 Dashboard 的功能就是对集群资源进行增删改查，部署简单，适合一些基础的使用需求。\n七，追加 后续又使用了一下人气比较高的 Lens，确实比起 DashBoard 它更好：\n1，更清爽的安装方式 —— 是一个独立的软件，不需要安装在集群里，适配多平台；\n2，更多的功能 —— 集群添加简单，多集群管理； 3，更好的监控 —— 一键部署 prometheus，监控信息更多更全； \u0026hellip;\u0026hellip; 以上几点都只是我简单使用所感知到的一些不同，简单说，Lens 比 Dashboard 更全面，用起来更顺手一些，对于个人使用来说免费版的已经足够用。但 Lens 95% 的代码都是 TypeScript 写的，而且很独立于 K8s，所以还是想先研究研究 Dashboard 的源码（听说 Dashboard 的中国区后继无人🥲）。\n","date":"2023-08-23T17:33:28+08:00","permalink":"https://ldsdsy.github.io/p/k8s_dashboard/","title":"K8s_Dashboard"},{"content":"K8s 源码分析 —— scheduler（一） 基于 release-1.25 分支的代码分析\n一，疑问 Question：调度器挑选节点时，是根据节点当前的真实压力，还是根据 pod 的 request 值？\nAnswer：是根据 pod 的 request 来判断的，但有些插件在尝试根据节点真实压力来判断。\n具体代码位于：pkg/scheduler/framework/plugins/noderesources/fit.go#L253\n二，代码分析 1，概括 AdmissionCheck() ——\u0026gt; Fits() ——\u0026gt; fitsRequest(computePodResourceRequest(pod), nodeInfo, nil, nil) picture 2，局部逻辑 2.1 computePodResourceRequest(pod)： 计算 pod 的资源申请量：pod 里面分 init 容器和普通容器，由于 init 容器是顺序运行的，所以取最大值（initMax） 就行，而普通容器取申请值总和（sum），然后再取 max(initMax，sum) 作为最后的结果。\nExample: Pod: InitContainers IC1: CPU: 2 Memory: 1G IC2: CPU: 2 Memory: 3G Containers C1: CPU: 2 Memory: 1G C2: CPU: 1 Memory: 1G Result: CPU: 3, Memory: 3G 大致逻辑：\n1，遍历普通容器，把对应资源进行相加操作；\n2，遍历 init 容器，对比 1 里的结果和当前 init 容器每一项资源大小，取大值；\n3，如果存在 pod.Spec.Overhead，把 2 的结果再加上 pod.Spec.Overhead 返回。\n2.2 fitsRequest()： 根据 2.1 里得到的 pod 所需资源与当前节点上剩余资源相对比，判断各个资源是否够用，记录容量不足的资源返回上一层函数。\n大致逻辑：\n1，定义一个变量 insufficientResources，里面用来存放当前节点资源不足的信息； 2，如果当前节点上所运行着的 pod 数量 +1 \u0026gt; 此节点所允许运行的 pod 数量，则记录：\n\u0026#34;Too many pods\u0026#34; \u0026gt;\u0026gt; insufficientResources 3，如果此 pod 申请的各种资源大小全为 0，到此直接返回 insufficientResources； 4，如果此 pod 申请的 cpu \u0026gt; (此节点可分配的 cpu - 此节点上所有 pod 的 cpu 申请量总和)，则记录：\n\u0026#34;Insufficient cpu\u0026#34; \u0026gt;\u0026gt; insufficientResources 5，如果此 pod 申请的 memory \u0026gt; (此节点可分配的 memory - 此节点上所有 pod 的 memory 申请量总和)，则记录：\n\u0026#34;Insufficient memory\u0026#34; \u0026gt;\u0026gt; insufficientResources 6，如果此 pod 申请的临时存储容量 \u0026gt; (此节点可分配的临时存储容量 - 此节点上所有 pod 的临时存储容申请量总和)，则记录：\n\u0026#34;Insufficient ephemeral-storage\u0026#34; \u0026gt;\u0026gt; insufficientResources 7，遍历 ScalarResources，如果其中某一项资源申请量 \u0026gt; (此节点可分配 - 此节点上所有 pod 申请总和)，则记录：\n(\u0026#34;Insufficient %v\u0026#34;, rName) \u0026gt;\u0026gt; insufficientResources 8，返回 insufficientResources 。\n2.3 AdmissionCheck()： 检查当前节点是否可调度当前 pod，从资源，节点亲和性等各个方面进行判断。\n大致逻辑：\n1，定义一个变量 admissionResults，用来存放当前节点是否符合调度 pod 的结果； 2，获取到 Fits() 返回的 insufficientResources；\n3，判断 insufficientResources 是否为空，不为空则遍历 insufficientResources，追加到 admissionResults；\n4，判断 pod 的 nodeSelector 和 nodeAffinity 是否和节点相匹配，不匹配就把相关信息追加到 admissionResults；\n\u0026#34;node(s) didn\u0026#39;t match Pod\u0026#39;s node affinity/selector\u0026#34; 5，判断 pod.Spec.NodeName 是否和当前节点名称匹配，不匹配就把相关信息追加到 admissionResults；\n\u0026#34;node(s) didn\u0026#39;t match the requested node name\u0026#34; 6，判断 pod 里所有容器申请的端口信息与当前节点已使用的端口有冲突，如果有就把相关信息追加到 admissionResults；\n\u0026#34;node(s) didn\u0026#39;t have free ports for the requested pod ports\u0026#34; 7，返回 admissionResults，在 3～6 中，如果当前不要求返回所有不匹配信息(includeAllFailures==false)，在遇到第一个不匹配信息就会直接返回 admissionResults。\n三，总结 Scheduler 调度 pod 时，是根据资源申请值来判断当前节点是否可选择的。\nQ1：如果 Pod 的资源申请值是 1C，限制值是 2C，那么是否会调度到资源还有 1.5C 的节点上？\nA1：会。因为 Scheduler 只考虑了申请值，会出现容器使用的资源量达不到限制值的情况。 // 有一些 out-of-tree plugin 考虑了限制值，比如： https://github.com/kubernetes-sigs/scheduler-plugins/tree/master/pkg/trimaran/lowriskovercommitment\nQ2：如果一个 Pod 需要 1C1G，并且根据申请值判断出某节点上还剩 1C1G，但此节点上已运行的 Pod 使用的资源是大于其申请量的，所以该节点剩余资源并没有 1C1G， 那么是否会调度这个新 Pod 到这个节点上呢？\n","date":"2023-05-19T18:33:03+08:00","permalink":"https://ldsdsy.github.io/p/k8s_scheduler-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%80/","title":"K8s_scheduler 源码分析(一)"},{"content":"X-pipe 携程开发的一款 redis 数据同步的工具。可以在数据中心一挂掉后通过控制台快速切换到数据中心二。 https://github.com/ctripcorp/x-pipe\n一，创建 /bin/bash -c \u0026#34;$(curl -sSL https://raw.githubusercontent.com/ctripcorp/x-pipe/master/redis/dockerPackage/start-xpipe-container.sh)\u0026#34; // 官方建议在一个新建的文件夹执行这条命令 // 执行前需要先安装 docker-compose // 执行完成后，文件夹下会多出一个 docker-compose.yml 和一个关于 redis 配置的文件夹，并且会启动整套 x-pipe 的资源和八个 redis 二，布局 等待上述命令执行完成后，当前的部署图如下：\npicture // 左上角是数据中心一，有四个 redis 形成了两个分片（一个分片就是一个主节点及其所有从节点）。 // 右下角是数据中心二，同样的四个 redis 形成了两个分片，跟数据中心一相对应。 // 中间则是 x-pipe 的组件，完成数据的同步。\nx-pipe 同步数据是按分片对应同步的，如果在 0.10 里写入数据则会同步到 0.12/0.13，在 0.14 里写入的数据会同步到 0.16/0.17 。此时数据中心一里的 redis 是有主从关系，但数据中心二里面的 redis 全是作为 0.8（keeper）的从节点而存在（0.7 也是数据中心一里面主节点的 slave），当进行主机房迁移后，数据中心二里面的 redis 会进行选主操作，代替数据中心一。\n三，控制台 // 登陆控制台：localhost:8079/#/cluster_dc_shards/cluster1 picture picture 四，结束 $ docker-compose down 五，总结 官方的样例中所有 redis 节点都只是普通的主从节点，没有开启集群模式（cluster_enabled=0）。也就是说，redis 的角色是由 x-pipe 来控制的，如果想要通过 x-pipe 来同步两个 redis 集群是不可行的，因为数据中心二里面的 keeper 无法再作为第二个 redis 集群里所有节点的主节点来完成同步。\n// 官方解答：x-pipe 不支持 redis 集群模式，x-pipe 只是针对单纯的 redis 进行数据同步，节点之间不能组成集群，且主从角色由 keeper 来管理。\n","date":"2022-11-09T11:23:51+08:00","permalink":"https://ldsdsy.github.io/p/x-pipe/","title":"X-Pipe"},{"content":"从零搭建 k8s 集群 家里的台式机闲置了，建了几个虚拟机就打算搭建一个一主一从的集群，方便在家使用。\n一，准备工作 1，处理网络问题\nhttps://kubernetes.io/docs/setup/production-environment/container-runtimes/#forwarding-ipv4-and-letting-iptables-see-bridged-traffic\n// ：转发 IPv4 并让 iptables 看到桥接流量 $ cat \u0026lt;\u0026lt;EOF | sudo tee /etc/modules-load.d/k8s.conf overlay br_netfilter EOF $ sudo modprobe overlay $ sudo modprobe br_netfilter // 设置所需的 sysctl 参数，参数在重新启动后保持不变 $ cat \u0026lt;\u0026lt;EOF | sudo tee /etc/sysctl.d/k8s.conf net.bridge.bridge-nf-call-iptables = 1 net.bridge.bridge-nf-call-ip6tables = 1 net.ipv4.ip_forward = 1 EOF // 应用 sysctl 参数而不重新启动 $ sudo sysctl --system 二，安装容器运行时 —— docker k8s v1.24 之后就不用 docker 而使用 containerd 了，但是，安装 docker 时本身也需要安装 containerd ，而且 docker 还能用来构建镜像，所以还是决定安装 docker。\n1，进入 docker 官网\nhttps://docs.docker.com/engine/install/\ndocker 官网 ——\u0026gt; Docker Engine ——\u0026gt; Server ——\u0026gt; Centos(x86_64/amd64) 来到 Install Docker Engine on ContOS 页面。有三种安装方法，选择第一种 Install using the repository：\n$ sudo yum install -y yum-utils $ sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo $ sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin // 安装最新的版本，指定版本网页上也有详细说明 $ sudo systemctl start docker $ sudo systemctl enable docker // 设置开机自启 $ sudo docker run hello-world // 检测是否安装成功 三，安装 kubeadm，kubelet，kubectl https://kubernetes.io/zh-cn/docs/setup/production-environment/tools/kubeadm/install-kubeadm/，centOS 是基于 Red Hat 的发行版。\n$ cat \u0026lt;\u0026lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch enabled=1 gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg exclude=kubelet kubeadm kubectl EOF // 将 SELinux 设置为 permissive 模式（相当于将其禁用） $ sudo setenforce 0 $ sudo sed -i \u0026#39;s/^SELINUX=enforcing$/SELINUX=permissive/\u0026#39; /etc/selinux/config $ sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes $ sudo systemctl enable --now kubelet 四，创建集群 在执行 kubeadm init 之前还有些准备工作，不然会报错。如果 kubeadm init 没有成功执行，解决问题后都要先 kubeadm reset 再 kubeadm init，主从节点都是，如果从节点执行了 kubeadm join。\n1，此时直接执行 $ kubeadm init，有两条报错信息：\n报错一：[WARNING Firewalled]\u0026hellip; 解决办法：需要关闭防火墙\n$ systemctl disable firewalld $ systemctl stop firewalld 报错二：[ERROR CRI]\u0026hellip; 报错原因是当前的 containerd 是服务于 docker 的，它的配置文件也是由 docker 指定为 disable-plugins=[\u0026ldquo;cri\u0026rdquo;]。 // docker:\u0026ldquo;You don\u0026rsquo;t need to be yourself, obey me!\u0026rdquo; 解决办法：删除当前配置，并生成一个 containerd 单独运行用的默认配置。\n$ rm -rf /etc/containerd/config.toml $ containerd config default \u0026gt; /etc/containerd/config.toml // 修改生成的默认配置中的其中一条：false 改为 true [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.containerd.runtimes.runc] ... [plugins.\u0026#34;io.containerd.grpc.v1.cri\u0026#34;.containerd.runtimes.runc.options] SystemdCgroup = true // 此时如果再执行 kubeadm reset; kubeadm init 那么是可以初始化成功的，但是，在安装网络插件时需要在 init 时添加子命令，那么又需要重新初始化集群，所以先看 calico 教程：\nhttps://projectcalico.docs.tigera.io/getting-started/kubernetes/quickstart\n$ sudo kubeadm init --pod-network-cidr=192.168.0.0/16 $ mkdir -p $HOME/.kube $ sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config $ sudo chown $(id -u):$(id -g) $HOME/.kube/config $ kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/tigera-operator.yaml $ kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.1/manifests/custom-resources.yaml $ watch kubectl get pods -n calico-system // 部署 calico 的时候要用 create ，如果用 apply 会报错说注解太长 3，加入 worker 节点\n在上一步执行完 sudo kubeadm init \u0026ndash;pod-network-cidr=192.168.0.0/16 后，会出现一条 kubeadm join 的命令，复制到 worker 节点执行就行。\n// 以上几乎所有操作都是要在所有节点上运行的，只是 init 以及安装 calico 只在主节点上执行，join 只在从节点上执行。\n五，注意事项 1，如果当前节点之前已经执行过 kubeadm init/join，再重建 k8s 集群时一定要先 kubeadm reset。\n2，把网络插件从 calico 改成 flannel 后，kube-system 下面的 coredns 起不来，原因是 kubelet 会从默认目录读取配置文件，如果有多个配置文件，那么它会按字母顺序应用先出现的配置文件中的 CNI 插件。解决办法：到 coredns 所在的节点上删除 /etc/cni/net.d/ 目录下面关于 calico 的两个相关文件。\n六，追加 1，后期使用时发现 master 节点跟 pod 不通，但是 worker 节点是通的。暂不清楚原因。改用 flannel 正常：\n$ sudo kubeadm init --pod-network-cidr=10.244.0.0/16 $ kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml 2，2023/07/26 在新的机器上搭建最新的 k8s1.27，三台机器的系统分别是 alma，opensuse，debian： 1）alma 正常；\n2）opensuse 多次修正均报错：\nThe HTTP call equal to \u0026#39;curl -sSL http://localhost:10248/healthz\u0026#39; failed with error: Get \u0026#34;http://localhost:10248/healthz\u0026#34;: dial tcp [::1]:10248: connect: connection refused. // opensuse 的软件包有些问题，安装的 kubelet 无法正常使用，后续换成 ubuntu 系统正常 3）debian 报错：CRI 没有正常运行，但查看 containerd 的状态又是 running 的，原因是通过 apt 安装的 containerd 版本太低不适配 k8s1.27 ，通过 docker 官网的提示安装最新的 containerd 就行（1.6.21 可以）。\n","date":"2022-10-01T21:52:24+08:00","permalink":"https://ldsdsy.github.io/p/k8s_%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4/","title":"K8s_搭建集群"},{"content":"Go —— GC（垃圾回收） 本博客为一课程笔记，方便快速回顾。此课程所讲的 GC 有针对栈空间，但大多数博客均称 golang GC 只针对堆，不针对栈。\n一，GC 存在的意义 让人能更专注于业务的编写，而不用担心内存的回收问题。\n二，GC 的发展阶段 1，goV1.3 之前：标记-清除（mark and sweep） 1.1 逻辑：\nSTW（stop the world）——\u0026gt; 标记程序可达对象 ——\u0026gt; GC 清理不可达对象 ——\u0026gt; 停止暂停，程序继续执行\n// 循环上述过程，直到程序生命周期结束\n1.2 缺点： 1) STW，程序暂停，出现卡顿；\n2) 标记需要扫描整个 heap；\n3) 清除数据会产生 heap 碎片。\n/*堆栈区别：堆（heap）和栈（stack）有两个含义，一个是指抽象数据结构，另一个是指操作系统中的内存空间。前者它们实现和作用都有很大差异所以比较少被放在一起比较，后者则是同气连枝常常被“相提并论”。堆在操作系统中为按需申请、动态分配，由于内存中的空闲空间不是连续的，操作系统会根据应用程序提出的申请从堆中按照一定的算法找出可用内存标记后给程序使用；而操作系统中的栈则是程序运行时自动拥有的一小块内存，大小由编译器参数决定，用于存放局部变量或者函数调用栈的保存。它们的区别如果长篇大论会讲非常多的内容，简单总结起来就是： 堆：时效持久、全局可见、手动申请、手动释放 栈：时效临时、局部可见、自动申请、自动释放*/ 2，goV1.5: 三色标记法 2.1 逻辑： 白 ——\u0026gt; 灰 ——\u0026gt; 黑: 1，所有创建的新对象都标记为“白色”； 2，每次 GC 开始，从根节点遍历所有对象，把遍历到对象从“白色”集合中放入“灰色”集合； 3，遍历灰色集合，将灰色集合中的对象引用的对象从白色变为灰色，再把此灰色对象放入黑色集合； 4，重复第三步，直到没有灰色节点； 5，回收所有白色标记的对象。\n2.2 隐含问题：\n如果三色标记法不被 STW 保护： 1，一个白色对象被黑色对象引用；\n2，灰色对象与其可达的白色对象遭到破坏；\n以上两条同时满足，就会出现对象丢失现象。\n解决办法：\n1）强三色不变式：\n强制性的不允许黑色对象引用白色对象。（破坏上述第一条可能）\n2）弱三色不变式：\n黑色对象可以引用白色对象，但白色对象的链路上游必须存在有灰色对象 // 三色标记法中只要满足强/弱之一，就可保证对象不丢失。\n2.3 屏障机制（实现强/弱三色不变式的方法）： 1，插入屏障 对象被引用时触发的机制： 在 A 对象引用 B 对象时，把 B 标记为灰色（不管 B 之前是白色还是灰色）—— 强三色不变式。\n// 伪码 添加下游对象（当前下游对象 slot，新下游对象 ptr）{ // 1 标记灰色（ptr） // 2 slot=ptr } 场景一：A.添加下游对象（nil，B） // A 之前没有下游，新添加下游 B，B 标记为灰色 场景二：A.添加下游对象（C，B） // A 将下游 C 更换为 B，B 标记为灰色 // 不在栈上使用，为了保证栈的运行效率（栈本身空间小，且对速率有一定要求），那怎么保证栈空间没有无辜的对象对清除呢？\n答：在按照插入屏障机制完成三色标记法后，堆空间里被引用的对象肯定都标为黑色了，在清除白色对象前对栈空间的对象调用一次 STW ，重新从头扫描标记，以防止中途引入的对象没有被标记为黑色，然后再清除白色对象。\n所以插入屏障的不足：结束时还是需要一次 STW 来重新扫描栈，大约需要 10～100ms。\n2，删除屏障 对象被删除时触发的机制： 把要被删除（被断开）的对象标记为灰色，不管它本身是灰色白色。\n// 伪码 添加下游对象（当前下游对象 slot，新下游对象 ptr）{ // 1 if (slot 是灰色 ｜｜ slot 是白色){ 标记灰色（slot） } // 2 slot=ptr } 场景一：A.添加下游对象（B，nil） // A对象删除对B对象的引用。B 被 A 删除，被标记为灰色 场景二：A.添加下游对象（B，C） // A对象更换下游对象为 C。B 被 A 删除，被标记为灰色 不足：回收精度低\n一个对象即使被删除了（不被引用了），仍可以活过这一轮，直到下一轮 GC 中被清理掉。\n3，go v1.8：三色标记法+混合写屏障机制 3.1 逻辑：\n1，GC 开始直接将栈上的全部可达对象扫描并标记黑色（之后就无需 STW 再二次重复扫描）；\n2，GC 期间，任何在栈上创建的新对象，均标为黑色；\n3，堆上被删除对象标记为灰色； 4，堆上被添加的对象标记为灰色；\n// 伪码 添加下游对象（当前下游对象 slot，新下游对象 ptr） { // 1 标记灰色（slot） // 2 标记灰色（ptr） // 3 slot=ptr } ","date":"2022-08-31T21:07:48+08:00","permalink":"https://ldsdsy.github.io/p/go_gc/","title":"Go_GC"},{"content":"原来如此_2022 不经意间知道的东西。\n灰姑娘的名字 大家肯定都听过灰姑娘的故事，一直以来我认为灰姑娘这个名字只是为了契合她身世悲惨，所以给她取了一个这样的代称，当然也没去思考过她是否有真实的名字。前段时间偶然听了灰姑娘的英语版本，里面给她的名字由来做了如下解释：她原名叫 Ella，但后续由于遭到继母打压，她的姐姐们也嘲笑她说：“你每天都和灰尘煤渣作伴，那干脆就叫你 Cinderella 好了”（cinder —— 煤渣）。所以有些版本里会音译为 “辛德瑞拉”。这样来看，中文版翻译为灰姑娘倒是挺合适的。当然这只是一种版本，这种故事由来以久，各种版本也是层出不穷。而且仔细想想，灰姑娘，白雪公主，美女与野兽这些故事，都是后妈在作祟，额，就挺巧合。// 后妈 —— stepmother\n日清战争 日清战争是日本的叫法，其实就是中日甲午战争。知道这一点是在夏目漱石的「心」里看到的。为什么要突然看这本书呢，是因为被 b 站推荐了一个 「心」的日语版有声书，当时听到一半的时候就觉得这故事挺有趣的诶，我要买这本书好好看一遍。怀着亢奋的心情买了书，结果发现自己听的有声书其实只是“先生的遗书”这一章，并且由于我已经先听过这一章了，就导致前面的伏笔显得特别无聊，这本书又写的很细腻，就更难得看下去，可如果看一半就算了，心里又很不舒服，于是硬着头皮总算看到了最终章。\n书中的先生算不得君子，甚至是有点小人，一方面他带着关怀的心情帮助好友 K，另一方面他又因小姐跟 K 之间的亲密而感到焦躁不安，以至于在 K 道明心迹时义正严辞地教训 K，并自己捷足先登间接导致了 K 的自杀，而自己又因为 K 的死自责愧疚永生。K 的一生是不幸的，先生的一生也是不幸的，小姐的一生还是不幸的，导致他们不幸的既是他们自己又不是他们自己，就像早上太阳升起，晚上太阳落下，饿了要吃饭，困了要睡觉一样，日子就这样过去了，不幸就这样发生了。也许这就是每个人都无法逃脱的自我的宿命，虽然这很不符合马克思主义，但我确实是认为这整个世界都是一个个程序罢了，幸运的不幸的都只是在按预设的逻辑在执行，即便是幸运与否都只是一个参数定义。所以，如果你正顺风顺水，那么这只是你应该经历的，如果你正深陷泥潭，那么这也只是你应该经历的，无论好坏，经历过了就过了。\n","date":"2022-06-19T22:45:37+08:00","permalink":"https://ldsdsy.github.io/p/%E5%8E%9F%E6%9D%A5%E5%A6%82%E6%AD%A4_2022/","title":"原来如此_2022"},{"content":"kubectl debug kubectl debug 是什么 kubectl debug 是一款 k8s pod 诊断工具，能够帮助进行 pod 的排障诊断。在 1.16 ~ 1.22 中为 Alpha，默认关闭，从 1.23 开始为 Beta，默认开启。feature gates == EphemeralContainers kubectl debug 起源 部分开发者喜欢在生产中使用极致精简的容器镜像，这也是容器技术中的一个最佳实践。这种精简主义也有很多好处，而且在大多数情况下运行良好，可一旦需要在生产中排除一些故障时，这就变得很困难了，因为精简后的容器普遍缺失常用的排障工具，有些甚至没有 bash/sh 解释器。于是就有人在 Kubernetes 社区提出如果有一种方法可以为正在运行的 pod 启用某种调试模式，再附加一套调试工具能在容器中执行，那就最好不过了。但由于改动的涉及面很广，从 16 年就出现了相关的 Issue Support for troubleshooting distroless containers 开始，直至今日 debug 功能才逐渐成熟。\nkubectl debug 工作原理 我们知道，容器本质上是带有 cgroup 资源限制和 namespace 隔离的一组进程。因此，我们只要启动一个进程，并且让这个进程加入到目标容器的各种 namespace 中，这个进程就能 “进入容器内部”（注意引号），与容器中的进程 “看到” 相同的根文件系统、虚拟网卡、进程空间了——这也正是 docker exec 和 kubectl exec 等命令的运行方式。\n现在的状况是，我们不仅要 “进入容器内部”，还希望带一套工具集进去帮忙排查问题。那么，想要高效管理一套工具集，又要可以跨平台，最好的办法就是把工具本身都打包在一个容器镜像当中。 接下来，我们只需要通过这个 “工具镜像” 启动容器，再指定这个容器加入目标容器的的各种 namespace，自然就实现了“携带一套工具集进入容器内部”。\nkubectl debug 怎么用 1，开启功能 1) 根据集群版本判断是否需要手动开启此功能（我的环境为 1.21 所以是需要手动开启的）： a. 进入 master 节点，编辑 /etc/kubernetes/manifests/ 下的 kube-apiserver.yaml,kube-controller-manager.yaml 及 kube-scheduler.yaml，在 command 部分添加 - --feature-gates=EphemeralContainers=true； b. ！！！同时也要在被调试 pod 所在的节点上编辑 /var/lib/kubelet/kubeadm-flags.env，添加 --feature-gates=EphemeralContainers=true； or $ cat /etc/sysconfig/kubelet KUBELET_EXTRA_ARGS=\u0026#34;--feature-gates=EphemeralContainers=true\u0026#34; c. 重启 kubelet： $ systemctl daemon-reload $ systemctl restart kubelet 2，使用 2.1 使用临时容器调试 $ kubectl debug -it pod_name --image=busybox:1.28 --target=container_name // 为 pod 里的具体某个容器添加一个临时容器（镜像为 busybox）进行 debug 实例一：创建一个 pod，该 pod 功能是从桶 mybucket1 获取文件 test.txt 复制到本地目录 /data/test.txt 再从此目录把 test.txt 上传到桶 mybucket2 里。错误状态：桶 mybucket2 并没有相应文件，查找原因。\n1，创建 pod1\n[centos@ml-k8s-1 test1]$ kubectl apply -f pod1.yaml secret/pod1-secret created clusterrole.rbac.authorization.k8s.io/pod1-get created clusterrolebinding.rbac.authorization.k8s.io/pod1-get-rbac created serviceaccount/pod1-sa created pod/pod1 created [centos@ml-k8s-1 test1]$ kubectl get pod NAME READY STATUS RESTARTS AGE pod1 1/1 Running 0 7s // pod1 一直处于 Running ，正常情况是 10s 内就会 completed ，只有失败的时候才会卡在 Running 不动 // 此时桶 mybucket2 确实也没有数据 2，描述 pod 当前状态\n[centos@ml-k8s-1 deploy]$ kubectl describe pod pod1 ... Events: Type Reason Age From Message ---- ------ ---- ---- ------- Normal Scheduled 5m44s default-scheduler Successfully assigned default/pod1 to ml-k8s-2.novalocal Normal Pulling 5m42s kubelet Pulling image \u0026#34;beyond.io:5000/debug-test:0.1.1\u0026#34; Normal Pulled 5m42s kubelet Successfully pulled image \u0026#34;beyond.io:5000/debug-test:0.1.1\u0026#34; in 59.162221ms Normal Created 5m42s kubelet Created container pod1 Normal Started 5m42s kubelet Started container pod1 // 看不出任何问题 3，查看 pod 日志\n[centos@ml-k8s-1 test1]$ kubectl logs pod1 I0429 10:24:34.913853 1 main.go:18] Test start! I0429 10:24:34.914013 1 main.go:19] Pulling data from bucket 1 and storing it in bucket 2. I0429 10:24:34.961361 1 main.go:61] \u0026amp;{0xc000442180} E0429 10:24:37.968336 1 main.go:70] Wrong in coping object from mybucket1 to localFile: Get \u0026#34;http://10.20.9.60:30009/mybucket1/?location=\u0026#34;: dial tcp 10.20.9.60:30009: connect: no route to host // 程序已启动但是从桶 mybucket1 复制文件到本地时失败 // 看到这个日志大概能猜到网址不对劲，但假设不确定是不是网址问题或没有这条日志 4，进入容器内部排查\n[centos@ml-k8s-1 test1]$ kubectl exec -it pod1 -- sh OCI runtime exec failed: exec failed: container_linux.go:380: starting container process caused: exec: \u0026#34;sh\u0026#34;: executable file not found in $PATH: unknown command terminated with exit code 126 // 此镜像的基础镜像为 scratch，无法执行 kubectl exec 5，debug 进入容器内部\n[centos@ml-k8s-1 test1]$ kubectl debug -it pod1 --image=busybox:1.28 --target=pod1 Defaulting debug container name to debugger-h59bb. If you don\u0026#39;t see a command prompt, try pressing enter. / # ls bin dev etc home proc root sys tmp usr var / # cd proc/1/root (unreachable)/ # ls app data dev etc proc sys var (unreachable)/ # cd data (unreachable)/data # ls test.txt (unreachable)/data # cat test.txt (unreachable)/data # ping 10.20.9.60 PING 10.20.9.60 (10.20.9.60): 56 data bytes ^C --- 10.20.9.60 ping statistics --- 9 packets transmitted, 0 packets received, 100% packet loss (unreachable)/data # ping 10.20.9.61 PING 10.20.9.61 (10.20.9.61): 56 data bytes 64 bytes from 10.20.9.61: seq=0 ttl=63 time=13.941 ms 64 bytes from 10.20.9.61: seq=1 ttl=63 time=1.050 ms 64 bytes from 10.20.9.61: seq=2 ttl=63 time=0.462 ms 64 bytes from 10.20.9.61: seq=3 ttl=63 time=0.472 ms ^C --- 10.20.9.61 ping statistics --- 4 packets transmitted, 4 packets received, 0% packet loss round-trip min/avg/max = 0.462/3.981/13.941 ms (unreachable)/data # // 进入 pod1 容器内部，查看 /data 目录下是否有成功复制文件 test.txt，发现 test.txt 为空，复制未成功 // 测试 minio 网站是否能链接上，确实不行。发现网址输入错误 // 修改好正确网址再次部署 pod1，运行成功，桶 mybucket2 里出现 test.txt 2.2 使用副本调试 2.2.1，创建副本调试 $ kubectl debug myapp -it --image=ubuntu --share-processes --copy-to=myapp-debug // --share-processes 允许在此 Pod 中的其他容器中查看该容器的进程 // 示例一中的方式关注点是无法进入容器内部，所以通过一个临时容器进入被调试容器内部排查问题 // 此方式重点是原镜像调试工具有限，不能满足调试要求，所以注入一个调试工具更多的镜像来工作，同时创建一个副本不影响原有的服务。 实例二：针对实例一中的网址问题，也可以采用创建副本的方式来注入原镜像不包含的调试工具进行排错\n1，进入容器\n[centos@ml-k8s-1 test1]$ kubectl debug pod1 -it --image=busybox:1.28 --share-processes --copy-to=pod1-debug Defaulting debug container name to debugger-w8pqk. If you don\u0026#39;t see a command prompt, try pressing enter. / # ping 10.20.9.60 PING 10.20.9.60 (10.20.9.60): 56 data bytes ^C --- 10.20.9.60 ping statistics --- 4 packets transmitted, 0 packets received, 100% packet loss / # ping 10.20.9.61 PING 10.20.9.61 (10.20.9.61): 56 data bytes 64 bytes from 10.20.9.61: seq=0 ttl=63 time=11.655 ms 64 bytes from 10.20.9.61: seq=1 ttl=63 time=0.590 ms 64 bytes from 10.20.9.61: seq=2 ttl=63 time=0.454 ms 64 bytes from 10.20.9.61: seq=3 ttl=63 time=0.434 ms ^C --- 10.20.9.61 ping statistics --- 4 packets transmitted, 4 packets received, 0% packet loss round-trip min/avg/max = 0.434/3.283/11.655 ms / # 2.2.2，创建副本时改变命令 实例三：创建一个 pod，该 pod 功能是运行一个 shell 脚本打印当前日期。错误状态：日志并没有打印出日期，且 pod 已运行完成处于 competed 状态，排查原因\n1，创建 pod3\n[centos@ml-k8s-1 test3]$ kubectl apply -f pod3.yaml pod/pod3 created 2，查看 pod\n[centos@ml-k8s-1 test3]$ kubectl get pod NAME READY STATUS RESTARTS AGE pod3 0/1 Completed 0 7s 3，查看日志\n[centos@ml-k8s-1 test3]$ kubectl logs pod3 Hello ldsdsy Today is // 期望日志是会打印出当前日期，但并没有 4，进入容器\n[centos@ml-k8s-1 test3]$ kubectl exec -it pod3 -- sh error: cannot exec into a container in a completed pod; current phase is Succeeded // pod 已完成，无法再进入容器内部 5，创建副本\n[centos@ml-k8s-1 test3]$ kubectl debug pod3 -it --copy-to=pod3-debug --container=pod3 -- sh If you don\u0026#39;t see a command prompt, try pressing enter. / # ls app bin dev etc home proc root sys tmp usr var / # cd app /app # ls test.sh /app # cat test.sh #! /bin/sh echo \u0026#34;Hello ldsdsy\u0026#34; time=$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) echo \u0026#34;Today is $ttime\u0026#34; /app # // 以 sh 的形式进入容器内部，可以一句一句地运行代码排查是什么地方出错，此处很简单可以看出是错把 time 写成了 ttime 2.2.3，创建副本时改变镜像 实例四：在实例三的基础上，修改 ttime 的拼写问题，重新打包镜像\n1，创建 pod 副本，把容器 pod3 的镜像改为新镜像\n[centos@ml-k8s-1 test3]$ kubectl debug pod3 --copy-to=pod3-debug --set-image=pod3=beyond.io:5000/debug-test:0.1.4 // --set-image=*=xxx 表示把 pod 的所有容器镜像全换成 xxx 2，查看 pod\n[centos@ml-k8s-1 test3]$ kubectl get pod NAME READY STATUS RESTARTS AGE pod3 0/1 Completed 0 13m pod3-debug 0/1 Completed 0 8s 3，查看日志\n[centos@ml-k8s-1 test3]$ kubectl logs pod3-debug Hello ldsdsy Today is 2022-05-02 09:50:25 [centos@ml-k8s-1 test3]$ // 此时输出正常，新镜像可行 2.3 使用 shell 调试 实例五：创建一个 pod，该 pod 功能是读出其所在节点下 /home/centos/data 目录里的数据。错误状态：没有读出任何数据，排查问题。\n1，创建 pod5\n[centos@ml-k8s-1 test5]$ kubectl apply -f pod5.yaml pod/pod5 created 2，查看 pod\n[centos@ml-k8s-1 test5]$ kubectl get pod -o wide NAME READY STATUS RESTARTS AGE IP NODE NOMINATED NODE READINESS GATES pod5 0/1 Completed 0 82s 10.245.0.213 ml-k8s-3.novalocal \u0026lt;none\u0026gt; \u0026lt;none\u0026gt; // pod 运行正常 3，查看 pod 日志\n[centos@ml-k8s-1 test5]$ kubectl logs pod5 DIR is /data /data/* // 没有数据 4，shell 调试\n[centos@ml-k8s-1 debug]$ kubectl debug node/ml-k8s-2.novalocal -it --image=centos Creating debugging pod node-debugger-ml-k8s-2.novalocal-bb8s2 with container debugger on node ml-k8s-2.novalocal. If you don\u0026#39;t see a command prompt, try pressing enter. [root@ml-k8s-2 /]# ls bin dev etc home host lib lib64 lost+found media mnt opt proc root run sbin srv sys tmp usr var [root@ml-k8s-2 /]# cd host [root@ml-k8s-2 host]# ls bin boot dev etc home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var [root@ml-k8s-2 host]# cd home/centos [root@ml-k8s-2 centos]# ls beyonlet_0.tar coredns.tar data debug kubeadm nfs-subdir-external-provisioner.tar nfs.tar redis redis-tools-41.tar [root@ml-k8s-2 centos]# cd data [root@ml-k8s-2 data]# ls [root@ml-k8s-2 data]# // 节点的根文件系统会被挂载在 /host // 进入节点 2，查看相关目录，发现目录下本就没有数据，导入数据重启 pod ，正常 三种调试的区别 1，第一种使用临时容器，更多的是被调试的容器处于 running 状态但又无法进入到容器内部调试，所以借助临时容器来进入容器内部排查问题。\n2，第二种使用 pod 副本，更多的是建立一个被调试容器的副本用来调试，这样无需关心原本被调试容器的状态如何。\n3，第三种使用 shell 调试，是在上述方式都不行的情况下，直接进入 pod 所在节点上进行调试。\n调研过程中遇到的问题 1，为什么编辑完 kube-apiserver.yaml 及 kube-scheduler.yaml 不用 apply ，pod 就自动重启了？ 1) 因为 apiserver，scheduler，etcd，controller manager 是静态 pod。静态 pod 直接由 kubelet 进程管理，而不是 apiserver。 2) kubelet 会自动为每一个静态 pod 在 k8s 的 apiserver 上创建一个镜像 pod，因此可以在 apiserver 中查询到该 pod。 3) 创建静态 pod 有两种方式：配置文件，HTTP。 1. 配置文件：通过 kubelet 配置的环境变量（一个具体目录），让 kubelet 定期去扫描这个目录，根据目录下出现/消失/变动的 yaml/json 文件来创建/删除/更新静态 pod。步骤如下： a) $ systemctl status kubelet // 在想要运行静态 pod 的节点上找到 kubelet 的启动配置文件 b) $ cat /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf // Environment=\u0026#34;KUBELET_SYSTEM_PODS_ARGS=--pod-manifest-path=/etc/kubernetes/manifests --allow-privileged=true\u0026#34; // 环境变量 --pod-manifest-path 后即是 kubelet 会定期扫描的目录，把想创建的静态 pod yaml 放在此目录即可 // 如果启动参数里面没有这个参数，添加上重启 kubelet 即可。（$ systemctl restart kubelet） 2. HTTP：kulete 会周期性地从 -manifest-url= 参数指定的地址下载文件并翻译成 yaml/json 格式的 pod 定义，此后与配置文件的方式相同，kubelet 会不时地重新下载该文件，当文件变化时对应地操作 pod。 4) 除了上述方式，还可以在 kubelet 配置文件中添加 staticPodPath:\u0026lt;目录\u0026gt; 字段来实现。 // 配置文件在 /var/lib/kubelet/config.yaml，此方法有一定风险。 2，为什么使用临时容器调试时，kubectl debug 后不生效？ 1) 如果不配置 apiserver，controller-manager，scheduler 这个三个组件的 yaml 文件设定使用临时容器，则执行 kubectl debug 后会报错。 2) 设置了上述三个 yaml 文件，但没有配置 pod 所在节点上的 kubelet 开启临时容器功能，则在执行 kubectl debug 后会一直卡住，不会显示预期的命令行。 3，kubelet 到底有多少种配置方式 在以上实验过程中，发现每篇博客都有不同 kubelet 的配置方式\n根源在于 linux 系统里有很多 system 目录，常见的有 /etc/systemd/system、/lib/systemd/system 以及 /uer/lib/systemd/system 等。其中 后两者指向同一目录，在根目录下执行 ll 可知。\n/etc/systemd/system: Local configuratin，是系统管理员安装的单元文件。\n[/usr]/lib/systemd/system: Units of installed packages，目录包含的是软件包安装的单元，即通过 yum，dnf，rpm 等软件包管理命令管理的 systemd 单元文件。\n还有一个 /run/systemd/system: Runtime units，这个一般是进程在运行时动态创建 unit 文件的目录，一般不修改，除非改程序运行时的一些参数，即 Session 级别的。\n/etc/systemd/system, /run/systemd/system, /lib/systemd/system 优先级从高到低\n附录 实例一 1，main.go\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;io\u0026#34; \u0026#34;os\u0026#34; \u0026#34;time\u0026#34; \u0026#34;github.com/minio/minio-go/v7\u0026#34; \u0026#34;github.com/minio/minio-go/v7/pkg/credentials\u0026#34; metav1 \u0026#34;k8s.io/apimachinery/pkg/apis/meta/v1\u0026#34; \u0026#34;k8s.io/client-go/kubernetes\u0026#34; \u0026#34;k8s.io/client-go/rest\u0026#34; \u0026#34;k8s.io/klog/v2\u0026#34; ) func main() { klog.Info(\u0026#34;Test start!\u0026#34;) klog.Info(\u0026#34;Pulling data from bucket 1 and storing it in bucket 2.\u0026#34;) // creates the in-cluster config config, err := rest.InClusterConfig() if err != nil { klog.Errorln(\u0026#34;Wrong in creating config: \u0026#34;, err) } // create the clientset clientset, err := kubernetes.NewForConfig(config) if err != nil { klog.Errorln(\u0026#34;Wrong in creating clientset: \u0026#34;, err) } // Get info of minio from s3-secret secret, err := clientset.CoreV1().Secrets(\u0026#34;default\u0026#34;).Get(context.TODO(), \u0026#34;minio-secret\u0026#34;, metav1.GetOptions{}) if err != nil { klog.Errorln(\u0026#34;Wrong in getting secret: \u0026#34;, err) time.Sleep(1 * time.Hour) } id := string(secret.Data[\u0026#34;id\u0026#34;]) key := string(secret.Data[\u0026#34;key\u0026#34;]) endpoint := string(secret.Data[\u0026#34;endpoint\u0026#34;]) useSSL := false //true 会走 https // Initialize minio client object. minioClient, err := minio.New(endpoint, \u0026amp;minio.Options{ Creds: credentials.NewStaticV4(id, key, \u0026#34;\u0026#34;), Secure: useSSL, }) if err != nil { klog.Errorln(\u0026#34;Wrong in getting minioClient : \u0026#34;, err) time.Sleep(1 * time.Hour) } object, err := minioClient.GetObject(context.Background(), \u0026#34;mybucket1\u0026#34;, \u0026#34;test.txt\u0026#34;, minio.GetObjectOptions{}) if err != nil { klog.Errorln(\u0026#34;Wrong in getting object from mybucket1: \u0026#34;, err) time.Sleep(1 * time.Hour) } //以读写方式打开文件，如果不存在，则创建(只创建文件，不能创建文件夹) localFile, err := os.OpenFile(\u0026#34;/data/test.txt\u0026#34;, os.O_RDWR|os.O_CREATE, 0766) if err != nil { klog.Errorln(\u0026#34;Wrong in creating /data/test.txt: \u0026#34;, err) time.Sleep(1 * time.Hour) } klog.Info(localFile) defer localFile.Close() if _, err = io.Copy(localFile, object); err != nil { klog.Errorln(\u0026#34;Wrong in coping object from mybucket1 to localFile: \u0026#34;, err) time.Sleep(1 * time.Hour) } file, err := os.Open(\u0026#34;/data/test.txt\u0026#34;) if err != nil { klog.Errorln(\u0026#34;Wrong in getting object from /data/test.txt: \u0026#34;, err) time.Sleep(1 * time.Hour) } defer file.Close() fileStat, err := file.Stat() if err != nil { klog.Errorln(\u0026#34;Wrong in getting fileStat: \u0026#34;, err) time.Sleep(1 * time.Hour) } // Create a bucket at region \u0026#39;us-east-1\u0026#39; with object locking enabled. err = minioClient.MakeBucket(context.Background(), \u0026#34;mybucket2\u0026#34;, minio.MakeBucketOptions{Region: \u0026#34;cn-north-1\u0026#34;, ObjectLocking: false}) if err != nil { klog.Errorln(\u0026#34;Wrong in creating mybucket2: \u0026#34;, err) time.Sleep(1 * time.Hour) } uploadInfo, err := minioClient.PutObject(context.Background(), \u0026#34;mybucket2\u0026#34;, \u0026#34;test.txt\u0026#34;, file, fileStat.Size(), minio.PutObjectOptions{ContentType: \u0026#34;application/octet-stream\u0026#34;}) if err != nil { klog.Errorln(\u0026#34;Wrong in putting myobject to mybucket2: \u0026#34;, err) time.Sleep(1 * time.Hour) } klog.Infoln(\u0026#34;Successfully uploaded bytes: \u0026#34;, uploadInfo) } 2，Dockerfile\nFROM scratch ADD ./app / CMD [\u0026#34;/app\u0026#34;] 3，部署文件\npod1.yaml apiVersion: v1 stringData: id: AKIAIOSFODNN7EXAMPLE key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY endpoint: 10.20.9.60:30009 kind: Secret metadata: name: pod1-secret type: Opaque --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: pod1-get rules: - apiGroups: [\u0026#34;\u0026#34;] resources: [\u0026#34;secrets\u0026#34;] verbs: [\u0026#34;get\u0026#34;] --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: pod1-get-rbac subjects: - kind: ServiceAccount namespace: default name: pod1-sa roleRef: kind: ClusterRole name: pod1-get apiGroup: rbac.authorization.k8s.io --- apiVersion: v1 kind: ServiceAccount metadata: name: pod1-sa namespace: default --- apiVersion: v1 kind: Pod metadata: name: pod1 labels: k8s-app: pod1 spec: serviceAccountName: pod1-sa restartPolicy: Never containers: - name: pod1 image: beyond.io:5000/debug-test:0.1.1 imagePullPolicy: Always volumeMounts: - name: volume mountPath: /data readOnly: False volumes: - name: volume emptyDir: {} 实例三 1，test.sh\n#! /bin/sh echo \u0026#34;Hello ldsdsy\u0026#34; time=$(date +\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;) echo \u0026#34;Today is $ttime\u0026#34; 2，Dockerfile\nFROM busybox:1.28 RUN mkdir /app ADD ./test.sh /app RUN chmod +x /app/test.sh CMD [\u0026#34;sh\u0026#34;,\u0026#34;-c\u0026#34;,\u0026#34;/app/test.sh\u0026#34;] 3，pod3.yaml\napiVersion: v1 kind: Pod metadata: name: pod3 labels: k8s-app: pod3 spec: restartPolicy: Never containers: - name: pod3 image: beyond.io:5000/debug-test:0.1.3 imagePullPolicy: Always 实例五 1，test.sh\n#! /bin/sh DATA_DIR=${DATA_DIR} echo \u0026#34;DIR is $DATA_DIR\u0026#34; for file in $DATA_DIR/* do echo $file if [ -f $file ]; then cat $file fi done 2，pod5.yaml\napiVersion: v1 kind: Pod metadata: name: pod5 labels: k8s-app: pod5 spec: restartPolicy: Never containers: - name: pod5 image: beyond.io:5000/debug-test:0.1.5 imagePullPolicy: Always env: - name: DATA_DIR value: /data volumeMounts: - name: volume mountPath: /data readOnly: False volumes: - name: volume hostPath: path: /home/centos/data ","date":"2022-05-03T14:18:03+08:00","permalink":"https://ldsdsy.github.io/p/k8s_kubectl_debug/","title":"K8s_kubectl_debug"},{"content":"忆往昔（一） 这件糗事我已经是第二次回想起来了，还是逗乐了自己，那就在这里记录一下吧。\n考研的同学应该都知道汤老师吧，就是辅导考研数学的汤家凤老师，当初我备考的时候就听的是汤老师的课。当时汤老师的团队有在运营微信公众号，里面会时不时更新一些讲解试卷，知识总结之类的视频，我也就在公众号里看汤老师的课。不知道什么时候开始，视频的片头出现了黑底白字的警告，大意是说本人未在 b 站开通账号，请同学们注意之类的。我也没太在意，毕竟我也不在 b 站看汤老师。直到某一天，b 站的首页给我推荐了“考研汤家凤”，我心想，好家伙，这名儿取得这么明目张胆。于是我点了进去，这一看，头像是公众号里的，视频也是公众号里的，当时就给我气上头了，这人也太过分了，用着汤老师的劳动成果来谋取自己的利益，还披着汤老师的外衣让同学顶礼膜拜，无耻，真的无耻至极！当时我这正义感刷刷往上冒，要是我不站出来给汤老师正名，我还配当汤老师的学生吗？随即，我义正严辞地写下评论：“汤老师根本没在 b 站开通账号，你赶紧注销吧，汤老师已经在视频里维权了”。自豪感充斥着我整个胸腔，仿佛自己的身影都变得高大起来了。两三分钟后，有网友回复我了，网友一说：“这就是汤老师本人啊”，网友二说：“汤老师微博说开通 b 站了”，网友三也说：“这是真的汤老师，只是没去认证”。呵，还是个团伙作案，他居然还找托儿来证明自己，真是太太太无耻，气得我只想怼回去，但我想口说无凭，我要去公众号把视频的片头截屏出来，让这群家伙无地自容（气上头了，b 站也没法评论图片）。于是我找到最近的一期视频，打算截图，“本人已在 b 站授权\u0026hellip;\u0026hellip;”,哈，已在，不是未在吗！什么情况，是我看错了？惊讶，恐慌，羞愧，懊恼涌入我的脑海，即便四周无人，我也像被钉在耻辱柱上被千万人围观，脸红得说不出话来，我灰溜溜地回到评论区，不知如何是好。冷静了一会，也怕再多等一秒就会引来更多的网友来鞭笞我，组织好道歉语言，点击发送，删除评论，放下手机，唉～，还是太年轻冲动了些。\n","date":"2022-04-14T21:18:07+08:00","permalink":"https://ldsdsy.github.io/p/%E5%BF%86%E5%BE%80%E6%98%94_20220414/","title":"忆往昔_20220414"},{"content":"博物杂志_2022 由于 b 站无穷小亮的推荐，最近开始订阅博物杂志了，打算把一些有趣的点记录下来。\n1，马醉木 一种开小白花的低矮植株。马醉木的名字起源于日本，至于为什么叫这个名字，是传说马吃了其叶子都会轰然倒地宛如醉酒一般，而真实的原因是这种植物里面包含一种有毒物质，被食用后会有中毒迹象。\n2，鲨鱼🦈 小时候看动物世界，有看到鲨鱼生产的画面，当时就挺印象深刻，因为其他鱼都是产卵，而鲨鱼是像哺乳动物一样直接产下小鲨鱼，就挺不一样，也就一直认为鲨鱼是胎生。结果人家的生产方式妥妥的一排列组合：卵生，卵胎生，胎生。三种方式都存在，当然不是说，一种鲨鱼可以随便选择一种来繁衍，而是在鲨鱼这个大族群里，有的是卵生，有的是胎生。虎鲨目以及部分须鲨目，真鲨目鲨鱼是卵生；部分真鲨目是胎生；而大部分鲨鱼是卵胎生，小鲨鱼在出生前，可能会在子宫里自相残杀。\n3，竹 竹子 —— 草的最高境界，树的最佳替身。破土时笋的胖瘦就决定了竹的粗细（这就是三岁看八十？）。\n4，荔枝 前些日子网购了好几斤荔枝，收货时除了有几个压坏的总体还好，当时还感叹网购水果还是要买些带壳的不容易坏，可惜这鳞斑状铠甲欺骗了我。这副铠甲其实中看不中用，间隙很大，既防不住水份散失，在高温下还极容易褐变。一般售卖荔枝的摊贩都会在底部铺一层碎冰来延缓其较快的 “呼吸代谢”，所以荔枝并不适合网购（即便放在冰箱冷藏，第二天外壳也都褐变了）！\n另外，书里教了一招如何优雅地吃荔枝，观察荔枝可以看见一条浅浅的缝（缝合线），顺着缝一挤，果壳便会呈两半裂开，这样剥荔枝又快又好手还不疼，之前都是掰开根部再一点一点剥掉外壳，真是书看的太少，缺少理论知识。By the way, 荔枝虽好吃，但“日啖荔枝三百颗”的行为还是不可取，一个不小心给自己吃出急性低血糖就挺微妙：\nA：“你咋突然低血糖了，最近没好好吃饭吗？你得多吃点啊！”\nB：“不，我吃的太多了\u0026hellip;”\nA：“\u0026hellip;\u0026hellip;”\n","date":"2022-02-28T13:50:36+08:00","permalink":"https://ldsdsy.github.io/p/%E5%8D%9A%E7%89%A9%E6%9D%82%E5%BF%97_2022/","title":"博物杂志_2022"},{"content":"ClientSet —— in cluster out of cluster 是通过集群的配置文件让外部的应用可以操作集群内的资源对象， in cluster 本身是把程序作为一个 pod 运行在集群内部，通过 RBAC 来授权使其能够获取集群的资源对象。\n一，大致流程 编写好 go 程序，编译为二进制文件，打包成镜像并推送，然后开启 pod 运行镜像同时需要授予权限，使其有权获取资源信息。\n二，编写程序 1, mian.go\npackage main import ( \u0026#34;context\u0026#34; \u0026#34;fmt\u0026#34; metav1 \u0026#34;k8s.io/apimachinery/pkg/apis/meta/v1\u0026#34; \u0026#34;k8s.io/client-go/kubernetes\u0026#34; \u0026#34;k8s.io/client-go/rest\u0026#34; ) func main() { // creates the in-cluster config config, err := rest.InClusterConfig() if err != nil { panic(err.Error()) } // create the clientset clientset, err := kubernetes.NewForConfig(config) if err != nil { panic(err.Error()) } // get pod pods, err := clientset.CoreV1().Pods(\u0026#34;\u0026#34;).List(context.TODO(), metav1.ListOptions{}) if err != nil { panic(err.Error()) } for _, pod := range pods.Items { fmt.Printf(\u0026#34;pod.name:%v\\n\u0026#34;, pod.Name) } } 2, Dockerfile\n# 基础镜像 FROM debian # 把当前目录下编译得到的二进制 app 复制到工作目录 /app 下 COPY ./app /app # 执行工作目录里的 app ENTRYPOINT /app # 文件名一定是 Dockerfile ,不要任何后缀，也不要全小写 3, 编译二进制文件\n$ go build -o ./app . 4, 打包镜像\n$ docker build . -t app 5, 给镜像加 tag\ndocker tag **** bocloud-bj.io:5000/app:1.0 // **** 是镜像 ID 6, 推送镜像\ndocker push bocloud-bj.io:5000/app:1.0 三，开启 pod ，运行 image 1, 给 pod 授权 在 ClusterRole 里定义 pod 有哪些权利，再用 ClusterRoleBinding 去绑定 ClusterRole 和 service account，SA 会为 pod 里的进程提供必要的身份证明。\nClusterRole.yaml --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: pod-get rules: - apiGroups: [\u0026#34;\u0026#34;] resources: [\u0026#34;pods\u0026#34;] verbs: [\u0026#34;get\u0026#34;, \u0026#34;watch\u0026#34;, \u0026#34;list\u0026#34;] ClusterRoleBinding.yaml --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: pod-get-rbac subjects: - kind: ServiceAccount namespace: default name: clientset-sa roleRef: kind: ClusterRole name: pod-get apiGroup: rbac.authorization.k8s.io sa.yaml --- apiVersion: v1 kind: ServiceAccount metadata: name: clientset-sa namespace: default deploy.yaml --- apiVersion: apps/v1 kind: Deployment metadata: name: clientset-deploy spec: replicas: 1 selector: matchLabels: app: incluster template: metadata: labels: app: incluster spec: containers: - name: webhook image: bocloud-bj.io:5000/app:1.0 imagePullPolicy: Always serviceAccountName: clientset-sa 四，打印日志 $ kubectl logs **** // **** 是 pod_id [centos@ml-k8s-1 ~]$ kubectl logs clientset-deploy-854d7f648c-gcj4v pod.name:nfs-client-provisioner-6d9b86b854-pcb9v pod.name:webhook-deploy-854d7f648c-gcj4v pod.name:coredns-545d6fc579-2kn79 pod.name:coredns-545d6fc579-mpzqg pod.name:etcd-ml-k8s-1.novalocal pod.name:fabric-node-2gnjf pod.name:fabric-node-s92ds // Note: 因为节点是 Linux 系统，所以在编译二进制 app 时也要在 Linux 环境下。\n","date":"2021-07-17T09:54:41-05:00","permalink":"https://ldsdsy.github.io/p/k8s_clientset02/","title":"K8s_Clientset02"},{"content":"Clientset 访问 k8s 集群资源对象 Client-go 是一个调用 k8s 集群资源对象 API 的客户端，及通过 Client-go 实现对资源对象的增删改查（CRUD）.四类客户端：RestClient, ClientSet, DynamicClient, DiscoveryClient（此处只介绍 ClientSet 的用法）。\n一，Clientset —— out of cluster 通过 config 文件让集群外部的应用可以访问到集群内部的资源对象 。\n1, 配置 config 文件（把 master 上的配置文件复制到本地） // 在本地执行 $ scp -r centos@10.20.9.60:/home/centos/.kube /home/ldsdsy/ // 此时 ~ 目录下会多一个 .kube 文件夹，里面包含 config 文件 2, 编写代码 package main import ( \u0026#34;context\u0026#34; \u0026#34;flag\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;path/filepath\u0026#34; metav1 \u0026#34;k8s.io/apimachinery/pkg/apis/meta/v1\u0026#34; \u0026#34;k8s.io/client-go/kubernetes\u0026#34; \u0026#34;k8s.io/client-go/tools/clientcmd\u0026#34; \u0026#34;k8s.io/client-go/util/homedir\u0026#34; ) func main() { var kubeconfig *string // 默认会从 ~/.kube/config 路径下获取配置文件 if home := homedir.HomeDir(); home != \u0026#34;\u0026#34; { kubeconfig = flag.String(\u0026#34;kubeconfig\u0026#34;, filepath.Join(home, \u0026#34;.kube\u0026#34;, \u0026#34;config\u0026#34;), \u0026#34;(optional) absolute path to the kubeconfig file\u0026#34;) } else { kubeconfig = flag.String(\u0026#34;kubeconfig\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;absulute path to the kubeconfig file\u0026#34;) } // 把用户传递的命令行参数解析为对应变量的值 flag.Parse() // 使用 k8s.io/client-go/tools/clientcmd 生成 config 的对象 config, err := clientcmd.BuildConfigFromFlags(\u0026#34;\u0026#34;, *kubeconfig) if err != nil { panic(err.Error()) } // 使用 k8s.io/client-go/kubernetes 生成一个 ClientSet 的客户端 // 客户端生成后，就可以使用这个客户端与 k8s API server 进行交互了，进行 CRUD 操作。 clientset, err := kubernetes.NewForConfig(config) if err != nil { panic(err.Error()) } // get pod pods, err := clientset.CoreV1().Pods(\u0026#34;\u0026#34;).List(context.TODO(), metav1.ListOptions{}) if err != nil { panic(err.Error()) } for _, pod := range pods.Items { fmt.Printf(\u0026#34;pod.name:%v\\n\u0026#34;, pod.Name) } } 3, 运行 $ go run main.go pod.name:nfs-client-provisioner-6d9b86b854-pcb9v pod.name:coredns-545d6fc579-2kn79 pod.name:coredns-545d6fc579-mpzqg pod.name:etcd-ml-k8s-1.novalocal pod.name:fabric-node-2gnjf pod.name:fabric-node-s92ds ··· ","date":"2021-07-05T23:02:15+08:00","permalink":"https://ldsdsy.github.io/p/k8s_clientset01/","title":"K8s_Clientset01"},{"content":"限制存储消耗 本实验展示了如何在一个命名空间里限制存储的消耗。\n一，实验目的 1，希望通过限制单个命名空间的存储消耗来控制成本。\n2，限制的方面：\n单个命名空间里申请持久卷的数量(PVC 数量); 每个声明可以请求的存储量; 一个命名空间里积累的总存储消耗量。 二，实验内容 1, 使用 LimitRange 来限制对存储的请求。样例如下：\n创建 LimitRange 类型的 yaml 文件: apiVersion: v1 kind: LimitRange metadata: name: storagelimits spec: limits: - type: PersistentVolumeClaim max: storage: 2Gi min: storage: 1Mi // limits.type 为限制的对象 —— PVC // 此处的存储请求设置为 x (1Mi \u0026lt; x \u0026lt; 2Gi) 尝试创建申请内存 1Gi 的 PVC : [centos@ml-k8s-1 ~]$ touch pvc1.yaml [centos@ml-k8s-1 ~]$ vim pvc1.yaml apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc1 annotations: volume.beta.kubernetes.io/storage-class: \u0026#34;managed-nfs-storage\u0026#34; spec: accessModes: - ReadWriteMany resources: requests: storage: 1Gi [centos@ml-k8s-1 ~]$ kubectl apply -f pvc1.yaml persistentvolumeclaim/pvc1 created [centos@ml-k8s-1 ~]$ kubectl get pvc NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE pvc1 Bound pvc-a0f522d8-5977-4c72-83bb-d57df46ffec5 1Gi RWX managed-nfs-storage 14s // 因为申请的内存在合理范围，创建成功 尝试创建申请内存 2.2Gi 的 PVC : [centos@ml-k8s-1 ~]$ vim pvc2.yaml apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc2 annotations: volume.beta.kubernetes.io/storage-class: \u0026#34;managed-nfs-storage\u0026#34; spec: accessModes: - ReadWriteMany resources: requests: storage: 2.2Gi [centos@ml-k8s-1 ~]$ kubectl apply -f pvc2.yaml Error from server (Forbidden): error when creating \u0026#34;pvc2.yaml\u0026#34;: persistentvolumeclaims \u0026#34;pvc2\u0026#34; is forbidden: maximum storage usage per PersistentVolumeClaim is 2Gi, but request is 2362232012800m // 因为申请的内存超出范围，创建失败 2, 使用 StorageQuota 限制 PVC 数目和累计存储容量 。样例如下：\n创建 StorageQuota 类型的 yaml 文件: apiVersion: v1 kind: ResourceQuota metadata: name: storagequota spec: hard: persistentvolumeclaims: \u0026#34;2\u0026#34; requests.storage: \u0026#34;2Gi\u0026#34; // 此处规定了 PVC 的数量不能超过 2 个，且所有 PVC 申请的总内存量不能超过 2Gi 尝试创建申请内存 2Gi 的 PVC : [centos@ml-k8s-1 ~]$ vim pvc2.yaml apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc2 annotations: volume.beta.kubernetes.io/storage-class: \u0026#34;managed-nfs-storage\u0026#34; spec: accessModes: - ReadWriteMany resources: requests: storage: 2Gi [centos@ml-k8s-1 ~]$ kubectl apply -f pvc2.yaml Error from server (Forbidden): error when creating \u0026#34;pvc2.yaml\u0026#34;: persistentvolumeclaims \u0026#34;pvc2\u0026#34; is forbidden: exceeded quota: storagequota, requested: persistentvolumeclaims=1,requests.storage=2Gi, used: persistentvolumeclaims=2,requests.storage=1025Mi, limited: persistentvolumeclaims=2,requests.storage=2Gi // 以为已经存在的 pvc1 申请了 1Gi 的存储，pvc2 再申请 2Gi 就会超过规定的总存储量 2Gi，所有执行失败 尝试创建两个均申请内存 1Mi 的 PVC2 和 PVC3 : apiVersion: v1 kind: PersistentVolumeClaim metadata: name: pvc2 annotations: volume.beta.kubernetes.io/storage-class: \u0026#34;managed-nfs-storage\u0026#34; spec: accessModes: - ReadWriteMany resources: requests: storage: 1Mi [centos@ml-k8s-1 ~]$ kubectl apply -f pvc2.yaml persistentvolumeclaim/pvc2 created [centos@ml-k8s-1 ~]$ kubectl get pvc NAME STATUS VOLUME CAPACITY ACCESS MODES STORAGECLASS AGE pvc1 Bound pvc-a0f522d8-5977-4c72-83bb-d57df46ffec5 1Gi RWX managed-nfs-storage 2d16h pvc2 Bound pvc-796555a7-5826-4ce1-9a2c-493cd83e4a0f 1Mi RWX managed-nfs-storage 12s // pvc2 在合理范围，创建成功，再创建一个 pvc3 如下： [centos@ml-k8s-1 ~]$ kubectl apply -f pvc3.yaml Error from server (Forbidden): error when creating \u0026#34;pvc3.yaml\u0026#34;: persistentvolumeclaims \u0026#34;pvc3\u0026#34; is forbidden: exceeded quota: storagequota, requested: persistentvolumeclaims=1, used: persistentvolumeclaims=2, limited: persistentvolumeclaims=2 // 因为已存在两个 pvc ，所以 pvc3 的创建不会成功 总结 LimitRange 和 StorageQuota 的效果是相互叠加的，只要不符合其中一条规则就无法成功创建 pvc 。 若重新修改 LimitRange.yaml 文件，不影响已存在的但不符合新限制的 pvc 。 若无特意标明，以上操作均在 default 命名空间里。 ","date":"2021-05-17T09:21:51-05:00","permalink":"https://ldsdsy.github.io/p/k8s_%E5%AD%98%E5%82%A8%E9%99%90%E5%88%B6/","title":"K8s_存储限制"},{"content":"静态加密 Secret 数据 因为 secret 默认存储为 base64 编码的非加密字符串，所以启用静态加密来增加安全性。\n1 创建配置文件 encrypt.conf 配置文件样例如下: apiVersion: apiserver.config.k8s.io/v1 kind: EncryptionConfiguration resources: - resources: - secrets providers: - aescbc: keys: - name: key1 secret: \u0026lt;BASE 64 ENCODED SECRET\u0026gt; - identity: {} // resources.resources 里的内容就是要加密的对象，此处为 secrets; // providers 里是加解密的实际提供者 —— identity, aescbc, secretbox, aesgcm, kms. 综合对比，aescec 最合适。 // 加密时会使用 providers 里的第一个来加密，解密时会从头到尾尝试直至成功解密。 // identity 就是明文，其余都为加密算法。 // 此处的配置文件最后是 identity，是为了服务在此之前已经存储了的明文 secrets 。 需生成随机密钥放入 secret 字段中，直接进行如下操作： [centos@ml-k8s-1 ~]$ head -c 32 /dev/urandom | base64 7unrE0P6q9DmlqGVeZ+k02d2eNaAgveFC01V+gV3VYc= // 生成了一个 32 字节的随机密钥并进行了 base64 编码 配置文件命名为 encrypt.conf , 并存放在 /etc/kubernetes/pki/ [centos@ml-k8s-1 ~]$ cd /etc/kubernetes/pki/ [centos@ml-k8s-1 pki]$ ls apiserver-etcd-client.crt apiserver-kubelet-client.crt apiserver.crt ca.crt encrypt.conf front-proxy-ca.crt front-proxy-client.crt sa.key apiserver-etcd-client.key apiserver-kubelet-client.key apiserver.key ca.key etcd front-proxy-ca.key front-proxy-client.key sa.pub 2 设置 kube-apiserver 增加 \u0026ndash;encryption-provider-config ，指向 encrypt.conf [centos@ml-k8s-1 ~]$ cd /etc/kubernetes/manifests [centos@ml-k8s-1 manifests]$ ls etcd.yaml kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml [centos@ml-k8s-1 manifests]$ sudo vim kube-apiserver.yaml apiVersion: v1 kind: Pod metadata: annotations: kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 10.20.9.60:6443 creationTimestamp: null labels: component: kube-apiserver tier: control-plane name: kube-apiserver namespace: kube-system spec: containers: - command: - kube-apiserver - --advertise-address=10.20.9.60 - --allow-privileged=true - --authorization-mode=Node,RBAC - --client-ca-file=/etc/kubernetes/pki/ca.crt - --enable-admission-plugins=NodeRestriction - --enable-bootstrap-token-auth=true - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key - --etcd-servers=https://127.0.0.1:2379 - --insecure-port=0 - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key - --requestheader-allowed-names=front-proxy-client - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt - --requestheader-extra-headers-prefix=X-Remote-Extra- - --requestheader-group-headers=X-Remote-Group - --requestheader-username-headers=X-Remote-User - --secure-port=6443 - --service-account-issuer=https://kubernetes.default.svc.cluster.local - --service-account-key-file=/etc/kubernetes/pki/sa.pub - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key - --service-cluster-ip-range=10.96.0.0/12 - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key - --encryption-provider-config=/etc/kubernetes/pki/encrypt.conf // 若使用 kubeadm 搭建的集群，此时会自动重启 API server , 否则需要手动重启。 3 验证数据已被加密 重新启动 kube-apiserver 后，任何新创建或更新的 secret 在存储时都应该被加密\n在 default 命名空间里创建一个名为 secret1 的 secret ： [centos@ml-k8s-1 ~]$ kubectl create secret generic secret1 -n default --from-literal=mykey=mydata secret/secret1 created [centos@ml-k8s-1 ~]$ kubectl get secret NAME TYPE DATA AGE default-token-44r9r kubernetes.io/service-account-token 3 18h secret1 Opaque 1 23s 使用 etcdctl 命令行，从 etcd 中读取 secret ： [centos@ml-k8s-1 etcd]$ sudo ETCDCTL_API=3 ./etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/apiserver-etcd-client.crt --key=/etc/kubernetes/pki/apiserver-etcd-client.key get /registry/secrets/default/secret1 | hexdump -C 00000000 2f 72 65 67 69 73 74 72 79 2f 73 65 63 72 65 74 |/registry/secret| 00000010 73 2f 64 65 66 61 75 6c 74 2f 73 65 63 72 65 74 |s/default/secret| 00000020 31 0a 6b 38 73 3a 65 6e 63 3a 61 65 73 63 62 63 |1.k8s:enc:aescbc| 00000030 3a 76 31 3a 6b 65 79 31 3a cb d8 67 c6 67 21 07 |:v1:key1:..g.g!.| 00000040 e6 e7 f8 97 01 4a 76 24 2c bb 23 3f 9c 6f 4c 10 |.....Jv$,.#?.oL.| 00000050 44 ce a9 d9 a4 db 1d b3 76 6c d2 a2 dc 41 7e 55 |D.......vl...A~U| 00000060 b2 da fc c0 6d fb 0b 79 0c 3e 87 70 6e 5b 31 5d |....m..y.\u0026gt;.pn[1]| 00000070 f7 8d 7f de f8 ec 4d 2d ec eb c5 a2 3a 80 95 4f |......M-....:..O| 00000080 b0 de 3b e1 83 f4 76 32 f5 d4 19 d2 96 6a 46 df |..;...v2.....jF.| 00000090 03 ca d4 e1 3d 9d 48 6e 81 61 ec 18 04 b2 73 d2 |....=.Hn.a....s.| 000000a0 cd f8 1b e5 bd 2f cc 0e 68 b5 24 d7 7a 44 d2 8e |...../..h.$.zD..| 000000b0 6c 2c fb 3a 43 e8 7c 37 c8 bd e6 06 dd 29 04 0d |l,.:C.|7.....)..| 000000c0 aa 71 c1 75 8d 3d de 39 d4 15 26 c5 e9 af a9 c4 |.q.u.=.9..\u0026amp;.....| 000000d0 2d c6 4d 1a 36 7c 4d ec 10 50 20 69 dc 28 49 d2 |-.M.6|M..P i.(I.| 000000e0 af e4 10 44 f2 9e ad 98 b9 f8 43 d3 74 4f 1a 05 |...D......C.tO..| 000000f0 13 d0 72 cf f4 60 12 26 af 47 ee a7 de 1d 9f e2 |..r..`.\u0026amp;.G......| 00000100 41 ba 33 2c 45 3c 98 f9 0c d8 3d 3f 90 bd 06 be |A.3,E\u0026lt;....=?....| 00000110 64 9a f4 d9 48 94 93 21 f1 ed 54 e7 be 59 31 d8 |d...H..!..T..Y1.| 00000120 1b 40 e0 9b 51 14 6b 9a 96 ed 7a 42 95 20 b6 b5 |.@..Q.k...zB. ..| 00000130 5b 02 99 8d 3a 66 c1 1d 19 0a |[...:f....| 0000013a // cacert, cert, key 是用来连接 etcd 服务的证书 // hexdump 命令一般用来查看“二进制”文件的十六进制编码 // 数据头部出现 k8s:enc:aescbc:v1: ,说明数据已经被正确加密，且使用的是 aescbc 算法，密钥为 key1 验证 secret 是否被正确解密： [centos@ml-k8s-1 etcd]$ kubectl get secrets secret1 -o yaml apiVersion: v1 data: mykey: bXlkYXRh kind: Secret metadata: creationTimestamp: \u0026#34;2021-05-06T03:09:25Z\u0026#34; name: secret1 namespace: default resourceVersion: \u0026#34;89523\u0026#34; uid: dc8e6c8d-fb3c-47b3-b2bb-ed5014fb3779 type: Opaque // mykey: bXlkYXRh ,数据已被加密 // 加密插件只是加密了 etcd 中保存的数据,执行这类 kubectl get secrets mysecret -o yaml 命令时，kube-apiserver 在从 etcd 中取出数据的时候已经自动解密了 // 此时用 decode 即可得到数据 [centos@ml-k8s-1 etcd]$ echo -n \u0026#34;bXlkYXRh\u0026#34; | base64 --decode mydata 4 确保所有 secret 都被加密 读取所有 Secret，然后通过更新来实现全部加密 [centos@ml-k8s-1 etcd]$ kubectl get secrets --all-namespaces -o json | kubectl replace -f - secret/default-token-44r9r replaced secret/secret1 replaced secret/default-token-d49sg replaced secret/default-token-dhpj7 replaced secret/attachdetach-controller-token-xfvx9 replaced secret/bootstrap-signer-token-4z576 replaced secret/bootstrap-token-rliyei replaced secret/certificate-controller-token-6g4hj replaced secret/clusterrole-aggregation-controller-token-vzn58 replaced secret/coredns-token-bkmbn replaced secret/cronjob-controller-token-x45gt replaced secret/daemon-set-controller-token-skxtk replaced secret/default-token-plx8s replaced secret/deployment-controller-token-77g4q replaced secret/disruption-controller-token-mw4lq replaced secret/endpoint-controller-token-b5dqn replaced secret/endpointslice-controller-token-26rcq replaced secret/endpointslicemirroring-controller-token-zgjgs replaced secret/ephemeral-volume-controller-token-f9njw replaced secret/expand-controller-token-2k6v2 replaced secret/fabric-etcd-secrets replaced secret/fabric-node-serviceaccount-token-7b6hj replaced secret/generic-garbage-collector-token-48bvm replaced secret/horizontal-pod-autoscaler-token-ls2v4 replaced secret/job-controller-token-nl87g replaced secret/kube-proxy-token-xp7gj replaced secret/namespace-controller-token-wdrs5 replaced secret/node-controller-token-9gs5c replaced secret/persistent-volume-binder-token-qnclk replaced secret/pod-garbage-collector-token-c2k7v replaced secret/pv-protection-controller-token-slkm5 replaced secret/pvc-protection-controller-token-wnxbw replaced secret/replicaset-controller-token-4pkz4 replaced secret/replication-controller-token-vw268 replaced secret/resourcequota-controller-token-8g9ql replaced secret/root-ca-cert-publisher-token-fkzln replaced secret/service-account-controller-token-9686g replaced secret/service-controller-token-wc49g replaced secret/statefulset-controller-token-jxcp8 replaced secret/token-cleaner-token-rp76n replaced secret/ttl-after-finished-controller-token-9rgmc replaced secret/ttl-controller-token-59wtj replaced secret/webhook-server-cert replaced [centos@ml-k8s-1 etcd]$ secret/attachdetach-controller-token-xfvx9 replaced secret/bootstrap-signer-token-4z576 replaced secret/bootstrap-token-rliyei replaced secret/certificate-controller-token-6g4hj replaced secret/clusterrole-aggregation-controller-token-vzn58 replaced secret/coredns-token-bkmbn replaced secret/cronjob-controller-token-x45gt replaced secret/daemon-set-controller-token-skxtk replaced secret/default-token-plx8s replaced secret/deployment-controller-token-77g4q replaced secret/disruption-controller-token-mw4lq replaced secret/endpoint-controller-token-b5dqn replaced secret/endpointslice-controller-token-26rcq replaced secret/endpointslicemirroring-controller-token-zgjgs replaced secret/ephemeral-volume-controller-token-f9njw replaced secret/expand-controller-token-2k6v2 replaced secret/fabric-etcd-secrets replaced secret/fabric-node-serviceaccount-token-7b6hj replaced secret/generic-garbage-collector-token-48bvm replaced secret/horizontal-pod-autoscaler-token-ls2v4 replaced secret/job-controller-token-nl87g replaced secret/kube-proxy-token-xp7gj replaced secret/namespace-controller-token-wdrs5 replaced secret/node-controller-token-9gs5c replaced secret/persistent-volume-binder-token-qnclk replaced secret/pod-garbage-collector-token-c2k7v replaced secret/pv-protection-controller-token-slkm5 replaced secret/pvc-protection-controller-token-wnxbw replaced secret/replicaset-controller-token-4pkz4 replaced secret/replication-controller-token-vw268 replaced secret/resourcequota-controller-token-8g9ql replaced secret/root-ca-cert-publisher-token-fkzln replaced secret/service-account-controller-token-9686g replaced secret/service-controller-token-wc49g replaced secret/statefulset-controller-token-jxcp8 replaced secret/token-cleaner-token-rp76n replaced secret/ttl-after-finished-controller-token-9rgmc replaced secret/ttl-controller-token-59wtj replaced secret/webhook-server-cert replaced 5 解密所有 secrets 修改配置文件 encrypt.conf ，把 provider 里的 identity 修改为第一项 [centos@ml-k8s-1 pki]$ sudo vim encrypt.conf apiVersion: apiserver.config.k8s.io/v1 kind: EncryptionConfiguration resources: - resources: - secrets providers: - identity: {} - aescbc: keys: - name: key1 secret: 7unrE0P6q9DmlqGVeZ+k02d2eNaAgveFC01V+gV3VYc= 再通过更新来解密 [centos@ml-k8s-1 pki]$ kubectl get secrets --all-namespaces -o json | kubectl replace -f - secret/default-token-44r9r replaced secret/secret1 replaced secret/default-token-d49sg replaced secret/default-token-dhpj7 replaced secret/attachdetach-controller-token-xfvx9 replaced secret/bootstrap-signer-token-4z576 replaced secret/bootstrap-token-rliyei replaced secret/certificate-controller-token-6g4hj replaced secret/clusterrole-aggregation-controller-token-vzn58 replaced secret/coredns-token-bkmbn replaced secret/cronjob-controller-token-x45gt replaced secret/daemon-set-controller-token-skxtk replaced secret/default-token-plx8s replaced secret/deployment-controller-token-77g4q replaced secret/disruption-controller-token-mw4lq replaced secret/endpoint-controller-token-b5dqn replaced secret/endpointslice-controller-token-26rcq replaced secret/endpointslicemirroring-controller-token-zgjgs replaced secret/ephemeral-volume-controller-token-f9njw replaced secret/expand-controller-token-2k6v2 replaced secret/fabric-etcd-secrets replaced secret/fabric-node-serviceaccount-token-7b6hj replaced secret/generic-garbage-collector-token-48bvm replaced secret/horizontal-pod-autoscaler-token-ls2v4 replaced secret/job-controller-token-nl87g replaced secret/kube-proxy-token-xp7gj replaced secret/namespace-controller-token-wdrs5 replaced secret/node-controller-token-9gs5c replaced secret/persistent-volume-binder-token-qnclk replaced secret/pod-garbage-collector-token-c2k7v replaced secret/pv-protection-controller-token-slkm5 replaced secret/pvc-protection-controller-token-wnxbw replaced secret/replicaset-controller-token-4pkz4 replaced secret/replication-controller-token-vw268 replaced secret/resourcequota-controller-token-8g9ql replaced secret/root-ca-cert-publisher-token-fkzln replaced secret/service-account-controller-token-9686g replaced secret/service-controller-token-wc49g replaced secret/statefulset-controller-token-jxcp8 replaced secret/token-cleaner-token-rp76n replaced secret/ttl-after-finished-controller-token-9rgmc replaced secret/ttl-controller-token-59wtj replaced secret/webhook-server-cert replaced ","date":"2021-05-06T21:41:20+08:00","permalink":"https://ldsdsy.github.io/p/k8s_%E9%9D%99%E6%80%81%E5%8A%A0%E5%AF%86/","title":"K8s_静态加密"},{"content":"Docker 学习笔记 Docker 一种生成容器的工具。 一，镜像 Docker 镜像是一种特殊的文件系统，是一个静态概念，是容器的底层。\n1，获取镜像： $ docker pull *** 2，显示镜像： $ docker image ls // 显示顶层镜像 $ docker image ls -a // 显示中间层镜像 $ docker image ls ** // 显示镜像 ** $ docker image ls -f since=** // 显示 ** 之后建立的镜像 $ docker image ls -f before=** // 显示 ** 之前的建立的镜像 $ docker image ls -f dangling=true // 显示虚悬镜像 $ docker image prune // 删除虚悬镜像 // 在发布镜像新版本时，旧镜像名转移到新镜像上，从而旧镜像出现仓库名，标签均为 \u0026lt;none\u0026gt; 情况，成为虚悬镜像。 $ docker image ls -q // 只显示镜像 ID $ docker image ls --format \u0026#34;{{.ID}}:{{.Repository}\u0026#34; // 按照 ID:仓库名 的格式显示 $ docker image ls --format \u0026#34;table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}\u0026#34; // 按照 ID 仓库名 标签 的表格形式显示 3，删除镜像 $ docker image rm ** // ** 可以是 ID，镜像名，摘要 $ docker image rm $(docker image ls -q redis) // 删除所有仓库名为 redis 的镜像 4，定制镜像（Dockerfile） Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。 二，容器 容器是独立运行的一个或一组应用，以及它们的运行态环境,是一个动态概念。\n1，启动容器： 1) 基于镜像新建容器并启动： $ docker run -t -i ubuntu /bin/bash // -t 选项让 Docker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开 2) 启动已终止的容器： $ docker container start [id] // 重启容器 2，运行容器： -d：让容器在后台运行，而不是在当前宿主机下输出结果。例如： $ docker run -d ubuntu /bin/sh -c \u0026#34;echo hello world;\u0026#34; // 此时会返回一个唯一的 id，可借助 id 查看输出信息 $ docker logs [id] 3，终止容器： $ docker container ls // 显示运行中的容器 $ docker container ls -a // 显示所有容器 $ docker container stop [id] // 终止容器 $ docker container restart [id] // 重启容器 4，进入容器： 1) attach: $ docker attach [id] // exit 会导致容器停止 2) exec: $ docker exec -it [id] bash // -i:交互式 ，-t:终端 // exit 不会导致容器停止 5，删除容器： $ docker container rm [id] // 删除终止态的容器 $ docker container rm -f [id] // 删除运行中的容器 $ docker container prune // 删除所有终止态的容器 三，仓库 集中存放镜像的地方\n","date":"2021-04-21T16:55:52+08:00","permalink":"https://ldsdsy.github.io/p/docker/","title":"Docker"},{"content":"1.字符串由“碎片”组成，每个碎片为单一字母组成，如：“aaabbccaddd” 由碎片 \u0026ldquo;aaa\u0026rdquo;,\u0026ldquo;bb\u0026rdquo;,\u0026ldquo;cc\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;ddd\u0026rdquo; 组成。\n输入：一个字符串\n输出：按字典输出碎片，每个碎片一行，相同的碎片只输出一次\nC++\n#include\u0026lt;bits/stdc++.h\u0026gt; using namespace std; int main() { vector\u0026lt;string\u0026gt; v; string s,t; int i; cin\u0026gt;\u0026gt;s; t=s[0]; for(i=1;i\u0026lt;s.size();i++) { if(s[i]==s[i-1]) { t+=s[i]; } else { v.push_back(t); t=s[i]; } } v.push_back(t); sort(v.begin(),v.end()); cout\u0026lt;\u0026lt;v[0]\u0026lt;\u0026lt;endl; for(i=1;i\u0026lt;v.size();) { if(v[i]==v[i-1]) { i++;\t} else { cout\u0026lt;\u0026lt;v[i]\u0026lt;\u0026lt;endl; i++; }\t} return 0; } 2.求哈夫曼树的最短带权路径长度。\n输入：第一行为权值个数 n ，第二行是 n 个权值\n输出：最短带权路径长度\nC++\n#include\u0026lt;bits/stdc++.h\u0026gt; using namespace std; int main() { vector\u0026lt;int\u0026gt; v; int n,t,sum=0; cin\u0026gt;\u0026gt;n; while(n--) { cin\u0026gt;\u0026gt;t; v.push_back(t); } while(v.size()!=1) { sort(v.begin(),v.end()); t=v[0]+v[1]; sum+=t; v.erase(v.begin(),v.begin()+2); v.push_back(t); } cout\u0026lt;\u0026lt;sum\u0026lt;\u0026lt;endl; return 0; } ","date":"2021-03-20T12:16:20+08:00","permalink":"https://ldsdsy.github.io/p/exam2019/","title":"Exam2019"},{"content":"应用层 1 网络应用模型 1. 客户/服务器模型（C/S）： 有一个总是打开的主机称为服务器，它服务于许多来自其他称为客户机的主机请求。 2. P2P 模型： 每台机器既是服务器又是客户机。 2 域名系统（DNS） 用于把主机名转换为 IP 地址；采用客户/服务器模型，其协议运行在 UDP 之上，使用 53 号端口。 从概念上分为是三部分：层次域名空间，域名服务器，解析器。 1. 域名服务器分类： 1）根域名服务器：知道所有顶级域名服务器的 IP 地址； 2）顶级域名服务器：负责管理在其服务器注册的所有二级域名； 3）授权域名服务器：能够将其管理的主机名转换为该主机的 IP 地址； 4）本地域名服务器：本地网络提供商负责的域名服务器。 2. 查询方式： 1）递归查询： 主机 \u0026lt;——\u0026gt; 本地域名服务器 \u0026lt;——\u0026gt; 根域名服务器 \u0026lt;——\u0026gt; 顶级域名服务器 \u0026lt;——\u0026gt; 权限域名服务器 2）递归与迭代相结合： 主机自身一次询问以上四种服务器。 3 文件传输协议（FTP） FTP 采用 C/S 工作方式，使用 TCP 可靠传输； 其服务器分为：一个主进程负责接受新的请求，若干从属进程负责处理单个请求。 1. 控制连接： 服务器监听 21 号端口，等待客户连接，此连接为控制连接，传输控制信息（7 位 ASCII 格式），此连接在整个会话过程保持打开。 2. 数据连接： 此连接用来连接客户端和服务器端的数据传送进程，传送完毕则关闭连接并结束运行。 4 电子邮件 一个邮件系统包含：用户代理，邮件服务器，协议。 1. 过程：发送方使用 SMTP 协议发邮件到发送方邮件服务器，此服务器再用 SMTP 发送到接收方的邮件服务器，接收方用 POP3 读取邮件到本地。 2. STMP : 用于往外发邮件，运行在 TCP 上，使用 25 号端口。 3. POP3 : 用于接受邮件，运行在 TCP 上，使用 110 号端口。 5 万维网 万维网是一个资料空间，每一样资料都有“统一资源定位符”来标识，通过 HTTP 传输。 1. HTTP : 运行在 TCP 上，使用 80 端口； 无状态，同一客户第二次访问仍和第一次访问时页面一样； 有非持久连接，也有持节连接； ","date":"2021-03-08T12:50:23+08:00","permalink":"https://ldsdsy.github.io/p/network_six/","title":"Network_six"},{"content":"传输层 传输层为运行在不同主机上的进程提供逻辑通信\n1 提供的服务 1. 功能： 1）提供应用进程之间的逻辑通信（端到端的通信）。 2）复用和分用 复用：不同的进程使用同一个传输协议传送数据； 分用：接收方能把一同到来的数据正确交付到各自的目的进程。 3）差错检错：包括首部和数据部分（网络层只检测 IP 数据报的首部）。 4）提供两种协议：面向连接的 TCP 和无连接的 UDP(网络层只能提供其中一种)。 2. 寻址和端口： 1）端口：是传输层的服务访问点，类似网络层的 IP 地址（端口标识应用进程）。 2）端口号 长度 16bit，能表示 65536 个端口号； 服务器使用的端口号： 一类是熟知端口号（0~1023），这些端口号是分配给 TCP/IP 最重要的一些应用进程； 一类是登记端口号（1024~49151），这些端口号必须在 IANA 登记，以防重复。 客户端使用的端口号：49152~65535，仅在客户进程运行时才动态选择。 3）套接字：就是一个通信端点，即 ：主机 IP 地址 + 端口号，唯一标识了一台主机上的一个应用（进程）。 3. 无连接服务和面向连接服务： 1）面向连接服务：通信前先建立连接，通信中整个连接情况一直被实时监控管理，通信结束后再释放连接。 2）无连接服务：不需要提前建立连接，直接将信息发送到出去，尽力送达。 3）TCP: 面向连接的传输控制协议； 提供一条全双工的可靠逻辑信道； 不提供组播和广播； 适用于可靠性高的场合（FTP,HTTP,TELNET）. 4) DUP: 无连接的用户数据报协议； 在 IP 之上仅提供：多路复用和对数据的检查。 速度较快，实时性较好，适用于小文件传输协议（DNS,SNMP）. 2 UDP 协议 1. UDP 数据报： 1）无需建立连接，因此不会引入建立连接的时延； 2）无连接状态，因此也免除了去维护连接的麻烦； 3）分组首部开销小，才 8B,而 TCP 首部是 20B； 4）常用于一次性传输较少数据的网络应用或是多媒体应用； 5）尽力交付不代表不可靠，可靠性工作在应用层完成； 6）报文是 UDP 数据报最小处理单位。 2. UDP 首部格式： 首部 8B，有 4 个字段，每个字段 2B。 1）源端口：源端口号，需要对方回信时选用，不需要是全 0； 2）目的端口：目的端口号，在终点交付报文时必须用到； 3）长度：UDP 数据报长度（首部+数据），最小为 8（仅有首部）； 4）校验和：检验整个 UDP 数据报是否有误，错则丢弃，不想校验时，全置 0. 5）接收方发现端口号错误时，丢弃该报文，并由 ICMP 返回“端口不可达”差错报文。 3. UDP 检验： 引入 12B 的伪首部来计算校验和，检错能力不强，但简单，快捷。 1）校验方法：二进制反码运算求和再取反。 2）过程： 发送方：全 0 填入校验和字段并添加伪首部； 把 UDP 数据报视为多个 16 比特的字段，若非偶数个字节还要在末尾添加一个全 0 字节； 二进制反码求和，并把和写入校验和字段。 接收方：收到的数据报加上伪首部二进制反码计算和； 若不是偶数个字节仍要补 0； 结果全为 1 表示无差错，否则有错丢弃。 3 TCP 协议 1. 特点： TCP 是在不可靠的 IP 层上实现的可靠传输协议，主要解决可靠，有序，无丢失，不重复的问题。 1）是面向连接的； 2）每条 TCP 连接只有两个端点（点对点）； 3）全双工通信，两端都有发送缓存和接收缓存； 4）面向字节流，TCP 把应用程序交付的数据视为一连串无结构的字节流。 2. TCP 报文段： 1）首部前 20B 是固定的，后面的 4N 字节是可选项； 2）TCP 数据报既可运载数据，又可建立连接，释放连接和应答； 3）序号字段：其值表示本报文段所发的数据的第一个字节的序号； 4）确认号字段：是期望收到对方的下一个报文段数据的第一个字节号； 5）数据偏移：即首部长度； 6）紧急位 URG：1 表示紧急指针字段有效，第一个字节到紧急指针所指字节就是紧急数据； 7）确认位 ACK：1 确认号有效，0 无效； 8）推送位 PSH：为 1 时，应尽快交付给接受进程，而不等整个缓存存满再提交； 9）复位位 RST：为 1 时表明出现严重错误，必须释放连接再重新建立连接； 10）同步位 SYN：为 1 表示这是一个连接请求（ACK=0）或连接接受报文； 11）终止位 FIN：用来释放连接，为 1 表示此发送方发送完毕，要求释放连接； 12）窗口字段：指出现在允许对方发送的数据量，单位字节； 3. TCP 连接管理： 1）TCP 连接的建立：采用客户/服务器方式，发起者为客户机。 过程：三次握手 ①客户机发起一个连接请求报文段，SYN=1,ACK=0,seq=x(随机选择)，不携带数据但消耗一个序号。 ②服务器若同意建立连接则发回确认（SYN=1,ACK=1,seq=y，ack=x+1），并分配 TCP 缓存和变量。 ③客户机再向服务器给出确认，并分配缓存和变量，SYN=0,ACK=1,seq=x+1，ack=y+1。 // 前两步都不含应用层数据但消耗一个序号，第三步可携带数据，不带就不消耗序号。 // 服务器端在第二次握手分配资源，客户机在第三次分配，所以使得服务器易受到 SYN 洪泛攻击。 2）TCP 连接的释放：任何一方都能终止该连接。 过程：4 次握手 ①客户机想关闭连接，则发送一个连接释放报文段，并停止发送数据，主动关闭连接，FIN=1. ②服务器收到后回复确认，此时处于半关闭状态，服务器若想发数据可以发且客户机会接受。 ③服务器也发送完毕，则发送连接释放报文段，FIN=1. ④客户机接收后必须发出确认，再等 2MSL 后才进入连接关闭状态。 4. TCP 可靠传输： 1）序号：TCP 首部的序号字段用来保证数据有序提交给应用层（每个字节都编上一个号）。 2）确认：发送方缓存区会存储已经发送但未收到确认的报文段，以便重传（使用累计确认）。 3）重传：超时和冗余 ACK 的情况都会重传。 冗余 ACK： 接收方收到乱序到来的 n 个报文段就会发送 n 个冗余 ACK； 当发送方收到三个冗余 ACK 就会判断某个报文段缺失并重传这个报文段。 5. TCP 流量控制： 用来消除发送方使接收方缓存区溢出的可能性。 1）接收窗口：接收方根据自己接受缓存的大小，动态调节发送方的发送窗口大小。 2）拥塞窗口：发送方根据对当前网络拥塞程序的估计而确定的窗口值。 3）发送方的窗口大小取以上二者的较小值。 // 传输层定义的端到端的流量控制，链路层定义的是两个结点间的。 // 链路层的滑动窗口协议的窗口不能动态变化，但传输层的可以。 6. TCP 拥塞控制： 拥塞控制是一个全局性的过程，指防止过多数据注入网络。 1）慢开始和拥塞控制： ①慢开始：每经历一个传输轮次（一个 RTT），拥塞窗口就指数式增倍，一直增加到门限（阈值），再改用拥塞避免算法。 ②拥塞窗口不再指数型增大，而是每次加 1，直到出现一次超时就把设置新门限为前一个门限的一半。 2）快重传和快恢复： ①快重传技术使用了冗余 ACK 来检测丢失，较快的重传数据。’ ②快恢复：发送方收到三个冗余 ACK 时，新门限减半，在新门限值处开始加 1 增大。 ","date":"2021-03-04T22:05:08+08:00","permalink":"https://ldsdsy.github.io/p/network_five/","title":"Network_five"},{"content":"网络层 主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。网络层传输单位为数据报（数据报划分为了分组）.\n1 功能 1. 异构网互联 2. 路由和转发：路由选择，分组转发 3. 拥塞控制：开环控制（静态），闭环控制（动态） 2 路由算法 1. 静态路由（非自适应路由算法）： 1）管理员手动配置路由信息； 2）优点是简便，可靠，适用于负荷稳定，拓扑变化不大的网络。 2. 动态路由（自适应路由算法）： 1）路由表项通过相互连接的路由器之间彼此交换信息； 2）能改善网络性能并有助于流量控制； 3）分类：距离-向量路由算法（RIP），链路状态路由算法(OSPF)。 3.层次路由 因特网将整个互联网划分为许多较小的自治系统（其中包含很多局域网） 1）自治系统内使用的路由选择协议称为内部网关协议（IGP），也称域内路由选择，如 RIP,OSPF. 2）自治系统间使用的路由选择协议称为外部网关协议（EGP），也称域间路由选择，如 BGP. 3 IPv4 IP 定义数据传送的基本单位—— IP 分组以及其确切的数据格式。 1. 分组格式：首部 + 数据 首部：固定 20B ，其中协议表示应交付哪个传输层协议（6：TCP,17:UDP）； 首部长度，总长度，片偏移的单位分别是 4B,1B,8B(1总8片的首4). 2. IP 数据报分片： IP 数据报封装在链路层数据报中，所以链路层 MTU（最大传送单元） 严格限制了 IP 数据报的长度。 1）IP 首部中的标志位有 3 比特，后两比特分别是 DF 和 MF； 2）DF（Don\u0026#39;t Fragment）：1:禁止分片，0：允许分片； 3）MF（More Fragment）：1：后面还有分片，0：此为最后一片。 3. IPv4 地址： 连接到因特网上的每台主机（或路由器）都分配一个 32 比特的全球唯一标识符，即 IP 地址。 1）分类：A,B,C,D,E 五类。 2）组成：网络号 + 主机号。 3）主机号全为 0 表示本网络本身， 主机号全为 1 表示本网络的广播地址， 127.0.0.0 为环路自检地址，表示任意主机本身， 0.0.0.0 表示本网络的本主机， 255.255.255.255 表示整个 TCP/IP 网络的广播地址。 4. NAT(网络地址转换)： 表示通过将专用网络地址转换为公用地址从而隐藏内部管理的 IP 地址。 1）NAT 路由器至少有一个有效的外部全球地址。 2）NAT 路由表存放着 {本地 IP 地址：端口} 到 {全球 IP 地址：端口} 的映射。 5. 子网划分： 两级 IP 地址存在不够灵活，地址空间利用率低等缺点，所以再增加一个 “子网号字段” 变成三级 IP 地址。 1）IP 地址 = 网络号 + 子网号 + 主机号。 2）划分子网是从主机号里面进行划分，不改变原来的网络号。 3）子网号不能全 1 或 全 0，但随着 CIDR 的使用，全 1 全 0 的 子网号也能用。 4）不管哪一种，子网中主机号全 0 的地址表示子网的网络号，主机号全 1 的表示子网的广播地址。 6. 子网掩码： 为告诉主机或路由器对网络进行了子网划分，使用子网掩码来表达对网络中主机号的错位。 1）1 对应 IP 地址中的网络号，0 对应于 IP 中的主机号。 7. 无分类域间路由选择（CIDR）: CIDR 是在变长子网掩码的基础上提出的一种消除传统 A,B,C 类网络划分并可实现超网构造的 IP 地址的划分方式。 1）IP = 网络前缀 + 主机号。 2）将网络前缀都相同的连续 IP 地址组成 ”CIDR地址块“ ，这种地址的聚合称为路由聚合（构成超网）。 8. IP 地址和硬件地址： IP 地址为网络层使用的地址，硬件地址是链路层使用的地址； IP 地址放在 IP 数据报的首部，而 MAC 地址放在 MAC 帧的首部。 9. 地址解析协议（ARP）： 在链路上传送数据帧时，最终必须使用硬件地址，因此需要完成 IP 地址到 MAC 地址的映射，这就是 ARP. 工作原理： A 向 B 发送 IP 数据报，先查看自己的 ARP 高速缓存中有无 B 的 IP 地址； 有，就可查出对应的硬件地址，并写入 MAC 帧，然后发送到此硬件地址； 无，通过全为 1 的目的 MAC 地址来封装并广播 ARP 请求分组，B 收到后便会返回响应 ARP 分组，其中包含 IP 与 MAC 的映射关系， A 收到后便写入 ARP 缓存。 // ARP 请求分组是广播发送，ARP 响应分组是普通的单播。 10. 动态主机配置协议（DHCP）: DHCP 协议常用于给主机动态分配 IP 地址（应用层协议，基于 UDP）。 工作过程（全程广播）： ① 主机广播 ”DHCP 发现“ 消息，试图找到 DHCP 服务器； ② DHCP 服务器收到后，广播 \u0026#34;DHCP 提供\u0026#34; 消息； ③ 主机收到回应后再广播 ”DHCP 请求“ 消息； ④ DHCP 服务器广播 ”DHCP 确认“ 消息，将 IP 地址分配给主机。 11. 网际控制报文协议（ICMP）: ICMP 用于主机和路由器来报告差错和异常情况。 分类：ICMP 差错报告报文，ICMP 询问报文。 ICMP 差错报告报文： ① 终点不可达； ② 原点抑制； ③ 时间超时； ④ 参数问题； ⑤ 改变路由（重定向）。 ICMP 询问报文： ① 回送请求和回答报文； ② 时间戳请求和回答报文； ③ 掩码地址请求和回答报文； ④ 路由器询问和通告报文。 // 分组网间 PING ：测试两台主机之间的连通性 // Traceroute :用来跟踪分组经过的路由 4 IPv6 解决 IP 地址耗尽的措施： 1）采用 CIDR ，使 IP 分配更合理； 2）采用 NAT 以节省 IP 地址； 3）采用更大地址空间的新版本 IPv6. 1. 主要特点： 1）IPv6 增加到 128 位（16 字节）。 2）支持即插即用（自动配置），不用 DHCP。 3）IPv6 只有在源节点才能分片（端到端），在路由器中不能分片。 4）IPv6 的首部必须是 8B 的整数倍（IPv4 是 4B）。 2. IPv6 地址： IPv6 数据报的目的地址可以是以下三种之一： 1）单播：传统的点对点通信； 2）多播：一点对多点的通信，分组被交付到一组计算机的每台计算机； 3）任播：其目的地址是一组计算机，但数据报只交付其中一台计算机，通常是最近的计算机。 3. IPv4 向 IPv6 的过渡： 1）双协议栈：让主机或路由器装有两个协议栈，一个 4 一个 6. 2）隧道技术：将整个 IPv6 数据报封装到 IPv4 数据报的数据部分，使其可在 IPv4 的隧道中传输。 5 路由协议 1. 路由信息协议（RIP）: RIP 是一种分布式的基于距离向量的路由选择协议，最大优点：简单。 1）RIP 会优先选择跳数少的路径。 2）RIP 规定一条路径最多包含 15 个路由器（距离为 16 表示不可达）。 3）RIP 规定每隔 30 s 仅和相邻路由器交换全部信息，180 s没动静表示 ”死掉“。 4）路由表项 = 目的网络 + 距离 + 下一跳路由器。 5）会出现慢收敛现象（坏消息传得慢）。 6）RIP 是应用层协议，使用 UDP 传送数据（端口：520）。 7）RIP 选择的路径不一定是时间最短，但是路由器最少。 2. 开放最短路径优先（OSPF）协议： 1）OSPF 使用洪泛法向所有路由器发送部分信息（与自己相邻的路由器的链路状况）。 2）只当链路状态发生变化时才交换信息。 3）OSPF 是网络层协议，直接使用 IP 数据报传送。 4）选择路径的原则是代价最小。 3. 边界网关协议（BGP）: BGP 是不同自治系统的路由器之间交换路由信息的协议。 1）只力求寻找一条较好（非最佳）的路由。 2）BGP 是应用层协议，基于 TCP. 3）与相邻路由器交换信息，首次交换整个路由表，非首次交换有变化的部分。 6 IP 组播 主机组播时仅发送一份数据，在传送路径出现分岔时才复制分组并转发。 组播仅应用于 UDP. 1. IP 组播地址： 1）组播数据报不提供可靠交付（UDP）； 2）组播地址只能用于目的地址，不作为源地址； 3）对组播数据报不产生 ICMP 差错报文。 4）并非所有 D 类地址都可以作为组播地址。 IP 组播分为两类：一种是在本局域网上进行硬件组播，一种是在因特网的范围内进行组播。 2. IGMP 与组播路由算法： IGMP 让连接到本地局域网上的组播路由器知道本局域网上是否有主机参加或退出了某个组播组。 组播路由算法： 1）基于链路状态的路由选择； 2）基于距离-向量的路由选择； 3）可建立在任何路由器协议上，称为协议无关的组播（PIM）. 7 移动 IP 支持移动性的因特网体系结构与协议共称为移动 IP。 （使用移动 IP 可以让一个移动结点在不改变 IP 地址的情况下改变驻留位置） 1. 基于 IPv4 的移动 IP 定义三种功能实体： 1）移动节点：具有永久 IP 地址的移动节点； 2）本地代理：移动节点的永久 ”居所“ 称为归属网络，其中代表移动节点执行移动管理的实体为本地代理，它根据移动节点的转交地址，采用隧道技术转交数据包。 3）外部代理：在外部网络中帮助移动节点完成移动管理的实体。 2. 移动 IP 通信过程： 本地代理接受消息，传给外部代理，载传给移动主机。 8 网络层设备 1. 路由器的组成和功能： 路由器是一种具有多个输入/输出端口的专用计算机，其任务是连接异构网并完成路由转发。 两个主要功能： 1）分组转发：处理通过路由器的数据流。 2）路由计算：通过和其他路由器进行基于路由协议的交互，完成路由表的计算。 2. 路由表和路由转发： 路由表是路由选择算法得出的，主要用于路由选择。 1）路由表项 = 目的网络 IP 地址，子网掩码，下一跳 IP 地址，接口。 2）转发表是从路由表得出的，但是格式不同。 3）路由表用软件实现，转发表可以软件实现，甚至可用特殊的硬件来实现。 ","date":"2021-02-27T13:19:58+08:00","permalink":"https://ldsdsy.github.io/p/network_four/","title":"Network_four"},{"content":"数据链路层 负责从一个节点到直接相连的相邻节点传输数据报\n1 功能 1. 为网络层服务： 1）无确认的无连接服务：适用于实时通信或误码率较低的通信信道，如以太网。 2）有确认的无连接服务：适用于误码率较高的通信网络，如无线通信。 3）有确认的面向连接服务：适用于通信要求（可靠性，实时性）较高的场合。 2. 链路管理：指数据链路层连接的建立，维持，释放过程。 3. 帧定界：帧的首部与尾部的一个重要作用就是确定帧的界限，及帧定界。 帧同步：指接收方应能从接收到的二进制比特流中区分处帧的起始和终止。 透明传输：不管所传数据是什么样的比特组合都应当能在链路上传送。 4. 流量控制：指控制发送方的数据流量，使其发送速率不应超过接收方的接受能力。 5. 差错控制：指用以使发送方确定接收方是否正确收到其发送的数据的方法；错误分为帧错和位错。 // 帧错：帧的丢失，重复，失序（引入定时器，编号机制来解决）。 // 位错：1 变 0 ，0 变 1 。 2 组帧 把比特组成帧传输，就可再出错时只重传出错的帧，而不是所有数据，提高效率。 1. 字符计数法：指在帧头部使用一个计数字段来标明帧内字符数。 2. 字符填充的首尾定界符：使用一些特殊的字符来定界帧的开始与结束。 3. 比特填充的首尾标志法：使用一个特定的比特模式，如 01111110 ，在传输数据中遇到 5 个 1 就填充 1 个 0 ，同样接收方接受数据时遇到 5 个 1 就去掉后面的 1 个 0（5 1 1 0）。 4. 违规编码法：如曼彻斯特编码，用 “高-低”电平表示 1 ，“低-高” 为 0，则 “高-高”，“低-低”就可用于表示开始和结束。 3 差错控制 差错都是噪声引起，一是信道固有的随机热噪声，二是短暂原因造成的冲击噪声；前者可提高信噪比，后者只能采用编码技术来解决。 1. 检错编码： 1）奇偶校验码：它由 n-1 位信息元和 1 位校验元组成；奇校验码是加上校验元后整体有奇数个 1，偶检验码则是整体有偶数个 1 。 2）循环冗余码（多项式码）： 数据 A 尾部加 0（0 的个数为帧检验序列位数减一）； 新 A 对帧检验序列进行模 2 除法，都到余数为冗余码（位数等于第一步中加 0 的个数）； 把冗余码替换掉 A 后面加的那些 0，即为传输的数据； 接收方接受到数据，用此数据对帧检验序列进行模 2 除法，若余数为 0 则无错误，否则数据有误。 2. 纠错编码： 海明码：发现双比特错，纠正单比特错。 海明不等式：2^r \u0026gt;= k+r+1 //r: 冗余信息位，k: 信息位 4 流量控制与可靠传输机制 1. 停止-等待协议： 发送方每发送一帧就要等待接收方的应答信号，之后再发送下一帧。 2. 滑动窗口协议： 1）后退 N 帧协议(GBN)：发送窗口 \u0026gt; 1,接收窗口 = 1. // 接收方只能按顺序接受帧，且可采用累计确认； // 若采用 n 比特对帧编号，则发送窗口尺寸 w 应满足：1 \u0026lt;= w \u0026lt;=2^n-1. 2）选择重传协议（SR): 发送窗口与接受窗口都大于等于 1，最大尺寸都等于 2^(n-1). // 对数据帧逐一确认； // 只重传出错帧； // 接收方有缓存。 5 介质访问控制 采取一定措施，使结点间的通信不会发生相互干扰。 1. 信道划分介质访问控制： 1）频分多路复用 2）时分多路复用 3）波分多路复用 4）码分多路复用 2. 随机访问介质访问控制： 1. ALOHA协议： 1）纯 ALOHA 协议：不监听信道，不按时间槽发送，想发就发，随机重发。 2）时隙 ALOHA 协议：将时间划分为若干等长时隙，按时发送。 2. CSMA 协议： 1）1-坚持 CSMA：侦听信道，空闲即发，忙着等待，继续侦听，直至空闲。 2）非坚持 CSMA：侦听信道，空闲即发，忙则弃听，随机重听。 3）p-坚持 CSMA：侦听信道，空闲则以概率 p 发送数据，以概率 1-p 推迟到下一个时隙，忙则等待下一时隙再侦听。 3. CSMA/CD 协议： 适用于总线型网络或半双工网络环境（有线连接的局域网）； 先听后发，边听边发，冲突停发，随机重发； 最小帧长 = 数据传输率 * 总线传播时延 * 2； 二进制指数退避算法： 确定基本退避时间 2Π； 定义参数 k = min[重传次数，10]； 从离散数值 [0,1,···,2^k-1] 随机选取一个数值 r，则退避时间为 2Πr； 重传 16 次仍不成功则抛弃此帧并向高层汇报。 4. CSMA/CA 协议： 适用于无线局域网； 基本思想：发送数据前先广播通知其他节点，避免碰撞；先听后发，边听边发，碰撞停发。 碰撞避免机制： 1）预约信道：发送方发送的同时告知其他站点自己传输数据需要的时间。 2）ACK 帧：接受方收到数据后要返回一个 ACK 帧，发送方如果在规定时间内没收到 ACK 帧，则会重新发送数据给接受方。 3）RTS/CTS 帧：可选的碰撞避免机制，主要用与解决无线网中的 “隐蔽站” 问题。 3.轮询访问介质访问控制： 用户通过一个集中控制的监控站，以循环的方式逐个获取信道使用权。 令牌传递协议：得到令牌的机器才能发送数据，其他的等待。 6 局域网 局域网是指在一个较小的范围内，将各种计算机，外部设备和数据库系统等通过双绞线，同轴电缆等连接起来，组成资源和信息共享的计算机互联网络。 1. 特性： 1）拓扑结构：星形结构，环形结构，总线形结构（常用），树形（星形 + 总线形）。 2）传输介质：双绞线（主流），铜缆，光纤。 3）介质访问控制方式：CSMA/CD,令牌总线，令牌环（前两种用于总线形局域网，后者用于环形网络）。 2. 三种特殊局域网拓扑实现： 1）以太网：逻辑上是总线形结构，物理上是星形或扩展星型结构。 2）令牌环：逻辑上环形结构，物理上是星形结构。 3）FDDI ：逻辑上是环形，物理上是双环结构。 3. 以太网： 以太网是指符合 DIX Ethernet V2 标准的局域网，由于此标准与IEEE 802.3 标准相差很少，因此将 IEEE 802.3 局域网简称为以太网。 1）传输介质：粗缆，细缆，双绞线，光纤。 2）网卡：实现计算机与外部局域网的连接，又称网络接口板（卡），网络适配器。 3）MAC 帧：数据帧的一种，包含 MAC 地址（物理地址）。 4. 高速以太网：速率达到或超过 100Mb/s 的以太网。 5. IEEE 802.11: 指无线局域网的一系列协议标准； 无线局域网分为：固定基础设施无线局域网，无固定基础设施无线局域网自组织网络。 7 广域网 广域网不等于互联网，互联网用路由器连接，可以连接不同类型的网络（局域网和广域网）；广域网则采用节点交换机连接一个网络。 1. PPP 协议： 面向字节，采用字节填充方式，只支持全双工链路。 2. HDLC 协议： 面向比特，采用 0 比特插入法，帧类分为信息帧，监督帧，无编号帧。 8 数据链路层设备 1. 网桥： 特点：把两个或多个以太网通过网桥连接起来变成一个网段。 类型： 1）透明网桥：按照自学习算法填写转发表，按转发表转发；不是最佳路由。 2）源路由网桥：先发送发现帧，按返回结果转发；是最佳路由。 2.交换机（多端口网桥）： 交换模式： 1）直通式：帧在接收后只检查目的地址，几乎能马上传输出去。 2）存储转发：先将接收到的帧缓存到高速缓存器，检查数据正确性。 二者相同点：按 MAC 地址转发，都能隔离冲突域，不能隔离广播域。 ","date":"2021-02-23T11:20:17+08:00","permalink":"https://ldsdsy.github.io/p/network_three/","title":"Network_three"},{"content":"物理层 物理层用于透明传输比特流\n1 基本概念 1） 码元： 指用一个固定时长的信号波形表示一位 K 进制数字。 2） 单工通信： 只有一个方向的通信而没有反方向的交互，仅需一条信道。 3） 半双工通信： 通信双方都可以发送或接受信息，但同一时间只能一个发一个接，需要两条信道。 4） 全双工通信： 通信双方都可以同时发送和接收信息，需要两条信道。 5） 码元速率： 单位为波特，1 波特表示一秒传输一个码元。 6） 信息传输率： 单位为 b/s ,单位时间传输的比特数。 2 四种特性 1） 机械特性： 规定物理连接时所采用的规格，接口形状，引线数目，引脚数量等。 2） 电气特性： 规定传输二进制时，线路上信号的电压范围，阻抗匹配，传输速率和传输距离等。 3） 功能特性： 指明某线路上某一电平表示何种意义，接口部件信号线的用途。 4） 规程特性： 又叫过程特性，定义各条物理线路的工作规程和时序关系。 3 奈氏准则，香农定理 1. 奈氏准则 指出在理想低通（无噪声，带宽有限）的情况下，码元的极限传输率是 2W 。 // 可推出 数据极限传输率 = 2W * log2(V) ,V 表示有 v 种码元。 2. 香农定理 给出了带宽受限且有高斯白噪声干扰的信道的极限数据传输率，W * log2（1+S/N）。 // S/N 为信噪比，（ X 分贝 = 10*log10（S/N）。 4 编码，调制 1 数字数据编码为数字信号： 1）非归零编码：高电平 1，低电平 0 （反之亦可）。 2）归零编码：信号电平在一个码元内都要恢复到零（低电平 0，高——\u0026gt;低 1）。 3）反向非归零编码：信号电平反转为 0，不变为 1。 4）曼彻斯特编码：一个码元分成两个相等间隔，高低为 1，低高为 0。 5）差分曼彻斯编码：遇 0 前半个码元反转，遇 1 前半个码元不变（同 1 异 0）。 6）4B/5B 编码：数据分为 4 个一组，按照 4B/5B 编码规则转换为 5 位码。 2 数字数据调制为模拟信号： 1）幅移键控（调幅）：通过改变载波信号的振幅来表示数字信号 1 和 0 . 2）频移键控（调频）：通过改变载波信号的频率来表示数字信号 1 和 0 . 3）相移键控（调相）：通过改变载波信号的相位来表示数字信号 1 和 0 . 4）正交振幅调制（调幅+调相）：通过改变载波信号的振幅以及相位来表示数字信号 1 和 0 . 3 模拟数据编码为数字信号： 常用于对音频信号进行编码，步骤：采样 ——\u0026gt; 量化 ——\u0026gt; 编码。 4 模拟数据调制为模拟信号： 例如广播电台。 5 电路交换，报文交换，分组交换 1 电路交换： 过程：建立连接 ——\u0026gt; 通信 ——\u0026gt; 释放连接。 特点：独占资源，用户始终占用端到端的固定传输带宽；适用于远程批处理信息传输或系统间实时性要求高的大量数据传输。 2 报文交换： 过程：无需建立连接，动态分配线路，以报文为传输单位，在交换节点采用存储转发的方式，便于不同类型，规格，速率的计算机之间进行通信。 报文：表示站点单次要发送的数据块，长度不限且可变。 3 分组交换： 同样采取存储转发，但限制了每次传输的数据块的上限，解决了大报文传输的问题，同时给小数据块增加了必要的控制信息。 两种方式：面向连接的虚电路方式，无连接的数据报方式。 6 传输介质 1）双绞线：由两根采用一定规则绞合的，相互绝缘的铜导线组成。 2）同轴电缆：由内导体，绝缘层，网状编织屏蔽层，塑料外层构成。 3）光纤：通过传递光脉冲来进行通信，分为单模光纤和多模光纤。 4）无线传输介质：无线电波，微波，红外线，激光。 7 物理层设备 1 中继器（转发器）： 功能：将信号整形放大再转发出去。 // 放大器是放大模拟信号（放大），中继器是放大数字信号（整形再生）。 2 集线器（多口中继器） ","date":"2021-02-22T10:00:51+08:00","permalink":"https://ldsdsy.github.io/p/network_two/","title":"Network_two"},{"content":"计算机网络概述 简言之，计算机网络就是一些互联的，自治的计算机系统的集合。\n1 计算机的网络的组成 1) 从组成部分上看： 硬件，软件，协议。 2) 从工作方式上看： 边缘部分，核心部分。 3) 从功能组成上看： 通信子网，资源子网。 2 计算机网络的功能 1. 数据通信 2. 资源共享 3. 分布式处理 4. 提高可靠性 5. 负载均衡 3 计算机网络的分类 1) 按分布范围分类： 广域网，城域网，局域网，个人区域网。 2) 按传输技术分类： 广播式网络，点对点网络。 3) 按拓扑结构分类： 星形网络，总线形网络，环形网络，网状形网络。 4) 按使用者分类： 公用网，专用网。 5) 按交换技术分类： 电路交换网络，报文交换网络，分组交换网络。 6) 按传输介质分类： 有线网络，无线网络。 4 计算机网络的性能指标 1) 带宽： 表示网络的通信线路所能传输数据的能力，是数字信道所能传输的 “最高数据率” 的同义词，单位为比特每秒（b/s）。 2) 吞吐量： 表示单位时间通过某个网络（或信道，接口）的数据量。其受到网络带宽或是网络额定速率的限制。 // 带宽是理性的最高传输速率，吞吐量是实际上此时间段的传输速率。 3) 速率： 表示连接到网络上的主机在数字信道上传送数据的速率，也称数据率或比特率，单位为 b/s （最高数据率就是带宽）。 4) 时延： 表示数据从网络一端到另一端的所需时间。 *发送时延：结点将数据传输到链路上所需要的时间，也称传输时延。 // 数据从主机到链路上的总时间。 *传播时延：电磁波在信道上传播一定的距离需要花费的时间，及从链路一端到另一端的时间。 *处理时延：数据在交换节点进行一些必要处理所花的时间。 *排队时延：分组在进入路由器后要先在输入队列中排队等待处理，之后还要在输出队列中等待转发。 5) 往返时延（RTT）： 指从发送端发送数据开始，到发送端收到来自接收端的确认，总共经历的时间。 6) 时延带宽积： 表示第一个比特到达终点时，发送端已经发送的比特数 (时延带宽积 = 传播时延 * 信道带宽)。 5 计算机网络体系结构和参考模型 1. OSI 参考模型： 物理层，数据链路层，网络层，传输层，会话层，表示层，应用层（“物联网淑慧试用”）。 // 下三层为通信子网（数据通信），上三层为资源子网（数据处理）。 2. TCP/TP 模型： 网络接口层（物，链），网际层（络），传输层（输），应用层（会，示，应）。 ","date":"2021-02-20T15:37:07+08:00","permalink":"https://ldsdsy.github.io/p/network_one/","title":"Network_one"},{"content":"github 上有许多优秀的开源社区，对于时间充裕的学生党来说，平时在社区做做贡献是个不错的选择。下面以 Kubernetes 社区为例（刚开始选择做一些简单的翻译贡献，选择 Kubernetes/website ）： 1. fork 想要做贡献的项目 在 GitHub 进入 Kubernetes/website 项目中，点击右上角的 Fork 按钮，此时就在你的个人仓库里生成了一个 yourname/website 的项目。 2. Clone 刚刚 Fork 的项目 做贡献之前，必须得把项目下载到本地。进入个人的 GitHub 主页找到刚刚 Fork 的项目，点击右上角的 Clone 按钮。 此处有三种下载方式，我选择中间的 SSH 方式。复制好下方的链接进入 cmd 使用 git clone 命令（我打算把项目下载到 D 盘）： $ cd d: $ git clone git@github.com:ldsdsy/website.gitf //耐心等待，第一次 clone 需要一些时间，完成后 D 盘里就会出现 website 的文件夹。 3.设置克隆好的项目 在 cmd 中进入克隆过来的项目文件夹，将原来项目的 URL 添加到你的本地代码仓库，这样你就可以随时从原来的项目 pull 最新的修改(此处用 upstream 作为远程仓库的名字，这是 GitHub 的风格，但是你可以用任何名字。): $ git remote add upstream git@github.com:kubernetes/website.git 现在远程仓库列表是这样的: $ git remote -v origin git@github.com:ldsdsy/website.git (fetch) origin git@github.com:ldsdsy/website.git (push) upstream git@github.com:kubernetes/website.git (fetch) upstream git@github.com:kubernetes/website.git (push) 以后定期更新时按如下命令顺序运行： $ cd D:\\website $ git checkout master $ git fetch upstream $ git rebase upstream/master $ git push origin master 4.创建一个分支 在做翻译之前，先要创建一个本地分支，这是将要开展工作的地方。用以下命令（这会创建一个名为 translate1 的新分支，而且在本地仓库里，处于激活状态。你最好用一个可以描述你要做什么的分支名字。）： $ git checkout -b translate1 查看当前处于哪一个分支（* 表示当前分支）： $ git branch master * translate1 5.开展工作 可采用 vscode 等编辑器打开 website 文件夹，在 en 目录里找到一个还没有翻译的文件，然后在 zh 目录下新建一个文件名一致的对应文件，按照原文的格式进行翻译。 6.提起 pull request 当翻译完成后，需要把修改过的新内容 push 到个人的在 GitHub 上: $ git branch //确定当前在 translate1 上 $ git status //确定自己没有误操作其他的无关的文件 $ git commit -m \u0026#34;translate 2020-10-01\u0026#34; $ git push origin translate1 现在用浏览器打开个人的 GitHub, 点开 fork 的项目，便会在项目顶上看到一个 compare \u0026amp; pull request 的绿色按钮，点击用来提起 pull request。之后，会看到一个页面，显示你的分支和原来的分支之间不同的部分。确定无误后，点击确定。 7.等待审查 之后会有专门的审查人员对你的提交进行核查，合格后便会收到同意合并的邮件，或是收到建议修改的邮件，或是被直接拒绝。 ！！！第一次做贡献的话，此处可能会遇到签署 CLA(Contribution License Agreement) 的问题，根据提示签署 CLA 即可（TITLE:student） 8.删除分支 不管结果如何，最后就可以删除一开始创建的工作分支（不删也问题不大，不是强制性的）： //删除本地仓库里的分支： $ git branch -D translate1 //删除 GitHub 上的分支： $ git push origin --delete translate1 ","date":"2021-02-06T12:58:45+08:00","permalink":"https://ldsdsy.github.io/p/%E7%A4%BE%E5%8C%BA%E8%B4%A1%E7%8C%AE%E6%B5%81%E7%A8%8B/","title":"社区贡献流程"},{"content":"1.输入球的中心点和球上某一点的坐标，计算球半径和体积。\nC++\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cmath\u0026gt; using namespace std; double const PI=3.14; int main() { double a,b,c,x,y,z,r,v; cout\u0026lt;\u0026lt;\u0026#34;input circle center coordinates:\u0026#34;; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b\u0026gt;\u0026gt;c; cout\u0026lt;\u0026lt;\u0026#34;input coordinates of any point:\u0026#34;; cin\u0026gt;\u0026gt;x\u0026gt;\u0026gt;y\u0026gt;\u0026gt;z; r=sqrt(pow(x-a,2)+pow(y-b,2)+pow(z-c,2)); v=4/3.0*PI*pow(r,3);\t//注意：4/3=1,所以要除以 3.0 cout\u0026lt;\u0026lt;\u0026#34;Radius is:\u0026#34;\u0026lt;\u0026lt;r\u0026lt;\u0026lt;endl; cout\u0026lt;\u0026lt;\u0026#34;Volume is:\u0026#34;\u0026lt;\u0026lt;v\u0026lt;\u0026lt;endl; return 0; } Go\npackage exam2003 import ( \u0026#34;fmt\u0026#34; \u0026#34;math\u0026#34; ) //Sphere is used to calculate the radius and volume of a certain sphere func Sphere() { var a, b, c, x, y, z, r, v float64 fmt.Print(\u0026#34;input the circle center coordinates:\u0026#34;) fmt.Scan(\u0026amp;a, \u0026amp;b, \u0026amp;c) fmt.Print(\u0026#34;input the coordinates of any point:\u0026#34;) fmt.Scan(\u0026amp;x, \u0026amp;y, \u0026amp;z) r = math.Sqrt(math.Pow(x-a, 2) + math.Pow(y-b, 2) + math.Pow(z-c, 2)) v = 4 / 3.0 * math.Pi * math.Pow(r, 3) fmt.Printf(\u0026#34;The radius is:%f\\n\u0026#34;, r) fmt.Printf(\u0026#34;The volume is:%f\\n\u0026#34;, v) } 2.手工建立一个文件，文件种每行包括学号、姓名、性别和年龄。每一个属性使用空格分开。再根据输入的学号，查找文件，输出该学生的信息。文件如下：\n01 李江 男 21 02 刘唐 男 23 03 张军 男 19 04 王娜 女 19 C++\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;fstream\u0026gt; using namespace std; int main() { int num,age,stu,flag=0; string name,gender; cout\u0026lt;\u0026lt;\u0026#34;input students\u0026#39; info like:01 ML female 21 and ends with 00 00 00\\n\u0026#34;; ofstream out(\u0026#34;student.txt\u0026#34;); while(cin\u0026gt;\u0026gt;num\u0026gt;\u0026gt;name\u0026gt;\u0026gt;gender\u0026gt;\u0026gt;age) { if(num==0) { break; } out\u0026lt;\u0026lt;num\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;gender\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;age\u0026lt;\u0026lt;endl; } cout\u0026lt;\u0026lt;\u0026#34;input the number of you want\\n\u0026#34;; cin\u0026gt;\u0026gt;stu; ifstream in(\u0026#34;student.txt\u0026#34;); while(!in.eof()) { in\u0026gt;\u0026gt;num\u0026gt;\u0026gt;name\u0026gt;\u0026gt;gender\u0026gt;\u0026gt;age; if(num==stu) { flag=1; cout\u0026lt;\u0026lt;num\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;gender\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;age\u0026lt;\u0026lt;endl;\tbreak; } } if(flag==0) { cout\u0026lt;\u0026lt;\u0026#34;There is no such student here\\n\u0026#34;; } return 0;\t} Go\npackage exam2003 import ( \u0026#34;fmt\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; ) //Student is used to handle information of students func Student() { var num, age, flag int var name, gender, Snum string //create file and input information file, err := os.OpenFile(\u0026#34;D:/stu.txt\u0026#34;, os.O_CREATE|os.O_WRONLY|os.O_RDONLY, 0) if err != nil { fmt.Println(\u0026#34;Failed to open file\u0026#34;) return } defer file.Close() fmt.Println(\u0026#34;inout the Info of studetns:01 ml female 22 and ends by 0 0 0 0\u0026#34;) for { fmt.Scan(\u0026amp;num, \u0026amp;name, \u0026amp;gender, \u0026amp;age) if num == 00 { break } fmt.Fprint(file, num, \u0026#34; \u0026#34;, name, \u0026#34; \u0026#34;, gender, \u0026#34; \u0026#34;, age) fmt.Fprint(file, \u0026#34;\\n\u0026#34;) } fmt.Println(\u0026#34;input the student number of you want:\u0026#34;) fmt.Scan(\u0026amp;Snum) //Read out and select the students you want to query f, err := ioutil.ReadFile(\u0026#34;D:/stu.txt\u0026#34;) if err != nil { fmt.Println(\u0026#34;read fail\u0026#34;, err) } strArr := strings.Split(string(f), \u0026#34;\\n\u0026#34;) flag = 0 for _, s := range strArr { y := strings.Split(string(s), \u0026#34; \u0026#34;) if y[0] == Snum { fmt.Printf(\u0026#34;%s\\n\u0026#34;, y) flag = 1 break } } if flag == 0 { fmt.Println(\u0026#34;There is no such student here\u0026#34;) } } 3.输入年月日，计算该天是本年的第几天。例如 1990 年 9 月 20 日是 1990 年的第 263 天，2000 年 5 月 1 日是 2000 年第 122 天。（闰年：能被 400 整除，或能被 4 整除但不能被 100 整除。每年 1、3、5、7、8、10 、12 为大月）\nC++\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a[13]={0,31,28,31,30,31,30,31,31,30,31,30,31}; int year,month,day,sum=0; cout\u0026lt;\u0026lt;\u0026#34;input the date:1998 06 08\u0026#34;\u0026lt;\u0026lt;endl; cin\u0026gt;\u0026gt;year\u0026gt;\u0026gt;month\u0026gt;\u0026gt;day; if(year%400==0||(year%4==0\u0026amp;\u0026amp;year%100!=0)) { a[2]=29; } for(int i=1;i\u0026lt;month;i++) { sum+=a[i]; } sum+=day; cout\u0026lt;\u0026lt;\u0026#34;today is \u0026#34;\u0026lt;\u0026lt;sum\u0026lt;\u0026lt;\u0026#34;th day\u0026#34;\u0026lt;\u0026lt;endl; } Go\npackage exam2003 //Day is used to calculate how many days today is func Day(year, month, day int) int { a := [13]int{0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31} if year%400 == 0 || (year%4 == 0 \u0026amp;\u0026amp; year%100 != 0) { a[2] = 29 } sum := 0 for i := 1; i \u0026lt; month; i++ { sum += a[i] } sum += day return sum } ","date":"2021-02-02T12:26:30+08:00","permalink":"https://ldsdsy.github.io/p/exam2003/","title":"Exam2003"},{"content":"1.打印所有不超过 n（ n \u0026lt; 256）的，其平方具有对称性质的数。如 11*11=121。\nC++\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;cmath\u0026gt; using namespace std; bool HuiWen(int n) { n=n*n; int a[10]={0}; int t=n; int i=0; while(t!=0) { a[i]=t%10; t/=10; i++; } i--; int j=0; while(i\u0026gt;=0) { t+=a[i]*pow(10,j); i--; j++; } if(t==n) { return true; } return false; } int main() { for(int i=0;i\u0026lt;256;i++) { if(HuiWen(i)) { cout\u0026lt;\u0026lt;i\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } } return 0; } Go\npackage exam2002b import \u0026#34;fmt\u0026#34; //Huiwen is used to output the number of replies func Huiwen() { var a [10]int for i := 0; i \u0026lt; 256; i++ { n := i * i t := n j := 0 for ; t != 0; j++ { a[j] = t % 10 t /= 10 } t = 0 for k := 0; k \u0026lt; j; k++ { //反向组数 t = t*10 + a[k] } if t == n { fmt.Printf(\u0026#34;%d \u0026#34;, i) } } } 编写一个求斐波那契数列的递归函数，输入 n 值，使用该递归函数，输出如下图形。例如：当 n = 6 时。 0 0 1 1 0 1 1 2 3 0 1 1 2 3 5 8 0 1 1 2 3 5 8 13 21 0 1 1 2 3 5 8 13 21 34 55 C++\n#include \u0026lt;iostream\u0026gt; using namespace std; int Fibonacci(int j) { if(j==1) { return 0; } else if(j==2) { return 1; } else { return Fibonacci(j-1)+Fibonacci(j-2); } } int main() { int n,t; cin\u0026gt;\u0026gt;n; for(int i=1;i\u0026lt;=n;i++) { for(int k=1;k\u0026lt;=n-i;k++) { cout\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } for(int j=1;j\u0026lt;=2*i-1;j++) { t=Fibonacci(j); cout\u0026lt;\u0026lt;t\u0026lt;\u0026lt;\u0026#34; \u0026#34;\t; } cout\u0026lt;\u0026lt;endl; } } Go\npackage exam2002b import \u0026#34;fmt\u0026#34; //Fibonacci is used to calculate the number func Fibonacci(j int) int { if j == 1 { return 0 } else if j == 2 { return 1 } return Fibonacci(j-1) + Fibonacci(j-2) } //Triangle is used to print Triangle of Fibonacci func Triangle(n int) { for i := 1; i \u0026lt;= n; i++ { for k := 1; k \u0026lt;= n-i; k++ { fmt.Print(\u0026#34; \u0026#34;) } for j := 1; j \u0026lt;= 2*i-1; j++ { t := Fibonacci(j) fmt.Printf(\u0026#34;%d \u0026#34;, t) } fmt.Println() } } ","date":"2021-01-30T15:03:09+08:00","permalink":"https://ldsdsy.github.io/p/exam2002b/","title":"Exam2002B"},{"content":"1.某人有 8 角的邮票 5 张，1 元的邮票 4 张，1 元 8 角的邮票 6 张，用这些邮票中的一张或若干张可以得到多少种不同的邮资？\nC++\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;set\u0026gt; using namespace std; int main() { set\u0026lt;int\u0026gt; s;\t//此题避免使用 double ，可能会因为精确度的问题造成相同的数不一致 int t; for(int i=0;i\u0026lt;=5;i++) { for(int j=0;j\u0026lt;=4;j++) { for(int k=0;k\u0026lt;=6;k++) { if(!(i==j \u0026amp;\u0026amp; j==k \u0026amp;\u0026amp; k==0))\t//注意没有三种都为 0 的情况 { t=8*i+10*j+18*k; s.insert(t); } } } } cout\u0026lt;\u0026lt;\u0026#34;组合数为：\u0026#34;\u0026lt;\u0026lt;s.size()\u0026lt;\u0026lt;endl; return 0; } Go\npackage exam2002a import \u0026#34;fmt\u0026#34; //Set is used to grouping the stamp func Set() { var a = [190]int{0} count := 0 for i := 0; i \u0026lt;= 5; i++ { for j := 0; j \u0026lt;= 4; j++ { for k := 0; k \u0026lt;= 6; k++ { t := 8*i + 10*j + 18*k a[t] = 1 } } } for i := 1; i \u0026lt; 190; i++ { if a[i] == 1 { count++ } } fmt.Printf(\u0026#34;组合数为：%d\\n\u0026#34;, count) } 2.输入 n 值， 使用递归函数，求杨辉三角形中各个位置上的值，按照如下形式打印输出图形。例如：当 n = 6 时,\n1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 C++\n#include \u0026lt;iostream\u0026gt; using namespace std; int number(int i,int j) { if(j==1||i==j) { return 1; }\telse { return number(i-1,j)+number(i-1,j-1); } } int main() { int h,t; cin\u0026gt;\u0026gt;h; for(int i=1;i\u0026lt;=h;i++) { for(int j=1;j\u0026lt;=h-i;j++) { cout\u0026lt;\u0026lt;\u0026#34; \u0026#34;;\t//输出数字前的空格 } for(int k=1;k\u0026lt;=i;k++) { t=number(i,k); cout\u0026lt;\u0026lt;t\u0026lt;\u0026lt;\u0026#34; \u0026#34;;\t//数字间的空格以此输出 } cout\u0026lt;\u0026lt;endl; } return 0; } Go\npackage exam2002a import \u0026#34;fmt\u0026#34; //Number is used to compute the number of Triangle func Number(i, j int) int { if j == 1 || i == j { return 1 } return Number(i-1, j) + Number(i-1, j-1) } //Triangle is used to print Yang Hui Triangle func Triangle(h int) { for i := 1; i \u0026lt;= h; i++ { for j := 1; j \u0026lt;= h-i; j++ { fmt.Print(\u0026#34; \u0026#34;) } for k := 1; k \u0026lt;= i; k++ { t := Number(i, k) fmt.Printf(\u0026#34;%d \u0026#34;, t) } fmt.Println() } } ","date":"2021-01-27T14:02:43+08:00","permalink":"https://ldsdsy.github.io/p/exam2002a/","title":"Exam2002A"},{"content":"1.请输入高度 h，输出一个高为 h，上底边长为 h 的等腰梯形（同 * 表示）。\nC++\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int h; cout\u0026lt;\u0026lt;\u0026#34;input h:\u0026#34;\u0026lt;\u0026lt;endl; cin\u0026gt;\u0026gt;h; for(int i=1;i\u0026lt;=h;i++) { for(int j=1;j\u0026lt;=3*h-2;j++) { if(j\u0026gt;=h-(i-1)\u0026amp;\u0026amp;j\u0026lt;=(2*h-1)+(i-1)) { cout\u0026lt;\u0026lt;\u0026#34;*\u0026#34;; } else { cout\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } } cout\u0026lt;\u0026lt;endl; } return 0; } Go\npackage exam2001b import \u0026#34;fmt\u0026#34; //Trapezoidal is used to output a trapezoidal func Trapezoidal(h int) { for i := 1; i \u0026lt;= h; i++ { for j := 1; j \u0026lt;= 3*h-2; j++ { if j \u0026gt;= h-(i-1) \u0026amp;\u0026amp; j \u0026lt;= (2*h-1)+(i-1) { fmt.Printf(\u0026#34;*\u0026#34;) } else { fmt.Printf(\u0026#34; \u0026#34;) } } fmt.Println() } } 2.请编写一个程序，从键盘上输入 n（ n 的范围是 1～20 ），求 n 的阶乘。\nC++\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int n; double s=1;\t//20的阶乘会超出整型的范围 cin\u0026gt;\u0026gt;n; for(int i=1;i\u0026lt;=n;i++) { s=s*i; } cout\u0026lt;\u0026lt;\u0026#34;阶乘是：\u0026#34;\u0026lt;\u0026lt;s\u0026lt;\u0026lt;endl; return 0; } Go\npackage exam2001b import \u0026#34;fmt\u0026#34; //Factorial is used to compute the factorial of a number func Factorial(n int64) { var s, i int64 s = 1 for i = 1; i \u0026lt;= n; i++ { s *= i } fmt.Printf(\u0026#34;%d 的阶乘是：%d\u0026#34;, n, s) } 3.从键盘上任意输入一个长度不超过 20 的字符串，对所输入的字符串，按照 ASCII 码的大小从小到大进行排序，请输出排序后的结果。\nC++\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main() { string s,s1; cin\u0026gt;\u0026gt;s; sort(s.begin(),s.end()); cout\u0026lt;\u0026lt;s\u0026lt;\u0026lt;endl; } Go\npackage exam2001b import ( \u0026#34;fmt\u0026#34; \u0026#34;sort\u0026#34; ) //Str is string type Str string func (s *Str) Len() int { return len(*s) } func (s *Str) Less(i, j int) bool { s1 := []byte(*s) return s1[i] \u0026lt; s1[j] } func (s *Str) Swap(i, j int) { s1 := []byte(*s) s1[i], s1[j] = s1[j], s1[i] *s = Str(s1) } //StringSort is used to sort a string func StringSort(s Str) { sort.Sort(\u0026amp;s) fmt.Println(s) } ","date":"2021-01-24T17:09:05+08:00","permalink":"https://ldsdsy.github.io/p/exam2001b/","title":"Exam2001B"},{"content":"1.编写程序，计算下列分段函数 y=f(x)的值。\ny = -x + 2.5 , 0 \u0026lt;= x \u0026lt; 2 y = 2 - 1.5 * (x-3) * (x-3) ， 2 \u0026lt;= x \u0026lt; 4 y = x / 2 - 1.5 ， 4 \u0026lt;= x \u0026lt; 6 C++\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { double x,y; cout\u0026lt;\u0026lt;\u0026#34;input the x:\u0026#34;\u0026lt;\u0026lt;endl; cin\u0026gt;\u0026gt;x; if(x\u0026lt;0||x\u0026gt;=6) { cout\u0026lt;\u0026lt;\u0026#34;x out of the bounds\u0026#34;\u0026lt;\u0026lt;endl; return 0; } if(x\u0026gt;=0\u0026amp;\u0026amp;x\u0026lt;2) { y=-x+2.5; } else if(x\u0026gt;=2\u0026amp;\u0026amp;x\u0026lt;4) { y=2-1.5*(x-3)*(x-3); } else if(x\u0026gt;=4\u0026amp;\u0026amp;x\u0026lt;6) { y=x/2-1.5; } cout\u0026lt;\u0026lt;\u0026#34;y=\u0026#34;\u0026lt;\u0026lt;y\u0026lt;\u0026lt;endl; return 0; } Go\npackage exam2001a import \u0026#34;fmt\u0026#34; //Y is used to calculate y based on x func Y(x float64) { if x \u0026lt; 0 || x \u0026gt;= 6 { fmt.Println(\u0026#34;X out of bounds\u0026#34;) return } var y float64 if x \u0026gt;= 0 \u0026amp;\u0026amp; x \u0026lt; 2 { y = -x + 2.5 } else if x \u0026gt;= 2 \u0026amp;\u0026amp; x \u0026lt; 4 { y = 2 - 1.5*(x-3)*(x-3) } else if x \u0026gt;= 4 \u0026amp;\u0026amp; x \u0026lt; 6 { y = x/2 - 1.5 } fmt.Printf(\u0026#34;y=%.2f\u0026#34;, y) } 2.编写程序，读入一个整数 N 。若 N 为非负数，则计算 N 到 2N 之间的整数和；若 N 为一个负数，则求 2N 到 N 之间的整数和。\nC++\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int n,sum=0,flag=1;\t//flag=1 表示 n 为正数，flag=-1 表示 n 为负数 cin\u0026gt;\u0026gt;n; if(n\u0026lt;0) { flag=-1; n=-n; } for (int i=n;i\u0026lt;=2*n;i++) { sum+=i; } if(flag==1) { cout\u0026lt;\u0026lt;\u0026#34;sum=\u0026#34;\u0026lt;\u0026lt;sum\u0026lt;\u0026lt;endl; } else { cout\u0026lt;\u0026lt;\u0026#34;sum=\u0026#34;\u0026lt;\u0026lt;-sum\u0026lt;\u0026lt;endl; } return 0; } Go\npackage exam2001a //Sum is used to compute the sum between n and 2*n func Sum(n int) int { sum := 0 symbol := 1 if n \u0026lt; 0 { symbol = -1 n = -n } for i := n; i \u0026lt;= 2*n; i++ { sum += i } if symbol == -1 { return -sum } return sum } 3.设 N 是一个四位数，它的 9 倍恰好是其反序数（例如：1234 的反序数是 4321），求 N 的值。\nC++\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a[4]; int t; for(int i=1000;i\u0026lt;10000;i++) { t=i; a[0]=t%10; a[1]=t/10%10; a[2]=t/100%10; a[3]=t/1000%10; t=a[0]*1000+a[1]*100+a[2]*10+a[3]; if(t==9*i) { cout\u0026lt;\u0026lt;\u0026#34;N=\u0026#34;\u0026lt;\u0026lt;i\u0026lt;\u0026lt;endl; } } return 0; } Go\npackage exam2001a import \u0026#34;fmt\u0026#34; //Inverse is used to find N func Inverse() { var a [4]int for i := 1000; i \u0026lt; 10000; i++ { t := i for k := 0; k \u0026lt; 4; k++ { a[k] = t % 10 t /= 10 } t = a[0]*1000 + a[1]*100 + a[2]*10 + a[3] if t == 9*i { fmt.Println(i) } } } 4.有 N 个人围成一圈顺序编号，从 1 号开始按 1、2、 3 顺序报数，报 3 者退出圈外，其余的人再从 1、2、 3 开始报数，报 3 的人再退出圈外，依次类推。请按退出顺序输出每个退出人的原序号。要求使用环形链表编程。\nC++\n#include \u0026lt;iostream\u0026gt; using namespace std; typedef struct LNode { int data; LNode *next; }LNode,*Linklist; int main() { int n,k; LNode *pre; cin\u0026gt;\u0026gt;n; if(n\u0026lt;1) { return 0; } //建立链表 Linklist L,r; L=new LNode; L-\u0026gt;data=1; L-\u0026gt;next=NULL; r=L; for(int i=2;i\u0026lt;=n;i++) { LNode *p; p=new LNode; p-\u0026gt;data=i; r-\u0026gt;next=p; r=p; } r-\u0026gt;next=L; //输出相应序号并释放空间 r=L; while(n) { k=1; while(k\u0026lt;3) { pre=r; r=r-\u0026gt;next; k++; }\tcout\u0026lt;\u0026lt;r-\u0026gt;data\u0026lt;\u0026lt;\u0026#34; \u0026#34;; pre-\u0026gt;next=r-\u0026gt;next; delete r; r=pre-\u0026gt;next; n--; } cout\u0026lt;\u0026lt;endl; return 0; } Go\npackage exam2001a import \u0026#34;fmt\u0026#34; //Node represents the node in a single linked list type Node struct { data int next *Node } //Order is used to sort according to certain rule func Order(n int) { //建立链表 if n \u0026lt; 1 { fmt.Println(\u0026#34;N is a wrong data\u0026#34;) return } var L = new(Node) var pre, r *Node L.data = 1 L.next = nil r = L for i := 2; i \u0026lt;= n; i++ { // var p = new(Node) // p.data = i // r.next = p // r = p //下方与注释部分实现功能一致 p := Node{ data: i, next: nil, } r.next = \u0026amp;p r = \u0026amp;p } r.next = L //输出序号并释放空间 r = L for n \u0026gt; 0 { k := 1 for ; k \u0026lt; 3; k++ { pre = r r = r.next } fmt.Printf(\u0026#34;%d \u0026#34;, r.data) pre.next = r.next r = pre.next n-- } } ","date":"2021-01-22T21:17:37+08:00","permalink":"https://ldsdsy.github.io/p/exam2001a/","title":"Exam2001A"},{"content":"1.输入任意 4 个字符(如：abcd)，并按反序输出(如：dcba)。\nC++\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; /* int main() { string s; cin\u0026gt;\u0026gt;s; reverse(s.begin(),s.end()); cout\u0026lt;\u0026lt;s\u0026lt;\u0026lt;endl; return 0; }*/ int main() { string s; cin\u0026gt;\u0026gt;s; for(int i=s.size()-1;i\u0026gt;=0;i--) { cout\u0026lt;\u0026lt;s[i]; } cout\u0026lt;\u0026lt;endl; } Golang\npackage exam2000 import ( \u0026#34;fmt\u0026#34; ) //Reverse is used to reverse a string. func Reverse() { var s1 string fmt.Scan(\u0026amp;s1) //Scan接收字符型变量时只接收整型,即ASCII码 for i := len(s1) - 1; i \u0026gt;= 0; i-- { fmt.Printf(\u0026#34;%c\u0026#34;, s1[i]) } } 2.设 a、b、c 均是 0 到 9 之间的数字，abc、bcc 是两个三位数，且有：abc+bcc=532。求满足条件的所有 a、b、c 的值。\nC++\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a,b, c; int x,y; for(a=0;a\u0026lt;10;a++) for(b=0;b\u0026lt;10;b++) for(c=0;c\u0026lt;10;c++) { x=a*100+b*10+c; y=b*100+c*10+c; if(x+y==532)\t{ cout\u0026lt;\u0026lt;a\u0026lt;\u0026lt;\u0026#39; \u0026#39;\u0026lt;\u0026lt;b\u0026lt;\u0026lt;\u0026#39; \u0026#39;\u0026lt;\u0026lt;c\u0026lt;\u0026lt;endl; } } return 0; } Golng\npackage exam2000 import \u0026#34;fmt\u0026#34; // Abc is used to find a special number. func Abc() { var a, b, c int var x, y int for a = 0; a \u0026lt; 10; a++ { for b = 0; b \u0026lt; 10; b++ { for c = 0; c \u0026lt; 10; c++ { x = a*100 + b*10 + c y = b*100 + c*10 + c if x+y == 532 { fmt.Println(a, b, c) } } } } } 3.一个数如果恰好等于它的各因子（该数本身除外）子和，如： 6=3+2+1，则称其为“完数”；若因子之和大于该数，则称其为“盈数”。求出 2 到 60 之间所有“完数”和“盈数”，并以如下形式输出： E: e1 e2 e3 \u0026hellip;\u0026hellip;(ei 为完数) G: g1 g2 g3 \u0026hellip;\u0026hellip;(gi 为盈数) 。\nC++\n#include \u0026lt;iostream\u0026gt; using namespace std; int main() { int a[61]={0}; for(int i=2;i\u0026lt;=60;i++) { int t=i; for(int j=i-1;j\u0026gt;0;j--) { if(i%j==0) { t-=j; } } if(t==0) { a[i]=1; } if(t\u0026lt;0) { a[i]=2; } } cout\u0026lt;\u0026lt;\u0026#34;E:\u0026#34;; for(int i=2;i\u0026lt;61;i++) { if(a[i]==1) cout\u0026lt;\u0026lt;i\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } cout\u0026lt;\u0026lt;endl; cout\u0026lt;\u0026lt;\u0026#34;G:\u0026#34;; for(int i=2;i\u0026lt;61;i++) { if(a[i]==2) cout\u0026lt;\u0026lt;i\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } cout\u0026lt;\u0026lt;endl; return 0; } Golang\npackage exam2000 import \u0026#34;fmt\u0026#34; //Eg is used to find \u0026#34;完数\u0026#34; and \u0026#34;溢数\u0026#34; between 2 and 60. func Eg() { var a [61]int var i, j, t int for i = 2; i \u0026lt;= 60; i++ { t = i for j = i - 1; j \u0026gt; 0; j-- { if i%j == 0 { t -= j } } if t == 0 { a[i] = 1 } if t \u0026lt; 0 { a[i] = 2 } } fmt.Print(\u0026#34;E:\u0026#34;) for i = 2; i \u0026lt; 61; i++ { if a[i] == 1 { fmt.Printf(\u0026#34;%d \u0026#34;, i) } } fmt.Println() fmt.Print(\u0026#34;G:\u0026#34;) for i = 2; i \u0026lt; 61; i++ { if a[i] == 2 { fmt.Printf(\u0026#34;%d \u0026#34;, i) } } fmt.Println() } 4.从键盘输入 4 个学生的数据( 包括姓名、年龄和成绩)，并存放在文件 sf1 上。从该文件读出这些数据，按成绩从高到底排序，并输出其中成绩次高者的所有数据。\nC++\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;fstream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; struct student { string name; int age; int score; }; bool cmp(student a,student b) { return a.score\u0026gt;b.score; } int main() { student s; student stu[4]; ofstream outfile; cout\u0026lt;\u0026lt;\u0026#34;input students\u0026#39; name,age,score (Ending with 00 00 00):\u0026#34;\u0026lt;\u0026lt;endl;\toutfile.open(\u0026#34;sf1.txt\u0026#34;); while(cin\u0026gt;\u0026gt;s.name\u0026gt;\u0026gt;s.age\u0026gt;\u0026gt;s.score) { if(s.name==\u0026#34;00\u0026#34;) break; outfile\u0026lt;\u0026lt;s.name\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;s.age\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;s.score\u0026lt;\u0026lt;endl; }\tifstream infile; infile.open(\u0026#34;sf1.txt\u0026#34;); for(int i=0;i\u0026lt;4;i++) { infile\u0026gt;\u0026gt;stu[i].name\u0026gt;\u0026gt;stu[i].age\u0026gt;\u0026gt;stu[i].score; } //you can sort by yourself or use sort() included in algorithm /*\tfor(int i=1;i\u0026lt;=3;i++) { for(int j=0;j\u0026lt;4-i;j++) { if(stu[j].score\u0026lt;stu[j+1].score) { s=stu[j]; stu[j]=stu[j+1]; stu[j+1]=s; } } }\t*/ sort(stu,stu+4,cmp); for(int i=0;i\u0026lt;4;i++) { cout\u0026lt;\u0026lt;stu[i].name\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;stu[i].age\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;stu[i].score\u0026lt;\u0026lt;endl; }\tcout\u0026lt;\u0026lt;\u0026#34;Next on the list is: \u0026#34;\u0026lt;\u0026lt;stu[1].name\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;stu[1].age\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;stu[1].score\u0026lt;\u0026lt;endl; outfile.close(); return 0; } Golang\npackage exam2000 import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;strings\u0026#34; ) type students struct { name string age int score int } //Info is used to process students\u0026#39; data func Info() { //数据写入文件 var s string var stu [4]students filepath := \u0026#34;D:/sf1.txt\u0026#34; file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_CREATE|os.O_RDONLY, 0666) if err != nil { fmt.Println(\u0026#34;文件创建打开失败\u0026#34;, err) } defer file.Close() //defer 后面的语句在最后 return 之前执行 write := bufio.NewWriter(file) fmt.Println(\u0026#34;input the info :MM_22_99\u0026#34;) for i := 0; i \u0026lt; 4; i++ { fmt.Scanln(\u0026amp;s) write.WriteString(s) write.WriteString(\u0026#34;\\n\u0026#34;) } write.Flush() //从文件读取数据 f, err := ioutil.ReadFile(filepath) if err != nil { fmt.Println(\u0026#34;read fail\u0026#34;, err) } //切割字符串，并赋值到相应的变量中 strArr := strings.Split(string(f), \u0026#34;\\n\u0026#34;) for i := 0; i \u0026lt; 4; i++ { y := strings.Split(string(strArr[i]), \u0026#34;_\u0026#34;) stu[i].name = y[0] stu[i].age, err = strconv.Atoi(y[1]) stu[i].score, err = strconv.Atoi(y[2]) } //排序 for i := 1; i \u0026lt; 4; i++ { for j := 0; j \u0026lt; 4-i; j++ { if stu[j].score \u0026lt; stu[j+1].score { stu[j], stu[j+1] = stu[j+1], stu[j] } } } //输出排序后结果 for i := 0; i \u0026lt; 4; i++ { fmt.Printf(\u0026#34;%s %d %d\\n\u0026#34;, stu[i].name, stu[i].age, stu[i].score) } fmt.Printf(\u0026#34;Next to the list is:%s %d %d\\n\u0026#34;, stu[1].name, stu[1].age, stu[1].score) } ","date":"2021-01-19T16:21:45+08:00","permalink":"https://ldsdsy.github.io/p/exam2000/","title":"Exam2000"},{"content":"Go 项目目录格式的一些问题 1.一个项目只有一个 mian.go 作为入口。所以如何解决一个项目里存在多个 xxx.go 的问题呢？如下为一种方式：\ndemo |___main.go |___exam |___01.go |___02.go //mian.go 作为整个项目入口，exam 为 package （包），exam 下面又包含多个函数，每个函数可在 main.go 中调用。 01.go\npackage exam import \u0026#34;fmt\u0026#34; //Add is used to calculate the sum of two numbers func Add(a,b int) int { return a+b } //Go 要求公有函数以大写字母开头，并且需要在函数上方书写用于说明函数用处的注释，注释必须以函数名开头。 main.go\npackage main import \u0026#34;demo/exam\u0026#34; func main() { sum := exam.Add(3,4) fmt.println(sum) } 2.尽量一开始养成编写测试函数的习惯。Go 语言拥有一套单元测试和性能测试系统，仅需要添加很少的代码就可以快速测试一段需求代码。\ngo test 命令，会自动读取源码目录下面名为 *_test.go 的文件，生成并运行测试用的可执行文件。\n单元测试源码文件可以由多个测试用例组成，每个测试用例函数需要以 Test 为前缀，例如：\npackage exam import \u0026#34;testing\u0026#34; func TestAdd(t *testing.T) { if res := addadd(3, 4); res != 7 { t.Error(\u0026#34;计算错误\u0026#34;) } } //测试用例文件不会参与正常源码编译，不会被包含到可执行文件中。 //测试用例文件使用 go test 指令来执行，没有也不需要 main() 作为函数入口。所有在以 _test 结尾的源码内以 Test 开头的函数会自动被执行。 //测试用例可以不传入 *testing.T 参数。 ","date":"2021-01-11T21:23:59+08:00","permalink":"https://ldsdsy.github.io/p/go_day03/","title":"Go_day03"},{"content":"1.安装好 Go 之后需人为设置一个 GOPATH 文件夹，这个目录用来存放 Go 源码， Go 的可运行文件，以及相应的编译之后的包文件。所以这个目录下面有三个子目录：src、bin、pkg。（例如：在 D 盘下新建一个名为 GOPATH 文件夹）\nsrc :存放源代码 pkg :编译后生成的包文件 bin :编译后生成的可执行文件 //一般，bin 和 pkg 目录可以不创建，go 命令会自动创建（如 go install），只需要创建 src 目录即可。 2.配置 GOPATH 的环境变量，进入用户变量新建\n变量 ：GOPATH 值 ：D:\\GOPATH 3.进入 vscode 安装 go 插件，然后就可以在 src 下面创建 Hello_world.go 并编译执行， vs 提示安装什么就安装什么。(相比较 GoLand , vs 免费且内存消耗小)\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } ","date":"2021-01-05T10:30:42+08:00","permalink":"https://ldsdsy.github.io/p/go_day02/","title":"GO_day02"},{"content":"Window 安装 Go 语言环境 进入以下网址 https://golang.google.cn/dl/ //选择 .msi 后缀的文件下载，下载完成后一路 next 安装即可。 进入 cmd $ go version //能显示版本号即安装成功 在终端依次执行 $ go env -w GO111MODULE=on $ go env -w GOPROXY=https://goproxy.cn,direct //第一条使源代码可存储在任意位置，第二条为国内代理 ","date":"2021-01-04T22:03:04+08:00","permalink":"https://ldsdsy.github.io/p/go_day01/","title":"Go_day01"},{"content":" Flutter 项目目录介绍： android: android 平台相关代码；\nios: ios 平台相关代码； lib: flutter 相关代码，开发者编写代码的所在地； test: 用于存放测试代码；\npubspec.yaml: 存放配置文件，一般是第三方库的依赖。\nFlutter 入口文件，入口方法： lib 目录下的 main.dart 就是 Flutter 的入口文件； main.dart :\nvoid main(){ runApp(MyApp); } 或者简写为： void main()=\u0026gt;runApp(MyApp()); //main()是 dart 的入口方法； //runApp()是 flutter 的入口方法； //MyApp 是一个自定义组件。 ","date":"2020-06-11T21:38:42+08:00","permalink":"https://ldsdsy.github.io/p/04_flutter%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/","title":"04_Flutter项目基础了解"},{"content":"1.安装 jdk：\n$ sudo apt-get install openjdk-8-jdk //JDK：java development kit （java 开发环境，包括 JVM，基础类库，开发工具） //JRE：java runtime environment （java 运行时环境） //JDK 包含 JRE $ java $ javac //查看是否安装完成 2.安装 Android Studio (有图形快捷键)：\n//下载并解压\nhttps://www.jetbrains.com/toolbox-app/\n//安装完成后，在 JetBrains Toolbox 中安装 AS 稳定版。\n//打开 AS 一路默认安装，先不要设置属性参数；\n//安装完成导入插件: Plugins 中安装 Dart 和 Flutter ;\n//重启 AS\n3.配置 Flutter 国内镜像：\n//选择镜像\nhttps://flutter-io.cn/\n$ sudo vim /etc/profile //文本末尾添加如下内容 export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn export PUB_HOSTED_URL=https://pub.flutter-io.cn //保存退出 $ source /etc/profile 4.输入 flutter doctor 检测安装配置是否完成。\n出现 ✗ Unable to locate Android SDK. 打开 AS -\u0026gt; Tools -\u0026gt; SDK Manager 安装 SDK 出现 ✗ Android licenses not accepted. $ flutter doctor --android-licenses //一路 y Adds: AS 中出现 adb bridge not found\n//进入 File -\u0026gt; Project instructure 菜单，Project 中能看到 No SDK;\n//选中 Modules -\u0026gt; flutter_app_android -\u0026gt; Dependencies -\u0026gt; Module SDK\n","date":"2020-05-28T07:06:45+08:00","permalink":"https://ldsdsy.github.io/p/03_flutterandroid%E6%90%AD%E5%BB%BA/","title":"03_FlutterAndroid搭建"},{"content":"安装Flutter：\n1.点击链接，下载压缩包：\nhttps://flutter.dev/docs/get-started/install/linux\n2.选一个心仪的文件夹(例如 development )，解压缩:\n$ cd ~/development $ tar xf ~/Downloads/flutter_linux_1.17.1-stable.tar.xz 3.设置环境变量（永久设置）：\n//profile 是开机就会自启的文件,打开后编辑 $ sudo vim /etc/profile //文件末尾添加如下内容，路径为上一步 Flutter 解压后所在的地方 export PATH=$PATH:/home/ldsdsy/development/flutter/bin //强制执行 profile 或 重启 $ source /etc/profile //查看是否添加成功 $ echo $PATH 4.输入 flutter 检测是否安装完成。\nAdds:\n//若出现 Error: Unable to find git in your PATH.\n$ sudo apt-get install git ","date":"2020-05-22T09:58:25+08:00","permalink":"https://ldsdsy.github.io/p/02_flutter%E5%AE%89%E8%A3%85/","title":"02_Flutter安装"},{"content":"安装 dart：（使用apt-get安装就不用配置环境变量）\n1.依次执行以下命令:\n$ sudo apt-get update $ sudo apt-get install apt-transport-https //科学上网 $ sudo sh -c \u0026#39;wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\u0026#39; $ sudo sh -c \u0026#39;wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list \u0026gt; /etc/apt/sources.list.d/dart_stable.list\u0026#39; 2.安装 Dart SDK:\n$ sudo apt-get update $ sudo apt-get install dart 3.输入 dart 检测是否安装完成。\nAdds:\n//查看 dart 安装在何处 $ which dart //查看系统环境变量 $ echo $PATH ","date":"2020-05-21T19:43:18+08:00","permalink":"https://ldsdsy.github.io/p/01_dart%E5%AE%89%E8%A3%85/","title":"01_dart安装"}]