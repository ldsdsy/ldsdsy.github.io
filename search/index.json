[{"content":"ClientSet —— in cluster out of cluster 是通过集群的配置文件让外部的应用可以操作集群内的资源对象， in cluster 本身是把程序作为一个 pod 运行在集群内部，通过 RBAC 来授权使其能够获取集群的资源对象。\n一，大致流程 编写好 go 程序，编译为二进制文件，打包成镜像并推送，然后开启 pod 运行镜像同时需要授予权限，使其有权获取资源信息。\n二，编写程序 1, mian.go\npackage main import ( \u0026quot;context\u0026quot; \u0026quot;fmt\u0026quot; metav1 \u0026quot;k8s.io/apimachinery/pkg/apis/meta/v1\u0026quot; \u0026quot;k8s.io/client-go/kubernetes\u0026quot; \u0026quot;k8s.io/client-go/rest\u0026quot; ) func main() { // creates the in-cluster config config, err := rest.InClusterConfig() if err != nil { panic(err.Error()) } // create the clientset clientset, err := kubernetes.NewForConfig(config) if err != nil { panic(err.Error()) } // get pod pods, err := clientset.CoreV1().Pods(\u0026quot;\u0026quot;).List(context.TODO(), metav1.ListOptions{}) if err != nil { panic(err.Error()) } for _, pod := range pods.Items { fmt.Printf(\u0026quot;pod.name:%v\\n\u0026quot;, pod.Name) } } 2, Dockerfile\n# 基础镜像 FROM debian # 把当前目录下编译得到的二进制 app 复制到工作目录 /app 下 COPY ./app /app # 执行工作目录里的 app ENTRYPOINT /app # 文件名一定是 Dockerfile ,不要任何后缀，也不要全小写 3, 编译二进制文件\n$ go build -o ./app . 4, 打包镜像\n$ docker build . -t app 5, 给镜像加 tag\ndocker tag **** bocloud-bj.io:5000/app:1.0 // **** 是镜像 ID 6, 推送镜像\ndocker push bocloud-bj.io:5000/app:1.0 三，开启 pod ，运行 image 1, 给 pod 授权 在 ClusterRole 里定义 pod 有哪些权利，再用 ClusterRoleBinding 去绑定 ClusterRole 和 service account，SA 会为 pod 里的进程提供必要的身份证明。\n  ClusterRole.yaml  --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRole metadata: name: pod-get rules: - apiGroups: [\u0026quot;\u0026quot;] resources: [\u0026quot;pods\u0026quot;] verbs: [\u0026quot;get\u0026quot;, \u0026quot;watch\u0026quot;, \u0026quot;list\u0026quot;] ClusterRoleBinding.yaml  --- apiVersion: rbac.authorization.k8s.io/v1 kind: ClusterRoleBinding metadata: name: pod-get-rbac subjects: - kind: ServiceAccount namespace: default name: clientset-sa roleRef: kind: ClusterRole name: pod-get apiGroup: rbac.authorization.k8s.io sa.yaml  --- apiVersion: v1 kind: ServiceAccount metadata: name: clientset-sa namespace: default deploy.yaml  --- apiVersion: apps/v1 kind: Deployment metadata: name: clientset-deploy spec: replicas: 1 selector: matchLabels: app: incluster template: metadata: labels: app: incluster spec: containers: - name: webhook image: bocloud-bj.io:5000/app:1.0 imagePullPolicy: Always serviceAccountName: clientset-sa 四，打印日志 $ kubectl logs **** // **** 是 pod_id [centos@ml-k8s-1 ~]$ kubectl logs clientset-deploy-854d7f648c-gcj4v pod.name:nfs-client-provisioner-6d9b86b854-pcb9v pod.name:webhook-deploy-854d7f648c-gcj4v pod.name:coredns-545d6fc579-2kn79 pod.name:coredns-545d6fc579-mpzqg pod.name:etcd-ml-k8s-1.novalocal pod.name:fabric-node-2gnjf pod.name:fabric-node-s92ds // Note: 因为节点是 Linux 系统，所以在编译二进制 app 时也要在 Linux 环境下。\n","date":"2021-07-17T09:54:41-05:00","permalink":"https://ldsdsy.github.io/p/k8s_clientset02/","title":"K8s_Clientset02"},{"content":"Clientset 访问 k8s 集群资源对象 Client-go 是一个调用 k8s 集群资源对象 API 的客户端，及通过 Client-go 实现对资源对象的增删改查（CRUD）.四类客户端：RestClient, ClientSet, DynamicClient, DiscoveryClient（此处只介绍 ClientSet 的用法）。\n 一，Clientset —— out of cluster 通过 config 文件让集群外部的应用可以访问到集群内部的资源对象 。\n1, 配置 config 文件（把 master 上的配置文件复制到本地） // 在本地执行 $ scp -r centos@10.20.9.60:/home/centos/.kube /home/ldsdsy/ // 此时 ~ 目录下会多一个 .kube 文件夹，里面包含 config 文件 2, 编写代码 package main import ( \u0026quot;context\u0026quot; \u0026quot;flag\u0026quot; \u0026quot;fmt\u0026quot; \u0026quot;path/filepath\u0026quot; metav1 \u0026quot;k8s.io/apimachinery/pkg/apis/meta/v1\u0026quot; \u0026quot;k8s.io/client-go/kubernetes\u0026quot; \u0026quot;k8s.io/client-go/tools/clientcmd\u0026quot; \u0026quot;k8s.io/client-go/util/homedir\u0026quot; ) func main() { var kubeconfig *string // 默认会从 ~/.kube/config 路径下获取配置文件 if home := homedir.HomeDir(); home != \u0026quot;\u0026quot; { kubeconfig = flag.String(\u0026quot;kubeconfig\u0026quot;, filepath.Join(home, \u0026quot;.kube\u0026quot;, \u0026quot;config\u0026quot;), \u0026quot;(optional) absolute path to the kubeconfig file\u0026quot;) } else { kubeconfig = flag.String(\u0026quot;kubeconfig\u0026quot;, \u0026quot;\u0026quot;, \u0026quot;absulute path to the kubeconfig file\u0026quot;) } // 把用户传递的命令行参数解析为对应变量的值 flag.Parse() // 使用 k8s.io/client-go/tools/clientcmd 生成 config 的对象 config, err := clientcmd.BuildConfigFromFlags(\u0026quot;\u0026quot;, *kubeconfig) if err != nil { panic(err.Error()) } // 使用 k8s.io/client-go/kubernetes 生成一个 ClientSet 的客户端 // 客户端生成后，就可以使用这个客户端与 k8s API server 进行交互了，进行 CRUD 操作。 clientset, err := kubernetes.NewForConfig(config) if err != nil { panic(err.Error()) } // get pod pods, err := clientset.CoreV1().Pods(\u0026quot;\u0026quot;).List(context.TODO(), metav1.ListOptions{}) if err != nil { panic(err.Error()) } for _, pod := range pods.Items { fmt.Printf(\u0026quot;pod.name:%v\\n\u0026quot;, pod.Name) } } 3, 运行 $ go run main.go pod.name:nfs-client-provisioner-6d9b86b854-pcb9v pod.name:coredns-545d6fc579-2kn79 pod.name:coredns-545d6fc579-mpzqg pod.name:etcd-ml-k8s-1.novalocal pod.name:fabric-node-2gnjf pod.name:fabric-node-s92ds ··· ","date":"2021-07-05T23:02:15+08:00","permalink":"https://ldsdsy.github.io/p/k8s_clientset01/","title":"K8s_Clientset01"},{"content":"静态加密 Secret 数据 因为 secret 默认存储为 base64 编码的非加密字符串，所以启用静态加密来增加安全性。\n1 创建配置文件 encrypt.conf  配置文件样例如下:  apiVersion: apiserver.config.k8s.io/v1 kind: EncryptionConfiguration resources: - resources: - secrets providers: - aescbc: keys: - name: key1 secret: \u0026lt;BASE 64 ENCODED SECRET\u0026gt; - identity: {} // resources.resources 里的内容就是要加密的对象，此处为 secrets; // providers 里是加解密的实际提供者 —— identity, aescbc, secretbox, aesgcm, kms. 综合对比，aescec 最合适。 // 加密时会使用 providers 里的第一个来加密，解密时会从头到尾尝试直至成功解密。 // identity 就是明文，其余都为加密算法。 // 此处的配置文件最后是 identity，是为了服务在此之前已经存储了的明文 secrets 。 需生成随机密钥放入 secret 字段中，直接进行如下操作：  [centos@ml-k8s-1 ~]$ head -c 32 /dev/urandom | base64 7unrE0P6q9DmlqGVeZ+k02d2eNaAgveFC01V+gV3VYc= // 生成了一个 32 字节的随机密钥并进行了 base64 编码 配置文件命名为 encrypt.conf , 并存放在 /etc/kubernetes/pki/  [centos@ml-k8s-1 ~]$ cd /etc/kubernetes/pki/ [centos@ml-k8s-1 pki]$ ls apiserver-etcd-client.crt apiserver-kubelet-client.crt apiserver.crt ca.crt encrypt.conf front-proxy-ca.crt front-proxy-client.crt sa.key apiserver-etcd-client.key apiserver-kubelet-client.key apiserver.key ca.key etcd front-proxy-ca.key front-proxy-client.key sa.pub 2 设置 kube-apiserver  增加 \u0026ndash;encryption-provider-config ，指向 encrypt.conf  [centos@ml-k8s-1 ~]$ cd /etc/kubernetes/manifests [centos@ml-k8s-1 manifests]$ ls etcd.yaml kube-apiserver.yaml kube-controller-manager.yaml kube-scheduler.yaml [centos@ml-k8s-1 manifests]$ sudo vim kube-apiserver.yaml apiVersion: v1 kind: Pod metadata: annotations: kubeadm.kubernetes.io/kube-apiserver.advertise-address.endpoint: 10.20.9.60:6443 creationTimestamp: null labels: component: kube-apiserver tier: control-plane name: kube-apiserver namespace: kube-system spec: containers: - command: - kube-apiserver - --advertise-address=10.20.9.60 - --allow-privileged=true - --authorization-mode=Node,RBAC - --client-ca-file=/etc/kubernetes/pki/ca.crt - --enable-admission-plugins=NodeRestriction - --enable-bootstrap-token-auth=true - --etcd-cafile=/etc/kubernetes/pki/etcd/ca.crt - --etcd-certfile=/etc/kubernetes/pki/apiserver-etcd-client.crt - --etcd-keyfile=/etc/kubernetes/pki/apiserver-etcd-client.key - --etcd-servers=https://127.0.0.1:2379 - --insecure-port=0 - --kubelet-client-certificate=/etc/kubernetes/pki/apiserver-kubelet-client.crt - --kubelet-client-key=/etc/kubernetes/pki/apiserver-kubelet-client.key - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname - --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.crt - --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client.key - --requestheader-allowed-names=front-proxy-client - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt - --requestheader-extra-headers-prefix=X-Remote-Extra- - --requestheader-group-headers=X-Remote-Group - --requestheader-username-headers=X-Remote-User - --secure-port=6443 - --service-account-issuer=https://kubernetes.default.svc.cluster.local - --service-account-key-file=/etc/kubernetes/pki/sa.pub - --service-account-signing-key-file=/etc/kubernetes/pki/sa.key - --service-cluster-ip-range=10.96.0.0/12 - --tls-cert-file=/etc/kubernetes/pki/apiserver.crt - --tls-private-key-file=/etc/kubernetes/pki/apiserver.key - --encryption-provider-config=/etc/kubernetes/pki/encrypt.conf // 若使用 kubeadm 搭建的集群，此时会自动重启 API server , 否则需要手动重启。 3 验证数据已被加密 重新启动 kube-apiserver 后，任何新创建或更新的 secret 在存储时都应该被加密\n 在 default 命名空间里创建一个名为 secret1 的 secret ：  [centos@ml-k8s-1 ~]$ kubectl create secret generic secret1 -n default --from-literal=mykey=mydata secret/secret1 created [centos@ml-k8s-1 ~]$ kubectl get secret NAME TYPE DATA AGE default-token-44r9r kubernetes.io/service-account-token 3 18h secret1 Opaque 1 23s 使用 etcdctl 命令行，从 etcd 中读取 secret ：  [centos@ml-k8s-1 etcd]$ sudo ETCDCTL_API=3 ./etcdctl --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/apiserver-etcd-client.crt --key=/etc/kubernetes/pki/apiserver-etcd-client.key get /registry/secrets/default/secret1 | hexdump -C 00000000 2f 72 65 67 69 73 74 72 79 2f 73 65 63 72 65 74 |/registry/secret| 00000010 73 2f 64 65 66 61 75 6c 74 2f 73 65 63 72 65 74 |s/default/secret| 00000020 31 0a 6b 38 73 3a 65 6e 63 3a 61 65 73 63 62 63 |1.k8s:enc:aescbc| 00000030 3a 76 31 3a 6b 65 79 31 3a cb d8 67 c6 67 21 07 |:v1:key1:..g.g!.| 00000040 e6 e7 f8 97 01 4a 76 24 2c bb 23 3f 9c 6f 4c 10 |.....Jv$,.#?.oL.| 00000050 44 ce a9 d9 a4 db 1d b3 76 6c d2 a2 dc 41 7e 55 |D.......vl...A~U| 00000060 b2 da fc c0 6d fb 0b 79 0c 3e 87 70 6e 5b 31 5d |....m..y.\u0026gt;.pn[1]| 00000070 f7 8d 7f de f8 ec 4d 2d ec eb c5 a2 3a 80 95 4f |......M-....:..O| 00000080 b0 de 3b e1 83 f4 76 32 f5 d4 19 d2 96 6a 46 df |..;...v2.....jF.| 00000090 03 ca d4 e1 3d 9d 48 6e 81 61 ec 18 04 b2 73 d2 |....=.Hn.a....s.| 000000a0 cd f8 1b e5 bd 2f cc 0e 68 b5 24 d7 7a 44 d2 8e |...../..h.$.zD..| 000000b0 6c 2c fb 3a 43 e8 7c 37 c8 bd e6 06 dd 29 04 0d |l,.:C.|7.....)..| 000000c0 aa 71 c1 75 8d 3d de 39 d4 15 26 c5 e9 af a9 c4 |.q.u.=.9..\u0026amp;.....| 000000d0 2d c6 4d 1a 36 7c 4d ec 10 50 20 69 dc 28 49 d2 |-.M.6|M..P i.(I.| 000000e0 af e4 10 44 f2 9e ad 98 b9 f8 43 d3 74 4f 1a 05 |...D......C.tO..| 000000f0 13 d0 72 cf f4 60 12 26 af 47 ee a7 de 1d 9f e2 |..r..`.\u0026amp;.G......| 00000100 41 ba 33 2c 45 3c 98 f9 0c d8 3d 3f 90 bd 06 be |A.3,E\u0026lt;....=?....| 00000110 64 9a f4 d9 48 94 93 21 f1 ed 54 e7 be 59 31 d8 |d...H..!..T..Y1.| 00000120 1b 40 e0 9b 51 14 6b 9a 96 ed 7a 42 95 20 b6 b5 |.@..Q.k...zB. ..| 00000130 5b 02 99 8d 3a 66 c1 1d 19 0a |[...:f....| 0000013a // cacert, cert, key 是用来连接 etcd 服务的证书 // hexdump 命令一般用来查看“二进制”文件的十六进制编码 // 数据头部出现 k8s:enc:aescbc:v1: ,说明数据已经被正确加密，且使用的是 aescbc 算法，密钥为 key1 验证 secret 是否被正确解密：  [centos@ml-k8s-1 etcd]$ kubectl get secrets secret1 -o yaml apiVersion: v1 data: mykey: bXlkYXRh kind: Secret metadata: creationTimestamp: \u0026#34;2021-05-06T03:09:25Z\u0026#34; name: secret1 namespace: default resourceVersion: \u0026#34;89523\u0026#34; uid: dc8e6c8d-fb3c-47b3-b2bb-ed5014fb3779 type: Opaque // mykey: bXlkYXRh ,数据已被加密 // 加密插件只是加密了 etcd 中保存的数据,执行这类 kubectl get secrets mysecret -o yaml 命令时，kube-apiserver 在从 etcd 中取出数据的时候已经自动解密了 // 此时用 decode 即可得到数据 [centos@ml-k8s-1 etcd]$ echo -n \u0026#34;bXlkYXRh\u0026#34; | base64 --decode mydata 4 确保所有 secret 都被加密  读取所有 Secret，然后通过更新来实现全部加密  [centos@ml-k8s-1 etcd]$ kubectl get secrets --all-namespaces -o json | kubectl replace -f - secret/default-token-44r9r replaced secret/secret1 replaced secret/default-token-d49sg replaced secret/default-token-dhpj7 replaced secret/attachdetach-controller-token-xfvx9 replaced secret/bootstrap-signer-token-4z576 replaced secret/bootstrap-token-rliyei replaced secret/certificate-controller-token-6g4hj replaced secret/clusterrole-aggregation-controller-token-vzn58 replaced secret/coredns-token-bkmbn replaced secret/cronjob-controller-token-x45gt replaced secret/daemon-set-controller-token-skxtk replaced secret/default-token-plx8s replaced secret/deployment-controller-token-77g4q replaced secret/disruption-controller-token-mw4lq replaced secret/endpoint-controller-token-b5dqn replaced secret/endpointslice-controller-token-26rcq replaced secret/endpointslicemirroring-controller-token-zgjgs replaced secret/ephemeral-volume-controller-token-f9njw replaced secret/expand-controller-token-2k6v2 replaced secret/fabric-etcd-secrets replaced secret/fabric-node-serviceaccount-token-7b6hj replaced secret/generic-garbage-collector-token-48bvm replaced secret/horizontal-pod-autoscaler-token-ls2v4 replaced secret/job-controller-token-nl87g replaced secret/kube-proxy-token-xp7gj replaced secret/namespace-controller-token-wdrs5 replaced secret/node-controller-token-9gs5c replaced secret/persistent-volume-binder-token-qnclk replaced secret/pod-garbage-collector-token-c2k7v replaced secret/pv-protection-controller-token-slkm5 replaced secret/pvc-protection-controller-token-wnxbw replaced secret/replicaset-controller-token-4pkz4 replaced secret/replication-controller-token-vw268 replaced secret/resourcequota-controller-token-8g9ql replaced secret/root-ca-cert-publisher-token-fkzln replaced secret/service-account-controller-token-9686g replaced secret/service-controller-token-wc49g replaced secret/statefulset-controller-token-jxcp8 replaced secret/token-cleaner-token-rp76n replaced secret/ttl-after-finished-controller-token-9rgmc replaced secret/ttl-controller-token-59wtj replaced secret/webhook-server-cert replaced [centos@ml-k8s-1 etcd]$ secret/attachdetach-controller-token-xfvx9 replaced secret/bootstrap-signer-token-4z576 replaced secret/bootstrap-token-rliyei replaced secret/certificate-controller-token-6g4hj replaced secret/clusterrole-aggregation-controller-token-vzn58 replaced secret/coredns-token-bkmbn replaced secret/cronjob-controller-token-x45gt replaced secret/daemon-set-controller-token-skxtk replaced secret/default-token-plx8s replaced secret/deployment-controller-token-77g4q replaced secret/disruption-controller-token-mw4lq replaced secret/endpoint-controller-token-b5dqn replaced secret/endpointslice-controller-token-26rcq replaced secret/endpointslicemirroring-controller-token-zgjgs replaced secret/ephemeral-volume-controller-token-f9njw replaced secret/expand-controller-token-2k6v2 replaced secret/fabric-etcd-secrets replaced secret/fabric-node-serviceaccount-token-7b6hj replaced secret/generic-garbage-collector-token-48bvm replaced secret/horizontal-pod-autoscaler-token-ls2v4 replaced secret/job-controller-token-nl87g replaced secret/kube-proxy-token-xp7gj replaced secret/namespace-controller-token-wdrs5 replaced secret/node-controller-token-9gs5c replaced secret/persistent-volume-binder-token-qnclk replaced secret/pod-garbage-collector-token-c2k7v replaced secret/pv-protection-controller-token-slkm5 replaced secret/pvc-protection-controller-token-wnxbw replaced secret/replicaset-controller-token-4pkz4 replaced secret/replication-controller-token-vw268 replaced secret/resourcequota-controller-token-8g9ql replaced secret/root-ca-cert-publisher-token-fkzln replaced secret/service-account-controller-token-9686g replaced secret/service-controller-token-wc49g replaced secret/statefulset-controller-token-jxcp8 replaced secret/token-cleaner-token-rp76n replaced secret/ttl-after-finished-controller-token-9rgmc replaced secret/ttl-controller-token-59wtj replaced secret/webhook-server-cert replaced 5 解密所有 secrets  修改配置文件 encrypt.conf ，把 provider 里的 identity 修改为第一项  [centos@ml-k8s-1 pki]$ sudo vim encrypt.conf apiVersion: apiserver.config.k8s.io/v1 kind: EncryptionConfiguration resources: - resources: - secrets providers: - identity: {} - aescbc: keys: - name: key1 secret: 7unrE0P6q9DmlqGVeZ+k02d2eNaAgveFC01V+gV3VYc= 再通过更新来解密  [centos@ml-k8s-1 pki]$ kubectl get secrets --all-namespaces -o json | kubectl replace -f - secret/default-token-44r9r replaced secret/secret1 replaced secret/default-token-d49sg replaced secret/default-token-dhpj7 replaced secret/attachdetach-controller-token-xfvx9 replaced secret/bootstrap-signer-token-4z576 replaced secret/bootstrap-token-rliyei replaced secret/certificate-controller-token-6g4hj replaced secret/clusterrole-aggregation-controller-token-vzn58 replaced secret/coredns-token-bkmbn replaced secret/cronjob-controller-token-x45gt replaced secret/daemon-set-controller-token-skxtk replaced secret/default-token-plx8s replaced secret/deployment-controller-token-77g4q replaced secret/disruption-controller-token-mw4lq replaced secret/endpoint-controller-token-b5dqn replaced secret/endpointslice-controller-token-26rcq replaced secret/endpointslicemirroring-controller-token-zgjgs replaced secret/ephemeral-volume-controller-token-f9njw replaced secret/expand-controller-token-2k6v2 replaced secret/fabric-etcd-secrets replaced secret/fabric-node-serviceaccount-token-7b6hj replaced secret/generic-garbage-collector-token-48bvm replaced secret/horizontal-pod-autoscaler-token-ls2v4 replaced secret/job-controller-token-nl87g replaced secret/kube-proxy-token-xp7gj replaced secret/namespace-controller-token-wdrs5 replaced secret/node-controller-token-9gs5c replaced secret/persistent-volume-binder-token-qnclk replaced secret/pod-garbage-collector-token-c2k7v replaced secret/pv-protection-controller-token-slkm5 replaced secret/pvc-protection-controller-token-wnxbw replaced secret/replicaset-controller-token-4pkz4 replaced secret/replication-controller-token-vw268 replaced secret/resourcequota-controller-token-8g9ql replaced secret/root-ca-cert-publisher-token-fkzln replaced secret/service-account-controller-token-9686g replaced secret/service-controller-token-wc49g replaced secret/statefulset-controller-token-jxcp8 replaced secret/token-cleaner-token-rp76n replaced secret/ttl-after-finished-controller-token-9rgmc replaced secret/ttl-controller-token-59wtj replaced secret/webhook-server-cert replaced ","date":"2021-05-06T21:41:20+08:00","permalink":"https://ldsdsy.github.io/p/k8s_%E9%9D%99%E6%80%81%E5%8A%A0%E5%AF%86/","title":"K8s_静态加密"},{"content":"Docker 学习笔记 Docker 一种生成容器的工具。 一，镜像 Docker 镜像是一种特殊的文件系统，是一个静态概念，是容器的底层。\n1，获取镜像： $ docker pull *** 2，显示镜像： $ docker image ls // 显示顶层镜像 $ docker image ls -a // 显示中间层镜像 $ docker image ls ** // 显示镜像 ** $ docker image ls -f since=** // 显示 ** 之后建立的镜像 $ docker image ls -f before=** // 显示 ** 之前的建立的镜像 $ docker image ls -f dangling=true // 显示虚悬镜像 $ docker image prune // 删除虚悬镜像 // 在发布镜像新版本时，旧镜像名转移到新镜像上，从而旧镜像出现仓库名，标签均为 \u0026lt;none\u0026gt; 情况，成为虚悬镜像。 $ docker image ls -q // 只显示镜像 ID $ docker image ls --format \u0026quot;{{.ID}}:{{.Repository}\u0026quot; // 按照 ID:仓库名 的格式显示 $ docker image ls --format \u0026quot;table {{.ID}}\\t{{.Repository}}\\t{{.Tag}}\u0026quot; // 按照 ID 仓库名 标签 的表格形式显示 3，删除镜像 $ docker image rm ** // ** 可以是 ID，镜像名，摘要 $ docker image rm $(docker image ls -q redis) // 删除所有仓库名为 redis 的镜像 4，定制镜像（Dockerfile） Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。 二，容器 容器是独立运行的一个或一组应用，以及它们的运行态环境,是一个动态概念。\n1，启动容器： 1) 基于镜像新建容器并启动： $ docker run -t -i ubuntu /bin/bash // -t 选项让 Docker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上， -i 则让容器的标准输入保持打开 2) 启动已终止的容器： $ docker container start [id] // 重启容器 2，运行容器： -d：让容器在后台运行，而不是在当前宿主机下输出结果。例如： $ docker run -d ubuntu /bin/sh -c \u0026quot;echo hello world;\u0026quot; // 此时会返回一个唯一的 id，可借助 id 查看输出信息 $ docker logs [id] 3，终止容器： $ docker container ls // 显示运行中的容器 $ docker container ls -a // 显示所有容器 $ docker container stop [id] // 终止容器 $ docker container restart [id] // 重启容器 4，进入容器： 1) attach: $ docker attach [id] // exit 会导致容器停止 2) exec: $ docker exec -it [id] bash // -i:交互式 ，-t:终端 // exit 不会导致容器停止 5，删除容器： $ docker container rm [id] // 删除终止态的容器 $ docker container rm -f [id] // 删除运行中的容器 $ docker container prune // 删除所有终止态的容器 三，仓库 集中存放镜像的地方\n","date":"2021-04-21T16:55:52+08:00","permalink":"https://ldsdsy.github.io/p/docker/","title":"Docker"},{"content":"1.字符串由“碎片”组成，每个碎片为单一字母组成，如：“aaabbccaddd” 由碎片 \u0026ldquo;aaa\u0026rdquo;,\u0026ldquo;bb\u0026rdquo;,\u0026ldquo;cc\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;ddd\u0026rdquo; 组成。\n输入：一个字符串\n输出：按字典输出碎片，每个碎片一行，相同的碎片只输出一次\nC++\n#include\u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { vector\u0026lt;string\u0026gt; v; string s,t; int i; cin\u0026gt;\u0026gt;s; t=s[0]; for(i=1;i\u0026lt;s.size();i++) { if(s[i]==s[i-1]) { t+=s[i]; } else { v.push_back(t); t=s[i]; } } v.push_back(t); sort(v.begin(),v.end()); cout\u0026lt;\u0026lt;v[0]\u0026lt;\u0026lt;endl; for(i=1;i\u0026lt;v.size();) { if(v[i]==v[i-1]) { i++;\t} else { cout\u0026lt;\u0026lt;v[i]\u0026lt;\u0026lt;endl; i++; }\t} return 0; } 2.求哈夫曼树的最短带权路径长度。\n输入：第一行为权值个数 n ，第二行是 n 个权值\n输出：最短带权路径长度\nC++\n#include\u0026lt;bits/stdc++.h\u0026gt;using namespace std; int main() { vector\u0026lt;int\u0026gt; v; int n,t,sum=0; cin\u0026gt;\u0026gt;n; while(n--) { cin\u0026gt;\u0026gt;t; v.push_back(t); } while(v.size()!=1) { sort(v.begin(),v.end()); t=v[0]+v[1]; sum+=t; v.erase(v.begin(),v.begin()+2); v.push_back(t); } cout\u0026lt;\u0026lt;sum\u0026lt;\u0026lt;endl; return 0; } ","date":"2021-03-20T12:16:20+08:00","permalink":"https://ldsdsy.github.io/p/exam2019/","title":"Exam2019"},{"content":"应用层 1 网络应用模型 1. 客户/服务器模型（C/S）： 有一个总是打开的主机称为服务器，它服务于许多来自其他称为客户机的主机请求。 2. P2P 模型： 每台机器既是服务器又是客户机。 2 域名系统（DNS） 用于把主机名转换为 IP 地址；采用客户/服务器模型，其协议运行在 UDP 之上，使用 53 号端口。 从概念上分为是三部分：层次域名空间，域名服务器，解析器。 1. 域名服务器分类： 1）根域名服务器：知道所有顶级域名服务器的 IP 地址； 2）顶级域名服务器：负责管理在其服务器注册的所有二级域名； 3）授权域名服务器：能够将其管理的主机名转换为该主机的 IP 地址； 4）本地域名服务器：本地网络提供商负责的域名服务器。 2. 查询方式： 1）递归查询： 主机 \u0026lt;——\u0026gt; 本地域名服务器 \u0026lt;——\u0026gt; 根域名服务器 \u0026lt;——\u0026gt; 顶级域名服务器 \u0026lt;——\u0026gt; 权限域名服务器 2）递归与迭代相结合： 主机自身一次询问以上四种服务器。 3 文件传输协议（FTP） FTP 采用 C/S 工作方式，使用 TCP 可靠传输； 其服务器分为：一个主进程负责接受新的请求，若干从属进程负责处理单个请求。 1. 控制连接： 服务器监听 21 号端口，等待客户连接，此连接为控制连接，传输控制信息（7 位 ASCII 格式），此连接在整个会话过程保持打开。 2. 数据连接： 此连接用来连接客户端和服务器端的数据传送进程，传送完毕则关闭连接并结束运行。 4 电子邮件 一个邮件系统包含：用户代理，邮件服务器，协议。 1. 过程：发送方使用 SMTP 协议发邮件到发送方邮件服务器，此服务器再用 SMTP 发送到接收方的邮件服务器，接收方用 POP3 读取邮件到本地。 2. STMP : 用于往外发邮件，运行在 TCP 上，使用 25 号端口。 3. POP3 : 用于接受邮件，运行在 TCP 上，使用 110 号端口。 5 万维网 万维网是一个资料空间，每一样资料都有“统一资源定位符”来标识，通过 HTTP 传输。 1. HTTP : 运行在 TCP 上，使用 80 端口； 无状态，同一客户第二次访问仍和第一次访问时页面一样； 有非持久连接，也有持节连接； ","date":"2021-03-08T12:50:23+08:00","permalink":"https://ldsdsy.github.io/p/network_six/","title":"Network_six"},{"content":"传输层 传输层为运行在不同主机上的进程提供逻辑通信\n1 提供的服务 1. 功能： 1）提供应用进程之间的逻辑通信（端到端的通信）。 2）复用和分用 复用：不同的进程使用同一个传输协议传送数据； 分用：接收方能把一同到来的数据正确交付到各自的目的进程。 3）差错检错：包括首部和数据部分（网络层只检测 IP 数据报的首部）。 4）提供两种协议：面向连接的 TCP 和无连接的 UDP(网络层只能提供其中一种)。 2. 寻址和端口： 1）端口：是传输层的服务访问点，类似网络层的 IP 地址（端口标识应用进程）。 2）端口号 长度 16bit，能表示 65536 个端口号； 服务器使用的端口号： 一类是熟知端口号（0~1023），这些端口号是分配给 TCP/IP 最重要的一些应用进程； 一类是登记端口号（1024~49151），这些端口号必须在 IANA 登记，以防重复。 客户端使用的端口号：49152~65535，仅在客户进程运行时才动态选择。 3）套接字：就是一个通信端点，即 ：主机 IP 地址 + 端口号，唯一标识了一台主机上的一个应用（进程）。 3. 无连接服务和面向连接服务： 1）面向连接服务：通信前先建立连接，通信中整个连接情况一直被实时监控管理，通信结束后再释放连接。 2）无连接服务：不需要提前建立连接，直接将信息发送到出去，尽力送达。 3）TCP: 面向连接的传输控制协议； 提供一条全双工的可靠逻辑信道； 不提供组播和广播； 适用于可靠性高的场合（FTP,HTTP,TELNET）. 4) DUP: 无连接的用户数据报协议； 在 IP 之上仅提供：多路复用和对数据的检查。 速度较快，实时性较好，适用于小文件传输协议（DNS,SNMP）. 2 UDP 协议 1. UDP 数据报： 1）无需建立连接，因此不会引入建立连接的时延； 2）无连接状态，因此也免除了去维护连接的麻烦； 3）分组首部开销小，才 8B,而 TCP 首部是 20B； 4）常用于一次性传输较少数据的网络应用或是多媒体应用； 5）尽力交付不代表不可靠，可靠性工作在应用层完成； 6）报文是 UDP 数据报最小处理单位。 2. UDP 首部格式： 首部 8B，有 4 个字段，每个字段 2B。 1）源端口：源端口号，需要对方回信时选用，不需要是全 0； 2）目的端口：目的端口号，在终点交付报文时必须用到； 3）长度：UDP 数据报长度（首部+数据），最小为 8（仅有首部）； 4）校验和：检验整个 UDP 数据报是否有误，错则丢弃，不想校验时，全置 0. 5）接收方发现端口号错误时，丢弃该报文，并由 ICMP 返回“端口不可达”差错报文。 3. UDP 检验： 引入 12B 的伪首部来计算校验和，检错能力不强，但简单，快捷。 1）校验方法：二进制反码运算求和再取反。 2）过程： 发送方：全 0 填入校验和字段并添加伪首部； 把 UDP 数据报视为多个 16 比特的字段，若非偶数个字节还要在末尾添加一个全 0 字节； 二进制反码求和，并把和写入校验和字段。 接收方：收到的数据报加上伪首部二进制反码计算和； 若不是偶数个字节仍要补 0； 结果全为 1 表示无差错，否则有错丢弃。 3 TCP 协议 1. 特点： TCP 是在不可靠的 IP 层上实现的可靠传输协议，主要解决可靠，有序，无丢失，不重复的问题。 1）是面向连接的； 2）每条 TCP 连接只有两个端点（点对点）； 3）全双工通信，两端都有发送缓存和接收缓存； 4）面向字节流，TCP 把应用程序交付的数据视为一连串无结构的字节流。 2. TCP 报文段： 1）首部前 20B 是固定的，后面的 4N 字节是可选项； 2）TCP 数据报既可运载数据，又可建立连接，释放连接和应答； 3）序号字段：其值表示本报文段所发的数据的第一个字节的序号； 4）确认号字段：是期望收到对方的下一个报文段数据的第一个字节号； 5）数据偏移：即首部长度； 6）紧急位 URG：1 表示紧急指针字段有效，第一个字节到紧急指针所指字节就是紧急数据； 7）确认位 ACK：1 确认号有效，0 无效； 8）推送位 PSH：为 1 时，应尽快交付给接受进程，而不等整个缓存存满再提交； 9）复位位 RST：为 1 时表明出现严重错误，必须释放连接再重新建立连接； 10）同步位 SYN：为 1 表示这是一个连接请求（ACK=0）或连接接受报文； 11）终止位 FIN：用来释放连接，为 1 表示此发送方发送完毕，要求释放连接； 12）窗口字段：指出现在允许对方发送的数据量，单位字节； 3. TCP 连接管理： 1）TCP 连接的建立：采用客户/服务器方式，发起者为客户机。 过程：三次握手 ①客户机发起一个连接请求报文段，SYN=1,ACK=0,seq=x(随机选择)，不携带数据但消耗一个序号。 ②服务器若同意建立连接则发回确认（SYN=1,ACK=1,seq=y，ack=x+1），并分配 TCP 缓存和变量。 ③客户机再向服务器给出确认，并分配缓存和变量，SYN=0,ACK=1,seq=x+1，ack=y+1。 // 前两步都不含应用层数据但消耗一个序号，第三步可携带数据，不带就不消耗序号。 // 服务器端在第二次握手分配资源，客户机在第三次分配，所以使得服务器易受到 SYN 洪泛攻击。 2）TCP 连接的释放：任何一方都能终止该连接。 过程：4 次握手 ①客户机想关闭连接，则发送一个连接释放报文段，并停止发送数据，主动关闭连接，FIN=1. ②服务器收到后回复确认，此时处于半关闭状态，服务器若想发数据可以发且客户机会接受。 ③服务器也发送完毕，则发送连接释放报文段，FIN=1. ④客户机接收后必须发出确认，再等 2MSL 后才进入连接关闭状态。 4. TCP 可靠传输： 1）序号：TCP 首部的序号字段用来保证数据有序提交给应用层（每个字节都编上一个号）。 2）确认：发送方缓存区会存储已经发送但未收到确认的报文段，以便重传（使用累计确认）。 3）重传：超时和冗余 ACK 的情况都会重传。 冗余 ACK： 接收方收到乱序到来的 n 个报文段就会发送 n 个冗余 ACK； 当发送方收到三个冗余 ACK 就会判断某个报文段缺失并重传这个报文段。 5. TCP 流量控制： 用来消除发送方使接收方缓存区溢出的可能性。 1）接收窗口：接收方根据自己接受缓存的大小，动态调节发送方的发送窗口大小。 2）拥塞窗口：发送方根据对当前网络拥塞程序的估计而确定的窗口值。 3）发送方的窗口大小取以上二者的较小值。 // 传输层定义的端到端的流量控制，链路层定义的是两个结点间的。 // 链路层的滑动窗口协议的窗口不能动态变化，但传输层的可以。 6. TCP 拥塞控制： 拥塞控制是一个全局性的过程，指防止过多数据注入网络。 1）慢开始和拥塞控制： ①慢开始：每经历一个传输轮次（一个 RTT），拥塞窗口就指数式增倍，一直增加到门限（阈值），再改用拥塞避免算法。 ②拥塞窗口不再指数型增大，而是每次加 1，直到出现一次超时就把设置新门限为前一个门限的一半。 2）快重传和快恢复： ①快重传技术使用了冗余 ACK 来检测丢失，较快的重传数据。’ ②快恢复：发送方收到三个冗余 ACK 时，新门限减半，在新门限值处开始加 1 增大。 ","date":"2021-03-04T22:05:08+08:00","permalink":"https://ldsdsy.github.io/p/network_five/","title":"Network_five"},{"content":"网络层 主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务。网络层传输单位为数据报（数据报划分为了分组）.\n1 功能 1. 异构网互联 2. 路由和转发：路由选择，分组转发 3. 拥塞控制：开环控制（静态），闭环控制（动态） 2 路由算法 1. 静态路由（非自适应路由算法）： 1）管理员手动配置路由信息； 2）优点是简便，可靠，适用于负荷稳定，拓扑变化不大的网络。 2. 动态路由（自适应路由算法）： 1）路由表项通过相互连接的路由器之间彼此交换信息； 2）能改善网络性能并有助于流量控制； 3）分类：距离-向量路由算法（RIP），链路状态路由算法(OSPF)。 3.层次路由 因特网将整个互联网划分为许多较小的自治系统（其中包含很多局域网） 1）自治系统内使用的路由选择协议称为内部网关协议（IGP），也称域内路由选择，如 RIP,OSPF. 2）自治系统间使用的路由选择协议称为外部网关协议（EGP），也称域间路由选择，如 BGP. 3 IPv4 IP 定义数据传送的基本单位—— IP 分组以及其确切的数据格式。 1. 分组格式：首部 + 数据 首部：固定 20B ，其中协议表示应交付哪个传输层协议（6：TCP,17:UDP）； 首部长度，总长度，片偏移的单位分别是 4B,1B,8B(1总8片的首4). 2. IP 数据报分片： IP 数据报封装在链路层数据报中，所以链路层 MTU（最大传送单元） 严格限制了 IP 数据报的长度。 1）IP 首部中的标志位有 3 比特，后两比特分别是 DF 和 MF； 2）DF（Don't Fragment）：1:禁止分片，0：允许分片； 3）MF（More Fragment）：1：后面还有分片，0：此为最后一片。 3. IPv4 地址： 连接到因特网上的每台主机（或路由器）都分配一个 32 比特的全球唯一标识符，即 IP 地址。 1）分类：A,B,C,D,E 五类。 2）组成：网络号 + 主机号。 3）主机号全为 0 表示本网络本身， 主机号全为 1 表示本网络的广播地址， 127.0.0.0 为环路自检地址，表示任意主机本身， 0.0.0.0 表示本网络的本主机， 255.255.255.255 表示整个 TCP/IP 网络的广播地址。 4. NAT(网络地址转换)： 表示通过将专用网络地址转换为公用地址从而隐藏内部管理的 IP 地址。 1）NAT 路由器至少有一个有效的外部全球地址。 2）NAT 路由表存放着 {本地 IP 地址：端口} 到 {全球 IP 地址：端口} 的映射。 5. 子网划分： 两级 IP 地址存在不够灵活，地址空间利用率低等缺点，所以再增加一个 “子网号字段” 变成三级 IP 地址。 1）IP 地址 = 网络号 + 子网号 + 主机号。 2）划分子网是从主机号里面进行划分，不改变原来的网络号。 3）子网号不能全 1 或 全 0，但随着 CIDR 的使用，全 1 全 0 的 子网号也能用。 4）不管哪一种，子网中主机号全 0 的地址表示子网的网络号，主机号全 1 的表示子网的广播地址。 6. 子网掩码： 为告诉主机或路由器对网络进行了子网划分，使用子网掩码来表达对网络中主机号的错位。 1）1 对应 IP 地址中的网络号，0 对应于 IP 中的主机号。 7. 无分类域间路由选择（CIDR）: CIDR 是在变长子网掩码的基础上提出的一种消除传统 A,B,C 类网络划分并可实现超网构造的 IP 地址的划分方式。 1）IP = 网络前缀 + 主机号。 2）将网络前缀都相同的连续 IP 地址组成 ”CIDR地址块“ ，这种地址的聚合称为路由聚合（构成超网）。 8. IP 地址和硬件地址： IP 地址为网络层使用的地址，硬件地址是链路层使用的地址； IP 地址放在 IP 数据报的首部，而 MAC 地址放在 MAC 帧的首部。 9. 地址解析协议（ARP）： 在链路上传送数据帧时，最终必须使用硬件地址，因此需要完成 IP 地址到 MAC 地址的映射，这就是 ARP. 工作原理： A 向 B 发送 IP 数据报，先查看自己的 ARP 高速缓存中有无 B 的 IP 地址； 有，就可查出对应的硬件地址，并写入 MAC 帧，然后发送到此硬件地址； 无，通过全为 1 的目的 MAC 地址来封装并广播 ARP 请求分组，B 收到后便会返回响应 ARP 分组，其中包含 IP 与 MAC 的映射关系， A 收到后便写入 ARP 缓存。 // ARP 请求分组是广播发送，ARP 响应分组是普通的单播。 10. 动态主机配置协议（DHCP）: DHCP 协议常用于给主机动态分配 IP 地址（应用层协议，基于 UDP）。 工作过程（全程广播）： ① 主机广播 ”DHCP 发现“ 消息，试图找到 DHCP 服务器； ② DHCP 服务器收到后，广播 \u0026quot;DHCP 提供\u0026quot; 消息； ③ 主机收到回应后再广播 ”DHCP 请求“ 消息； ④ DHCP 服务器广播 ”DHCP 确认“ 消息，将 IP 地址分配给主机。 11. 网际控制报文协议（ICMP）: ICMP 用于主机和路由器来报告差错和异常情况。 分类：ICMP 差错报告报文，ICMP 询问报文。 ICMP 差错报告报文： ① 终点不可达； ② 原点抑制； ③ 时间超时； ④ 参数问题； ⑤ 改变路由（重定向）。 ICMP 询问报文： ① 回送请求和回答报文； ② 时间戳请求和回答报文； ③ 掩码地址请求和回答报文； ④ 路由器询问和通告报文。 // 分组网间 PING ：测试两台主机之间的连通性 // Traceroute :用来跟踪分组经过的路由 4 IPv6 解决 IP 地址耗尽的措施： 1）采用 CIDR ，使 IP 分配更合理； 2）采用 NAT 以节省 IP 地址； 3）采用更大地址空间的新版本 IPv6. 1. 主要特点： 1）IPv6 增加到 128 位（16 字节）。 2）支持即插即用（自动配置），不用 DHCP。 3）IPv6 只有在源节点才能分片（端到端），在路由器中不能分片。 4）IPv6 的首部必须是 8B 的整数倍（IPv4 是 4B）。 2. IPv6 地址： IPv6 数据报的目的地址可以是以下三种之一： 1）单播：传统的点对点通信； 2）多播：一点对多点的通信，分组被交付到一组计算机的每台计算机； 3）任播：其目的地址是一组计算机，但数据报只交付其中一台计算机，通常是最近的计算机。 3. IPv4 向 IPv6 的过渡： 1）双协议栈：让主机或路由器装有两个协议栈，一个 4 一个 6. 2）隧道技术：将整个 IPv6 数据报封装到 IPv4 数据报的数据部分，使其可在 IPv4 的隧道中传输。 5 路由协议 1. 路由信息协议（RIP）: RIP 是一种分布式的基于距离向量的路由选择协议，最大优点：简单。 1）RIP 会优先选择跳数少的路径。 2）RIP 规定一条路径最多包含 15 个路由器（距离为 16 表示不可达）。 3）RIP 规定每隔 30 s 仅和相邻路由器交换全部信息，180 s没动静表示 ”死掉“。 4）路由表项 = 目的网络 + 距离 + 下一跳路由器。 5）会出现慢收敛现象（坏消息传得慢）。 6）RIP 是应用层协议，使用 UDP 传送数据（端口：520）。 7）RIP 选择的路径不一定是时间最短，但是路由器最少。 2. 开放最短路径优先（OSPF）协议： 1）OSPF 使用洪泛法向所有路由器发送部分信息（与自己相邻的路由器的链路状况）。 2）只当链路状态发生变化时才交换信息。 3）OSPF 是网络层协议，直接使用 IP 数据报传送。 4）选择路径的原则是代价最小。 3. 边界网关协议（BGP）: BGP 是不同自治系统的路由器之间交换路由信息的协议。 1）只力求寻找一条较好（非最佳）的路由。 2）BGP 是应用层协议，基于 TCP. 3）与相邻路由器交换信息，首次交换整个路由表，非首次交换有变化的部分。 6 IP 组播  主机组播时仅发送一份数据，在传送路径出现分岔时才复制分组并转发。 组播仅应用于 UDP. 1. IP 组播地址： 1）组播数据报不提供可靠交付（UDP）； 2）组播地址只能用于目的地址，不作为源地址； 3）对组播数据报不产生 ICMP 差错报文。 4）并非所有 D 类地址都可以作为组播地址。 IP 组播分为两类：一种是在本局域网上进行硬件组播，一种是在因特网的范围内进行组播。 2. IGMP 与组播路由算法： IGMP 让连接到本地局域网上的组播路由器知道本局域网上是否有主机参加或退出了某个组播组。 组播路由算法： 1）基于链路状态的路由选择； 2）基于距离-向量的路由选择； 3）可建立在任何路由器协议上，称为协议无关的组播（PIM）. 7 移动 IP 支持移动性的因特网体系结构与协议共称为移动 IP。 （使用移动 IP 可以让一个移动结点在不改变 IP 地址的情况下改变驻留位置） 1. 基于 IPv4 的移动 IP 定义三种功能实体： 1）移动节点：具有永久 IP 地址的移动节点； 2）本地代理：移动节点的永久 ”居所“ 称为归属网络，其中代表移动节点执行移动管理的实体为本地代理，它根据移动节点的转交地址，采用隧道技术转交数据包。 3）外部代理：在外部网络中帮助移动节点完成移动管理的实体。 2. 移动 IP 通信过程： 本地代理接受消息，传给外部代理，载传给移动主机。 8 网络层设备 1. 路由器的组成和功能： 路由器是一种具有多个输入/输出端口的专用计算机，其任务是连接异构网并完成路由转发。 两个主要功能： 1）分组转发：处理通过路由器的数据流。 2）路由计算：通过和其他路由器进行基于路由协议的交互，完成路由表的计算。 2. 路由表和路由转发： 路由表是路由选择算法得出的，主要用于路由选择。 1）路由表项 = 目的网络 IP 地址，子网掩码，下一跳 IP 地址，接口。 2）转发表是从路由表得出的，但是格式不同。 3）路由表用软件实现，转发表可以软件实现，甚至可用特殊的硬件来实现。 ","date":"2021-02-27T13:19:58+08:00","permalink":"https://ldsdsy.github.io/p/network_four/","title":"Network_four"},{"content":"数据链路层 负责从一个节点到直接相连的相邻节点传输数据报\n1 功能 1. 为网络层服务： 1）无确认的无连接服务：适用于实时通信或误码率较低的通信信道，如以太网。 2）有确认的无连接服务：适用于误码率较高的通信网络，如无线通信。 3）有确认的面向连接服务：适用于通信要求（可靠性，实时性）较高的场合。 2. 链路管理：指数据链路层连接的建立，维持，释放过程。 3. 帧定界：帧的首部与尾部的一个重要作用就是确定帧的界限，及帧定界。 帧同步：指接收方应能从接收到的二进制比特流中区分处帧的起始和终止。 透明传输：不管所传数据是什么样的比特组合都应当能在链路上传送。 4. 流量控制：指控制发送方的数据流量，使其发送速率不应超过接收方的接受能力。 5. 差错控制：指用以使发送方确定接收方是否正确收到其发送的数据的方法；错误分为帧错和位错。 // 帧错：帧的丢失，重复，失序（引入定时器，编号机制来解决）。 // 位错：1 变 0 ，0 变 1 。 2 组帧 把比特组成帧传输，就可再出错时只重传出错的帧，而不是所有数据，提高效率。 1. 字符计数法：指在帧头部使用一个计数字段来标明帧内字符数。 2. 字符填充的首尾定界符：使用一些特殊的字符来定界帧的开始与结束。 3. 比特填充的首尾标志法：使用一个特定的比特模式，如 01111110 ，在传输数据中遇到 5 个 1 就填充 1 个 0 ，同样接收方接受数据时遇到 5 个 1 就去掉后面的 1 个 0（5 1 1 0）。 4. 违规编码法：如曼彻斯特编码，用 “高-低”电平表示 1 ，“低-高” 为 0，则 “高-高”，“低-低”就可用于表示开始和结束。 3 差错控制 差错都是噪声引起，一是信道固有的随机热噪声，二是短暂原因造成的冲击噪声；前者可提高信噪比，后者只能采用编码技术来解决。 1. 检错编码： 1）奇偶校验码：它由 n-1 位信息元和 1 位校验元组成；奇校验码是加上校验元后整体有奇数个 1，偶检验码则是整体有偶数个 1 。 2）循环冗余码（多项式码）： 数据 A 尾部加 0（0 的个数为帧检验序列位数减一）； 新 A 对帧检验序列进行模 2 除法，都到余数为冗余码（位数等于第一步中加 0 的个数）； 把冗余码替换掉 A 后面加的那些 0，即为传输的数据； 接收方接受到数据，用此数据对帧检验序列进行模 2 除法，若余数为 0 则无错误，否则数据有误。 2. 纠错编码： 海明码：发现双比特错，纠正单比特错。 海明不等式：2^r \u0026gt;= k+r+1 //r: 冗余信息位，k: 信息位 4 流量控制与可靠传输机制 1. 停止-等待协议： 发送方每发送一帧就要等待接收方的应答信号，之后再发送下一帧。 2. 滑动窗口协议： 1）后退 N 帧协议(GBN)：发送窗口 \u0026gt; 1,接收窗口 = 1. // 接收方只能按顺序接受帧，且可采用累计确认； // 若采用 n 比特对帧编号，则发送窗口尺寸 w 应满足：1 \u0026lt;= w \u0026lt;=2^n-1. 2）选择重传协议（SR): 发送窗口与接受窗口都大于等于 1，最大尺寸都等于 2^(n-1). // 对数据帧逐一确认； // 只重传出错帧； // 接收方有缓存。 5 介质访问控制 采取一定措施，使结点间的通信不会发生相互干扰。 1. 信道划分介质访问控制： 1）频分多路复用 2）时分多路复用 3）波分多路复用 4）码分多路复用 2. 随机访问介质访问控制： 1. ALOHA协议： 1）纯 ALOHA 协议：不监听信道，不按时间槽发送，想发就发，随机重发。 2）时隙 ALOHA 协议：将时间划分为若干等长时隙，按时发送。 2. CSMA 协议： 1）1-坚持 CSMA：侦听信道，空闲即发，忙着等待，继续侦听，直至空闲。 2）非坚持 CSMA：侦听信道，空闲即发，忙则弃听，随机重听。 3）p-坚持 CSMA：侦听信道，空闲则以概率 p 发送数据，以概率 1-p 推迟到下一个时隙，忙则等待下一时隙再侦听。 3. CSMA/CD 协议： 适用于总线型网络或半双工网络环境（有线连接的局域网）； 先听后发，边听边发，冲突停发，随机重发； 最小帧长 = 数据传输率 * 总线传播时延 * 2； 二进制指数退避算法： 确定基本退避时间 2Π； 定义参数 k = min[重传次数，10]； 从离散数值 [0,1,···,2^k-1] 随机选取一个数值 r，则退避时间为 2Πr； 重传 16 次仍不成功则抛弃此帧并向高层汇报。 4. CSMA/CA 协议： 适用于无线局域网； 基本思想：发送数据前先广播通知其他节点，避免碰撞；先听后发，边听边发，碰撞停发。 碰撞避免机制： 1）预约信道：发送方发送的同时告知其他站点自己传输数据需要的时间。 2）ACK 帧：接受方收到数据后要返回一个 ACK 帧，发送方如果在规定时间内没收到 ACK 帧，则会重新发送数据给接受方。 3）RTS/CTS 帧：可选的碰撞避免机制，主要用与解决无线网中的 “隐蔽站” 问题。 3.轮询访问介质访问控制： 用户通过一个集中控制的监控站，以循环的方式逐个获取信道使用权。 令牌传递协议：得到令牌的机器才能发送数据，其他的等待。 6 局域网 局域网是指在一个较小的范围内，将各种计算机，外部设备和数据库系统等通过双绞线，同轴电缆等连接起来，组成资源和信息共享的计算机互联网络。 1. 特性： 1）拓扑结构：星形结构，环形结构，总线形结构（常用），树形（星形 + 总线形）。 2）传输介质：双绞线（主流），铜缆，光纤。 3）介质访问控制方式：CSMA/CD,令牌总线，令牌环（前两种用于总线形局域网，后者用于环形网络）。 2. 三种特殊局域网拓扑实现： 1）以太网：逻辑上是总线形结构，物理上是星形或扩展星型结构。 2）令牌环：逻辑上环形结构，物理上是星形结构。 3）FDDI ：逻辑上是环形，物理上是双环结构。 3. 以太网： 以太网是指符合 DIX Ethernet V2 标准的局域网，由于此标准与IEEE 802.3 标准相差很少，因此将 IEEE 802.3 局域网简称为以太网。 1）传输介质：粗缆，细缆，双绞线，光纤。 2）网卡：实现计算机与外部局域网的连接，又称网络接口板（卡），网络适配器。 3）MAC 帧：数据帧的一种，包含 MAC 地址（物理地址）。 4. 高速以太网：速率达到或超过 100Mb/s 的以太网。 5. IEEE 802.11: 指无线局域网的一系列协议标准； 无线局域网分为：固定基础设施无线局域网，无固定基础设施无线局域网自组织网络。 7 广域网 广域网不等于互联网，互联网用路由器连接，可以连接不同类型的网络（局域网和广域网）；广域网则采用节点交换机连接一个网络。 1. PPP 协议： 面向字节，采用字节填充方式，只支持全双工链路。 2. HDLC 协议： 面向比特，采用 0 比特插入法，帧类分为信息帧，监督帧，无编号帧。 8 数据链路层设备 1. 网桥： 特点：把两个或多个以太网通过网桥连接起来变成一个网段。 类型： 1）透明网桥：按照自学习算法填写转发表，按转发表转发；不是最佳路由。 2）源路由网桥：先发送发现帧，按返回结果转发；是最佳路由。 2.交换机（多端口网桥）： 交换模式： 1）直通式：帧在接收后只检查目的地址，几乎能马上传输出去。 2）存储转发：先将接收到的帧缓存到高速缓存器，检查数据正确性。 二者相同点：按 MAC 地址转发，都能隔离冲突域，不能隔离广播域。 ","date":"2021-02-23T11:20:17+08:00","permalink":"https://ldsdsy.github.io/p/network_three/","title":"Network_three"},{"content":"物理层 物理层用于透明传输比特流\n1 基本概念 1） 码元： 指用一个固定时长的信号波形表示一位 K 进制数字。 2） 单工通信： 只有一个方向的通信而没有反方向的交互，仅需一条信道。 3） 半双工通信： 通信双方都可以发送或接受信息，但同一时间只能一个发一个接，需要两条信道。 4） 全双工通信： 通信双方都可以同时发送和接收信息，需要两条信道。 5） 码元速率： 单位为波特，1 波特表示一秒传输一个码元。 6） 信息传输率： 单位为 b/s ,单位时间传输的比特数。 2 四种特性 1） 机械特性： 规定物理连接时所采用的规格，接口形状，引线数目，引脚数量等。 2） 电气特性： 规定传输二进制时，线路上信号的电压范围，阻抗匹配，传输速率和传输距离等。 3） 功能特性： 指明某线路上某一电平表示何种意义，接口部件信号线的用途。 4） 规程特性： 又叫过程特性，定义各条物理线路的工作规程和时序关系。 3 奈氏准则，香农定理 1. 奈氏准则 指出在理想低通（无噪声，带宽有限）的情况下，码元的极限传输率是 2W 。 // 可推出 数据极限传输率 = 2W * log2(V) ,V 表示有 v 种码元。 2. 香农定理 给出了带宽受限且有高斯白噪声干扰的信道的极限数据传输率，W * log2（1+S/N）。 // S/N 为信噪比，（ X 分贝 = 10*log10（S/N）。 4 编码，调制 1 数字数据编码为数字信号： 1）非归零编码：高电平 1，低电平 0 （反之亦可）。 2）归零编码：信号电平在一个码元内都要恢复到零（低电平 0，高——\u0026gt;低 1）。 3）反向非归零编码：信号电平反转为 0，不变为 1。 4）曼彻斯特编码：一个码元分成两个相等间隔，高低为 1，低高为 0。 5）差分曼彻斯编码：遇 0 前半个码元反转，遇 1 前半个码元不变（同 1 异 0）。 6）4B/5B 编码：数据分为 4 个一组，按照 4B/5B 编码规则转换为 5 位码。 2 数字数据调制为模拟信号： 1）幅移键控（调幅）：通过改变载波信号的振幅来表示数字信号 1 和 0 . 2）频移键控（调频）：通过改变载波信号的频率来表示数字信号 1 和 0 . 3）相移键控（调相）：通过改变载波信号的相位来表示数字信号 1 和 0 . 4）正交振幅调制（调幅+调相）：通过改变载波信号的振幅以及相位来表示数字信号 1 和 0 . 3 模拟数据编码为数字信号： 常用于对音频信号进行编码，步骤：采样 ——\u0026gt; 量化 ——\u0026gt; 编码。 4 模拟数据调制为模拟信号： 例如广播电台。 5 电路交换，报文交换，分组交换 1 电路交换： 过程：建立连接 ——\u0026gt; 通信 ——\u0026gt; 释放连接。 特点：独占资源，用户始终占用端到端的固定传输带宽；适用于远程批处理信息传输或系统间实时性要求高的大量数据传输。 2 报文交换： 过程：无需建立连接，动态分配线路，以报文为传输单位，在交换节点采用存储转发的方式，便于不同类型，规格，速率的计算机之间进行通信。 报文：表示站点单次要发送的数据块，长度不限且可变。 3 分组交换： 同样采取存储转发，但限制了每次传输的数据块的上限，解决了大报文传输的问题，同时给小数据块增加了必要的控制信息。 两种方式：面向连接的虚电路方式，无连接的数据报方式。 6 传输介质  1）双绞线：由两根采用一定规则绞合的，相互绝缘的铜导线组成。 2）同轴电缆：由内导体，绝缘层，网状编织屏蔽层，塑料外层构成。 3）光纤：通过传递光脉冲来进行通信，分为单模光纤和多模光纤。 4）无线传输介质：无线电波，微波，红外线，激光。 7 物理层设备 1 中继器（转发器）： 功能：将信号整形放大再转发出去。 // 放大器是放大模拟信号（放大），中继器是放大数字信号（整形再生）。 2 集线器（多口中继器） ","date":"2021-02-22T10:00:51+08:00","permalink":"https://ldsdsy.github.io/p/network_two/","title":"Network_two"},{"content":"计算机网络概述 简言之，计算机网络就是一些互联的，自治的计算机系统的集合。\n1 计算机的网络的组成 1) 从组成部分上看： 硬件，软件，协议。 2) 从工作方式上看： 边缘部分，核心部分。 3) 从功能组成上看： 通信子网，资源子网。 2 计算机网络的功能 1. 数据通信 2. 资源共享 3. 分布式处理 4. 提高可靠性 5. 负载均衡 3 计算机网络的分类 1) 按分布范围分类： 广域网，城域网，局域网，个人区域网。 2) 按传输技术分类： 广播式网络，点对点网络。 3) 按拓扑结构分类： 星形网络，总线形网络，环形网络，网状形网络。 4) 按使用者分类： 公用网，专用网。 5) 按交换技术分类： 电路交换网络，报文交换网络，分组交换网络。 6) 按传输介质分类： 有线网络，无线网络。 4 计算机网络的性能指标 1) 带宽： 表示网络的通信线路所能传输数据的能力，是数字信道所能传输的 “最高数据率” 的同义词，单位为比特每秒（b/s）。 2) 吞吐量： 表示单位时间通过某个网络（或信道，接口）的数据量。其受到网络带宽或是网络额定速率的限制。 // 带宽是理性的最高传输速率，吞吐量是实际上此时间段的传输速率。 3) 速率： 表示连接到网络上的主机在数字信道上传送数据的速率，也称数据率或比特率，单位为 b/s （最高数据率就是带宽）。 4) 时延： 表示数据从网络一端到另一端的所需时间。 *发送时延：结点将数据传输到链路上所需要的时间，也称传输时延。 // 数据从主机到链路上的总时间。 *传播时延：电磁波在信道上传播一定的距离需要花费的时间，及从链路一端到另一端的时间。 *处理时延：数据在交换节点进行一些必要处理所花的时间。 *排队时延：分组在进入路由器后要先在输入队列中排队等待处理，之后还要在输出队列中等待转发。 5) 往返时延（RTT）： 指从发送端发送数据开始，到发送端收到来自接收端的确认，总共经历的时间。 6) 时延带宽积： 表示第一个比特到达终点时，发送端已经发送的比特数 (时延带宽积 = 传播时延 * 信道带宽)。 5 计算机网络体系结构和参考模型 1. OSI 参考模型： 物理层，数据链路层，网络层，传输层，会话层，表示层，应用层（“物联网淑慧试用”）。 // 下三层为通信子网（数据通信），上三层为资源子网（数据处理）。 2. TCP/TP 模型： 网络接口层（物，链），网际层（络），传输层（输），应用层（会，示，应）。 ","date":"2021-02-20T15:37:07+08:00","permalink":"https://ldsdsy.github.io/p/network_one/","title":"Network_one"},{"content":"github 上有许多优秀的开源社区，对于时间充裕的学生党来说，平时在社区做做贡献是个不错的选择。下面以 Kubernetes 社区为例（刚开始选择做一些简单的翻译贡献，选择 Kubernetes/website ）： 1. fork 想要做贡献的项目 在 GitHub 进入 Kubernetes/website 项目中，点击右上角的 Fork 按钮，此时就在你的个人仓库里生成了一个 yourname/website 的项目。 2. Clone 刚刚 Fork 的项目 做贡献之前，必须得把项目下载到本地。进入个人的 GitHub 主页找到刚刚 Fork 的项目，点击右上角的 Clone 按钮。 此处有三种下载方式，我选择中间的 SSH 方式。复制好下方的链接进入 cmd 使用 git clone 命令（我打算把项目下载到 D 盘）： $ cd d: $ git clone git@github.com:ldsdsy/website.gitf //耐心等待，第一次 clone 需要一些时间，完成后 D 盘里就会出现 website 的文件夹。 3.设置克隆好的项目 在 cmd 中进入克隆过来的项目文件夹，将原来项目的 URL 添加到你的本地代码仓库，这样你就可以随时从原来的项目 pull 最新的修改(此处用 upstream 作为远程仓库的名字，这是 GitHub 的风格，但是你可以用任何名字。): $ git remote add upstream git@github.com:kubernetes/website.git 现在远程仓库列表是这样的: $ git remote -v origin git@github.com:ldsdsy/website.git (fetch) origin git@github.com:ldsdsy/website.git (push) upstream git@github.com:kubernetes/website.git (fetch) upstream git@github.com:kubernetes/website.git (push) 以后定期更新时按如下命令顺序运行： $ cd D:\\website $ git checkout master $ git fetch upstream $ git rebase upstream/master $ git push origin master 4.创建一个分支 在做翻译之前，先要创建一个本地分支，这是将要开展工作的地方。用以下命令（这会创建一个名为 translate1 的新分支，而且在本地仓库里，处于激活状态。你最好用一个可以描述你要做什么的分支名字。）： $ git checkout -b translate1 查看当前处于哪一个分支（* 表示当前分支）： $ git branch master * translate1 5.开展工作 可采用 vscode 等编辑器打开 website 文件夹，在 en 目录里找到一个还没有翻译的文件，然后在 zh 目录下新建一个文件名一致的对应文件，按照原文的格式进行翻译。 6.提起 pull request 当翻译完成后，需要把修改过的新内容 push 到个人的在 GitHub 上: $ git branch //确定当前在 translate1 上 $ git status //确定自己没有误操作其他的无关的文件 $ git commit -m \u0026quot;translate 2020-10-01\u0026quot; $ git push origin translate1 现在用浏览器打开个人的 GitHub, 点开 fork 的项目，便会在项目顶上看到一个 compare \u0026amp; pull request 的绿色按钮，点击用来提起 pull request。之后，会看到一个页面，显示你的分支和原来的分支之间不同的部分。确定无误后，点击确定。 7.等待审查 之后会有专门的审查人员对你的提交进行核查，合格后便会收到同意合并的邮件，或是收到建议修改的邮件，或是被直接拒绝。 ！！！第一次做贡献的话，此处可能会遇到签署 CLA(Contribution License Agreement) 的问题，根据提示签署 CLA 即可（TITLE:student） 8.删除分支 不管结果如何，最后就可以删除一开始创建的工作分支（不删也问题不大，不是强制性的）： //删除本地仓库里的分支： $ git branch -D translate1 //删除 GitHub 上的分支： $ git push origin --delete translate1 ","date":"2021-02-06T12:58:45+08:00","permalink":"https://ldsdsy.github.io/p/%E7%A4%BE%E5%8C%BA%E8%B4%A1%E7%8C%AE%E6%B5%81%E7%A8%8B/","title":"社区贡献流程"},{"content":"1.输入球的中心点和球上某一点的坐标，计算球半径和体积。\nC++\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;cmath\u0026gt;using namespace std; double const PI=3.14; int main() { double a,b,c,x,y,z,r,v; cout\u0026lt;\u0026lt;\u0026#34;input circle center coordinates:\u0026#34;; cin\u0026gt;\u0026gt;a\u0026gt;\u0026gt;b\u0026gt;\u0026gt;c; cout\u0026lt;\u0026lt;\u0026#34;input coordinates of any point:\u0026#34;; cin\u0026gt;\u0026gt;x\u0026gt;\u0026gt;y\u0026gt;\u0026gt;z; r=sqrt(pow(x-a,2)+pow(y-b,2)+pow(z-c,2)); v=4/3.0*PI*pow(r,3);\t//注意：4/3=1,所以要除以 3.0 \tcout\u0026lt;\u0026lt;\u0026#34;Radius is:\u0026#34;\u0026lt;\u0026lt;r\u0026lt;\u0026lt;endl; cout\u0026lt;\u0026lt;\u0026#34;Volume is:\u0026#34;\u0026lt;\u0026lt;v\u0026lt;\u0026lt;endl; return 0; } Go\npackage exam2003 import ( \u0026#34;fmt\u0026#34; \u0026#34;math\u0026#34; ) //Sphere is used to calculate the radius and volume of a certain sphere func Sphere() { var a, b, c, x, y, z, r, v float64 fmt.Print(\u0026#34;input the circle center coordinates:\u0026#34;) fmt.Scan(\u0026amp;a, \u0026amp;b, \u0026amp;c) fmt.Print(\u0026#34;input the coordinates of any point:\u0026#34;) fmt.Scan(\u0026amp;x, \u0026amp;y, \u0026amp;z) r = math.Sqrt(math.Pow(x-a, 2) + math.Pow(y-b, 2) + math.Pow(z-c, 2)) v = 4 / 3.0 * math.Pi * math.Pow(r, 3) fmt.Printf(\u0026#34;The radius is:%f\\n\u0026#34;, r) fmt.Printf(\u0026#34;The volume is:%f\\n\u0026#34;, v) } 2.手工建立一个文件，文件种每行包括学号、姓名、性别和年龄。每一个属性使用空格分开。再根据输入的学号，查找文件，输出该学生的信息。文件如下：\n01 李江 男 21 02 刘唐 男 23 03 张军 男 19 04 王娜 女 19 C++\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;fstream\u0026gt;using namespace std; int main() { int num,age,stu,flag=0; string name,gender; cout\u0026lt;\u0026lt;\u0026#34;input students\u0026#39; info like:01 ML female 21 and ends with 00 00 00\\n\u0026#34;; ofstream out(\u0026#34;student.txt\u0026#34;); while(cin\u0026gt;\u0026gt;num\u0026gt;\u0026gt;name\u0026gt;\u0026gt;gender\u0026gt;\u0026gt;age) { if(num==0) { break; } out\u0026lt;\u0026lt;num\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;gender\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;age\u0026lt;\u0026lt;endl; } cout\u0026lt;\u0026lt;\u0026#34;input the number of you want\\n\u0026#34;; cin\u0026gt;\u0026gt;stu; ifstream in(\u0026#34;student.txt\u0026#34;); while(!in.eof()) { in\u0026gt;\u0026gt;num\u0026gt;\u0026gt;name\u0026gt;\u0026gt;gender\u0026gt;\u0026gt;age; if(num==stu) { flag=1; cout\u0026lt;\u0026lt;num\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;name\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;gender\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;age\u0026lt;\u0026lt;endl;\tbreak; } } if(flag==0) { cout\u0026lt;\u0026lt;\u0026#34;There is no such student here\\n\u0026#34;; } return 0;\t} Go\npackage exam2003 import ( \u0026#34;fmt\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strings\u0026#34; ) //Student is used to handle information of students func Student() { var num, age, flag int var name, gender, Snum string //create file and input information \tfile, err := os.OpenFile(\u0026#34;D:/stu.txt\u0026#34;, os.O_CREATE|os.O_WRONLY|os.O_RDONLY, 0) if err != nil { fmt.Println(\u0026#34;Failed to open file\u0026#34;) return } defer file.Close() fmt.Println(\u0026#34;inout the Info of studetns:01 ml female 22 and ends by 0 0 0 0\u0026#34;) for { fmt.Scan(\u0026amp;num, \u0026amp;name, \u0026amp;gender, \u0026amp;age) if num == 00 { break } fmt.Fprint(file, num, \u0026#34; \u0026#34;, name, \u0026#34; \u0026#34;, gender, \u0026#34; \u0026#34;, age) fmt.Fprint(file, \u0026#34;\\n\u0026#34;) } fmt.Println(\u0026#34;input the student number of you want:\u0026#34;) fmt.Scan(\u0026amp;Snum) //Read out and select the students you want to query \tf, err := ioutil.ReadFile(\u0026#34;D:/stu.txt\u0026#34;) if err != nil { fmt.Println(\u0026#34;read fail\u0026#34;, err) } strArr := strings.Split(string(f), \u0026#34;\\n\u0026#34;) flag = 0 for _, s := range strArr { y := strings.Split(string(s), \u0026#34; \u0026#34;) if y[0] == Snum { fmt.Printf(\u0026#34;%s\\n\u0026#34;, y) flag = 1 break } } if flag == 0 { fmt.Println(\u0026#34;There is no such student here\u0026#34;) } } 3.输入年月日，计算该天是本年的第几天。例如 1990 年 9 月 20 日是 1990 年的第 263 天，2000 年 5 月 1 日是 2000 年第 122 天。（闰年：能被 400 整除，或能被 4 整除但不能被 100 整除。每年 1、3、5、7、8、10 、12 为大月）\nC++\n#include \u0026lt;iostream\u0026gt;using namespace std; int main() { int a[13]={0,31,28,31,30,31,30,31,31,30,31,30,31}; int year,month,day,sum=0; cout\u0026lt;\u0026lt;\u0026#34;input the date:1998 06 08\u0026#34;\u0026lt;\u0026lt;endl; cin\u0026gt;\u0026gt;year\u0026gt;\u0026gt;month\u0026gt;\u0026gt;day; if(year%400==0||(year%4==0\u0026amp;\u0026amp;year%100!=0)) { a[2]=29; } for(int i=1;i\u0026lt;month;i++) { sum+=a[i]; } sum+=day; cout\u0026lt;\u0026lt;\u0026#34;today is \u0026#34;\u0026lt;\u0026lt;sum\u0026lt;\u0026lt;\u0026#34;th day\u0026#34;\u0026lt;\u0026lt;endl; } Go\npackage exam2003 //Day is used to calculate how many days today is func Day(year, month, day int) int { a := [13]int{0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31} if year%400 == 0 || (year%4 == 0 \u0026amp;\u0026amp; year%100 != 0) { a[2] = 29 } sum := 0 for i := 1; i \u0026lt; month; i++ { sum += a[i] } sum += day return sum } ","date":"2021-02-02T12:26:30+08:00","permalink":"https://ldsdsy.github.io/p/exam2003/","title":"Exam2003"},{"content":"1.打印所有不超过 n（ n \u0026lt; 256）的，其平方具有对称性质的数。如 11*11=121。\nC++\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;cmath\u0026gt;using namespace std; bool HuiWen(int n) { n=n*n; int a[10]={0}; int t=n; int i=0; while(t!=0) { a[i]=t%10; t/=10; i++; } i--; int j=0; while(i\u0026gt;=0) { t+=a[i]*pow(10,j); i--; j++; } if(t==n) { return true; } return false; } int main() { for(int i=0;i\u0026lt;256;i++) { if(HuiWen(i)) { cout\u0026lt;\u0026lt;i\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } } return 0; } Go\npackage exam2002b import \u0026#34;fmt\u0026#34; //Huiwen is used to output the number of replies func Huiwen() { var a [10]int for i := 0; i \u0026lt; 256; i++ { n := i * i t := n j := 0 for ; t != 0; j++ { a[j] = t % 10 t /= 10 } t = 0 for k := 0; k \u0026lt; j; k++ { //反向组数 \tt = t*10 + a[k] } if t == n { fmt.Printf(\u0026#34;%d \u0026#34;, i) } } } 编写一个求斐波那契数列的递归函数，输入 n 值，使用该递归函数，输出如下图形。例如：当 n = 6 时。   0 0 1 1 0 1 1 2 3 0 1 1 2 3 5 8 0 1 1 2 3 5 8 13 21 0 1 1 2 3 5 8 13 21 34 55 C++\n#include \u0026lt;iostream\u0026gt;using namespace std; int Fibonacci(int j) { if(j==1) { return 0; } else if(j==2) { return 1; } else { return Fibonacci(j-1)+Fibonacci(j-2); } } int main() { int n,t; cin\u0026gt;\u0026gt;n; for(int i=1;i\u0026lt;=n;i++) { for(int k=1;k\u0026lt;=n-i;k++) { cout\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } for(int j=1;j\u0026lt;=2*i-1;j++) { t=Fibonacci(j); cout\u0026lt;\u0026lt;t\u0026lt;\u0026lt;\u0026#34; \u0026#34;\t; } cout\u0026lt;\u0026lt;endl; } } Go\npackage exam2002b import \u0026#34;fmt\u0026#34; //Fibonacci is used to calculate the number func Fibonacci(j int) int { if j == 1 { return 0 } else if j == 2 { return 1 } return Fibonacci(j-1) + Fibonacci(j-2) } //Triangle is used to print Triangle of Fibonacci func Triangle(n int) { for i := 1; i \u0026lt;= n; i++ { for k := 1; k \u0026lt;= n-i; k++ { fmt.Print(\u0026#34; \u0026#34;) } for j := 1; j \u0026lt;= 2*i-1; j++ { t := Fibonacci(j) fmt.Printf(\u0026#34;%d \u0026#34;, t) } fmt.Println() } } ","date":"2021-01-30T15:03:09+08:00","permalink":"https://ldsdsy.github.io/p/exam2002b/","title":"Exam2002B"},{"content":"1.某人有 8 角的邮票 5 张，1 元的邮票 4 张，1 元 8 角的邮票 6 张，用这些邮票中的一张或若干张可以得到多少种不同的邮资？\nC++\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;set\u0026gt;using namespace std; int main() { set\u0026lt;int\u0026gt; s;\t//此题避免使用 double ，可能会因为精确度的问题造成相同的数不一致 \tint t; for(int i=0;i\u0026lt;=5;i++) { for(int j=0;j\u0026lt;=4;j++) { for(int k=0;k\u0026lt;=6;k++) { if(!(i==j \u0026amp;\u0026amp; j==k \u0026amp;\u0026amp; k==0))\t//注意没有三种都为 0 的情况 \t{ t=8*i+10*j+18*k; s.insert(t); } } } } cout\u0026lt;\u0026lt;\u0026#34;组合数为：\u0026#34;\u0026lt;\u0026lt;s.size()\u0026lt;\u0026lt;endl; return 0; } Go\npackage exam2002a import \u0026#34;fmt\u0026#34; //Set is used to grouping the stamp func Set() { var a = [190]int{0} count := 0 for i := 0; i \u0026lt;= 5; i++ { for j := 0; j \u0026lt;= 4; j++ { for k := 0; k \u0026lt;= 6; k++ { t := 8*i + 10*j + 18*k a[t] = 1 } } } for i := 1; i \u0026lt; 190; i++ { if a[i] == 1 { count++ } } fmt.Printf(\u0026#34;组合数为：%d\\n\u0026#34;, count) } 2.输入 n 值， 使用递归函数，求杨辉三角形中各个位置上的值，按照如下形式打印输出图形。例如：当 n = 6 时,\n 1 1 1 1 2 1 1 3 3 1 1 4 6 4 1 1 5 10 10 5 1 C++\n#include \u0026lt;iostream\u0026gt;using namespace std; int number(int i,int j) { if(j==1||i==j) { return 1; }\telse { return number(i-1,j)+number(i-1,j-1); } } int main() { int h,t; cin\u0026gt;\u0026gt;h; for(int i=1;i\u0026lt;=h;i++) { for(int j=1;j\u0026lt;=h-i;j++) { cout\u0026lt;\u0026lt;\u0026#34; \u0026#34;;\t//输出数字前的空格 \t} for(int k=1;k\u0026lt;=i;k++) { t=number(i,k); cout\u0026lt;\u0026lt;t\u0026lt;\u0026lt;\u0026#34; \u0026#34;;\t//数字间的空格以此输出 \t} cout\u0026lt;\u0026lt;endl; } return 0; } Go\npackage exam2002a import \u0026#34;fmt\u0026#34; //Number is used to compute the number of Triangle func Number(i, j int) int { if j == 1 || i == j { return 1 } return Number(i-1, j) + Number(i-1, j-1) } //Triangle is used to print Yang Hui Triangle func Triangle(h int) { for i := 1; i \u0026lt;= h; i++ { for j := 1; j \u0026lt;= h-i; j++ { fmt.Print(\u0026#34; \u0026#34;) } for k := 1; k \u0026lt;= i; k++ { t := Number(i, k) fmt.Printf(\u0026#34;%d \u0026#34;, t) } fmt.Println() } } ","date":"2021-01-27T14:02:43+08:00","permalink":"https://ldsdsy.github.io/p/exam2002a/","title":"Exam2002A"},{"content":"1.请输入高度 h，输出一个高为 h，上底边长为 h 的等腰梯形（同 * 表示）。\nC++\n#include \u0026lt;iostream\u0026gt;using namespace std; int main() { int h; cout\u0026lt;\u0026lt;\u0026#34;input h:\u0026#34;\u0026lt;\u0026lt;endl; cin\u0026gt;\u0026gt;h; for(int i=1;i\u0026lt;=h;i++) { for(int j=1;j\u0026lt;=3*h-2;j++) { if(j\u0026gt;=h-(i-1)\u0026amp;\u0026amp;j\u0026lt;=(2*h-1)+(i-1)) { cout\u0026lt;\u0026lt;\u0026#34;*\u0026#34;; } else { cout\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } } cout\u0026lt;\u0026lt;endl; } return 0; } Go\npackage exam2001b import \u0026#34;fmt\u0026#34; //Trapezoidal is used to output a trapezoidal func Trapezoidal(h int) { for i := 1; i \u0026lt;= h; i++ { for j := 1; j \u0026lt;= 3*h-2; j++ { if j \u0026gt;= h-(i-1) \u0026amp;\u0026amp; j \u0026lt;= (2*h-1)+(i-1) { fmt.Printf(\u0026#34;*\u0026#34;) } else { fmt.Printf(\u0026#34; \u0026#34;) } } fmt.Println() } } 2.请编写一个程序，从键盘上输入 n（ n 的范围是 1～20 ），求 n 的阶乘。\nC++\n#include \u0026lt;iostream\u0026gt;using namespace std; int main() { int n; double s=1;\t//20的阶乘会超出整型的范围 \tcin\u0026gt;\u0026gt;n; for(int i=1;i\u0026lt;=n;i++) { s=s*i; } cout\u0026lt;\u0026lt;\u0026#34;阶乘是：\u0026#34;\u0026lt;\u0026lt;s\u0026lt;\u0026lt;endl; return 0; } Go\npackage exam2001b import \u0026#34;fmt\u0026#34; //Factorial is used to compute the factorial of a number func Factorial(n int64) { var s, i int64 s = 1 for i = 1; i \u0026lt;= n; i++ { s *= i } fmt.Printf(\u0026#34;%d 的阶乘是：%d\u0026#34;, n, s) } 3.从键盘上任意输入一个长度不超过 20 的字符串，对所输入的字符串，按照 ASCII 码的大小从小到大进行排序，请输出排序后的结果。\nC++\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;algorithm\u0026gt;using namespace std; int main() { string s,s1; cin\u0026gt;\u0026gt;s; sort(s.begin(),s.end()); cout\u0026lt;\u0026lt;s\u0026lt;\u0026lt;endl; } Go\npackage exam2001b import ( \u0026#34;fmt\u0026#34; \u0026#34;sort\u0026#34; ) //Str is string type Str string func (s *Str) Len() int { return len(*s) } func (s *Str) Less(i, j int) bool { s1 := []byte(*s) return s1[i] \u0026lt; s1[j] } func (s *Str) Swap(i, j int) { s1 := []byte(*s) s1[i], s1[j] = s1[j], s1[i] *s = Str(s1) } //StringSort is used to sort a string func StringSort(s Str) { sort.Sort(\u0026amp;s) fmt.Println(s) } ","date":"2021-01-24T17:09:05+08:00","permalink":"https://ldsdsy.github.io/p/exam2001b/","title":"Exam2001B"},{"content":"1.编写程序，计算下列分段函数 y=f(x)的值。\ny = -x + 2.5 , 0 \u0026lt;= x \u0026lt; 2 y = 2 - 1.5 * (x-3) * (x-3) ， 2 \u0026lt;= x \u0026lt; 4 y = x / 2 - 1.5 ， 4 \u0026lt;= x \u0026lt; 6 C++\n#include \u0026lt;iostream\u0026gt;using namespace std; int main() { double x,y; cout\u0026lt;\u0026lt;\u0026#34;input the x:\u0026#34;\u0026lt;\u0026lt;endl; cin\u0026gt;\u0026gt;x; if(x\u0026lt;0||x\u0026gt;=6) { cout\u0026lt;\u0026lt;\u0026#34;x out of the bounds\u0026#34;\u0026lt;\u0026lt;endl; return 0; } if(x\u0026gt;=0\u0026amp;\u0026amp;x\u0026lt;2) { y=-x+2.5; } else if(x\u0026gt;=2\u0026amp;\u0026amp;x\u0026lt;4) { y=2-1.5*(x-3)*(x-3); } else if(x\u0026gt;=4\u0026amp;\u0026amp;x\u0026lt;6) { y=x/2-1.5; } cout\u0026lt;\u0026lt;\u0026#34;y=\u0026#34;\u0026lt;\u0026lt;y\u0026lt;\u0026lt;endl; return 0; } Go\npackage exam2001a import \u0026#34;fmt\u0026#34; //Y is used to calculate y based on x func Y(x float64) { if x \u0026lt; 0 || x \u0026gt;= 6 { fmt.Println(\u0026#34;X out of bounds\u0026#34;) return } var y float64 if x \u0026gt;= 0 \u0026amp;\u0026amp; x \u0026lt; 2 { y = -x + 2.5 } else if x \u0026gt;= 2 \u0026amp;\u0026amp; x \u0026lt; 4 { y = 2 - 1.5*(x-3)*(x-3) } else if x \u0026gt;= 4 \u0026amp;\u0026amp; x \u0026lt; 6 { y = x/2 - 1.5 } fmt.Printf(\u0026#34;y=%.2f\u0026#34;, y) } 2.编写程序，读入一个整数 N 。若 N 为非负数，则计算 N 到 2N 之间的整数和；若 N 为一个负数，则求 2N 到 N 之间的整数和。\nC++\n#include \u0026lt;iostream\u0026gt;using namespace std; int main() { int n,sum=0,flag=1;\t//flag=1 表示 n 为正数，flag=-1 表示 n 为负数 \tcin\u0026gt;\u0026gt;n; if(n\u0026lt;0) { flag=-1; n=-n; } for (int i=n;i\u0026lt;=2*n;i++) { sum+=i; } if(flag==1) { cout\u0026lt;\u0026lt;\u0026#34;sum=\u0026#34;\u0026lt;\u0026lt;sum\u0026lt;\u0026lt;endl; } else { cout\u0026lt;\u0026lt;\u0026#34;sum=\u0026#34;\u0026lt;\u0026lt;-sum\u0026lt;\u0026lt;endl; } return 0; } Go\npackage exam2001a //Sum is used to compute the sum between n and 2*n func Sum(n int) int { sum := 0 symbol := 1 if n \u0026lt; 0 { symbol = -1 n = -n } for i := n; i \u0026lt;= 2*n; i++ { sum += i } if symbol == -1 { return -sum } return sum } 3.设 N 是一个四位数，它的 9 倍恰好是其反序数（例如：1234 的反序数是 4321），求 N 的值。\nC++\n#include \u0026lt;iostream\u0026gt;using namespace std; int main() { int a[4]; int t; for(int i=1000;i\u0026lt;10000;i++) { t=i; a[0]=t%10; a[1]=t/10%10; a[2]=t/100%10; a[3]=t/1000%10; t=a[0]*1000+a[1]*100+a[2]*10+a[3]; if(t==9*i) { cout\u0026lt;\u0026lt;\u0026#34;N=\u0026#34;\u0026lt;\u0026lt;i\u0026lt;\u0026lt;endl; } } return 0; } Go\npackage exam2001a import \u0026#34;fmt\u0026#34; //Inverse is used to find N func Inverse() { var a [4]int for i := 1000; i \u0026lt; 10000; i++ { t := i for k := 0; k \u0026lt; 4; k++ { a[k] = t % 10 t /= 10 } t = a[0]*1000 + a[1]*100 + a[2]*10 + a[3] if t == 9*i { fmt.Println(i) } } } 4.有 N 个人围成一圈顺序编号，从 1 号开始按 1、2、 3 顺序报数，报 3 者退出圈外，其余的人再从 1、2、 3 开始报数，报 3 的人再退出圈外，依次类推。请按退出顺序输出每个退出人的原序号。要求使用环形链表编程。\nC++\n#include \u0026lt;iostream\u0026gt;using namespace std; typedef struct LNode { int data; LNode *next; }LNode,*Linklist; int main() { int n,k; LNode *pre; cin\u0026gt;\u0026gt;n; if(n\u0026lt;1) { return 0; } //建立链表 \tLinklist L,r; L=new LNode; L-\u0026gt;data=1; L-\u0026gt;next=NULL; r=L; for(int i=2;i\u0026lt;=n;i++) { LNode *p; p=new LNode; p-\u0026gt;data=i; r-\u0026gt;next=p; r=p; } r-\u0026gt;next=L; //输出相应序号并释放空间 \tr=L; while(n) { k=1; while(k\u0026lt;3) { pre=r; r=r-\u0026gt;next; k++; }\tcout\u0026lt;\u0026lt;r-\u0026gt;data\u0026lt;\u0026lt;\u0026#34; \u0026#34;; pre-\u0026gt;next=r-\u0026gt;next; delete r; r=pre-\u0026gt;next; n--; } cout\u0026lt;\u0026lt;endl; return 0; } Go\npackage exam2001a import \u0026#34;fmt\u0026#34; //Node represents the node in a single linked list type Node struct { data int next *Node } //Order is used to sort according to certain rule func Order(n int) { //建立链表 \tif n \u0026lt; 1 { fmt.Println(\u0026#34;N is a wrong data\u0026#34;) return } var L = new(Node) var pre, r *Node L.data = 1 L.next = nil r = L for i := 2; i \u0026lt;= n; i++ { // var p = new(Node) \t// p.data = i \t// r.next = p \t// r = p \t//下方与注释部分实现功能一致 \tp := Node{ data: i, next: nil, } r.next = \u0026amp;p r = \u0026amp;p } r.next = L //输出序号并释放空间 \tr = L for n \u0026gt; 0 { k := 1 for ; k \u0026lt; 3; k++ { pre = r r = r.next } fmt.Printf(\u0026#34;%d \u0026#34;, r.data) pre.next = r.next r = pre.next n-- } } ","date":"2021-01-22T21:17:37+08:00","permalink":"https://ldsdsy.github.io/p/exam2001a/","title":"Exam2001A"},{"content":"1.输入任意 4 个字符(如：abcd)，并按反序输出(如：dcba)。\nC++\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;string\u0026gt;#include \u0026lt;algorithm\u0026gt;using namespace std; /* int main() { string s; cin\u0026gt;\u0026gt;s; reverse(s.begin(),s.end()); cout\u0026lt;\u0026lt;s\u0026lt;\u0026lt;endl; return 0; }*/ int main() { string s; cin\u0026gt;\u0026gt;s; for(int i=s.size()-1;i\u0026gt;=0;i--) { cout\u0026lt;\u0026lt;s[i]; } cout\u0026lt;\u0026lt;endl; } Golang\npackage exam2000 import ( \u0026#34;fmt\u0026#34; ) //Reverse is used to reverse a string. func Reverse() { var s1 string fmt.Scan(\u0026amp;s1) //Scan接收字符型变量时只接收整型,即ASCII码 \tfor i := len(s1) - 1; i \u0026gt;= 0; i-- { fmt.Printf(\u0026#34;%c\u0026#34;, s1[i]) } } 2.设 a、b、c 均是 0 到 9 之间的数字，abc、bcc 是两个三位数，且有：abc+bcc=532。求满足条件的所有 a、b、c 的值。\nC++\n#include \u0026lt;iostream\u0026gt;using namespace std; int main() { int a,b, c; int x,y; for(a=0;a\u0026lt;10;a++) for(b=0;b\u0026lt;10;b++) for(c=0;c\u0026lt;10;c++) { x=a*100+b*10+c; y=b*100+c*10+c; if(x+y==532)\t{ cout\u0026lt;\u0026lt;a\u0026lt;\u0026lt;\u0026#39; \u0026#39;\u0026lt;\u0026lt;b\u0026lt;\u0026lt;\u0026#39; \u0026#39;\u0026lt;\u0026lt;c\u0026lt;\u0026lt;endl; } } return 0; } Golng\npackage exam2000 import \u0026#34;fmt\u0026#34; // Abc is used to find a special number. func Abc() { var a, b, c int var x, y int for a = 0; a \u0026lt; 10; a++ { for b = 0; b \u0026lt; 10; b++ { for c = 0; c \u0026lt; 10; c++ { x = a*100 + b*10 + c y = b*100 + c*10 + c if x+y == 532 { fmt.Println(a, b, c) } } } } } 3.一个数如果恰好等于它的各因子（该数本身除外）子和，如： 6=3+2+1，则称其为“完数”；若因子之和大于该数，则称其为“盈数”。求出 2 到 60 之间所有“完数”和“盈数”，并以如下形式输出： E: e1 e2 e3 \u0026hellip;\u0026hellip;(ei 为完数) G: g1 g2 g3 \u0026hellip;\u0026hellip;(gi 为盈数) 。\nC++\n#include \u0026lt;iostream\u0026gt;using namespace std; int main() { int a[61]={0}; for(int i=2;i\u0026lt;=60;i++) { int t=i; for(int j=i-1;j\u0026gt;0;j--) { if(i%j==0) { t-=j; } } if(t==0) { a[i]=1; } if(t\u0026lt;0) { a[i]=2; } } cout\u0026lt;\u0026lt;\u0026#34;E:\u0026#34;; for(int i=2;i\u0026lt;61;i++) { if(a[i]==1) cout\u0026lt;\u0026lt;i\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } cout\u0026lt;\u0026lt;endl; cout\u0026lt;\u0026lt;\u0026#34;G:\u0026#34;; for(int i=2;i\u0026lt;61;i++) { if(a[i]==2) cout\u0026lt;\u0026lt;i\u0026lt;\u0026lt;\u0026#34; \u0026#34;; } cout\u0026lt;\u0026lt;endl; return 0; } Golang\npackage exam2000 import \u0026#34;fmt\u0026#34; //Eg is used to find \u0026#34;完数\u0026#34; and \u0026#34;溢数\u0026#34; between 2 and 60. func Eg() { var a [61]int var i, j, t int for i = 2; i \u0026lt;= 60; i++ { t = i for j = i - 1; j \u0026gt; 0; j-- { if i%j == 0 { t -= j } } if t == 0 { a[i] = 1 } if t \u0026lt; 0 { a[i] = 2 } } fmt.Print(\u0026#34;E:\u0026#34;) for i = 2; i \u0026lt; 61; i++ { if a[i] == 1 { fmt.Printf(\u0026#34;%d \u0026#34;, i) } } fmt.Println() fmt.Print(\u0026#34;G:\u0026#34;) for i = 2; i \u0026lt; 61; i++ { if a[i] == 2 { fmt.Printf(\u0026#34;%d \u0026#34;, i) } } fmt.Println() } 4.从键盘输入 4 个学生的数据( 包括姓名、年龄和成绩)，并存放在文件 sf1 上。从该文件读出这些数据，按成绩从高到底排序，并输出其中成绩次高者的所有数据。\nC++\n#include \u0026lt;iostream\u0026gt;#include \u0026lt;fstream\u0026gt;#include \u0026lt;algorithm\u0026gt;using namespace std; struct student { string name; int age; int score; }; bool cmp(student a,student b) { return a.score\u0026gt;b.score; } int main() { student s; student stu[4]; ofstream outfile; cout\u0026lt;\u0026lt;\u0026#34;input students\u0026#39; name,age,score (Ending with 00 00 00):\u0026#34;\u0026lt;\u0026lt;endl;\toutfile.open(\u0026#34;sf1.txt\u0026#34;); while(cin\u0026gt;\u0026gt;s.name\u0026gt;\u0026gt;s.age\u0026gt;\u0026gt;s.score) { if(s.name==\u0026#34;00\u0026#34;) break; outfile\u0026lt;\u0026lt;s.name\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;s.age\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;s.score\u0026lt;\u0026lt;endl; }\tifstream infile; infile.open(\u0026#34;sf1.txt\u0026#34;); for(int i=0;i\u0026lt;4;i++) { infile\u0026gt;\u0026gt;stu[i].name\u0026gt;\u0026gt;stu[i].age\u0026gt;\u0026gt;stu[i].score; } //you can sort by yourself or use sort() included in algorithm /*\tfor(int i=1;i\u0026lt;=3;i++) { for(int j=0;j\u0026lt;4-i;j++) { if(stu[j].score\u0026lt;stu[j+1].score) { s=stu[j]; stu[j]=stu[j+1]; stu[j+1]=s; } } }\t*/ sort(stu,stu+4,cmp); for(int i=0;i\u0026lt;4;i++) { cout\u0026lt;\u0026lt;stu[i].name\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;stu[i].age\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;stu[i].score\u0026lt;\u0026lt;endl; }\tcout\u0026lt;\u0026lt;\u0026#34;Next on the list is: \u0026#34;\u0026lt;\u0026lt;stu[1].name\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;stu[1].age\u0026lt;\u0026lt;\u0026#34; \u0026#34;\u0026lt;\u0026lt;stu[1].score\u0026lt;\u0026lt;endl; outfile.close(); return 0; } Golang\npackage exam2000 import ( \u0026#34;bufio\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;os\u0026#34; \u0026#34;strconv\u0026#34; \u0026#34;strings\u0026#34; ) type students struct { name string age int score int } //Info is used to process students\u0026#39; data func Info() { //数据写入文件 \tvar s string var stu [4]students filepath := \u0026#34;D:/sf1.txt\u0026#34; file, err := os.OpenFile(filepath, os.O_WRONLY|os.O_CREATE|os.O_RDONLY, 0666) if err != nil { fmt.Println(\u0026#34;文件创建打开失败\u0026#34;, err) } defer file.Close() //defer 后面的语句在最后 return 之前执行 \twrite := bufio.NewWriter(file) fmt.Println(\u0026#34;input the info :MM_22_99\u0026#34;) for i := 0; i \u0026lt; 4; i++ { fmt.Scanln(\u0026amp;s) write.WriteString(s) write.WriteString(\u0026#34;\\n\u0026#34;) } write.Flush() //从文件读取数据 \tf, err := ioutil.ReadFile(filepath) if err != nil { fmt.Println(\u0026#34;read fail\u0026#34;, err) } //切割字符串，并赋值到相应的变量中 \tstrArr := strings.Split(string(f), \u0026#34;\\n\u0026#34;) for i := 0; i \u0026lt; 4; i++ { y := strings.Split(string(strArr[i]), \u0026#34;_\u0026#34;) stu[i].name = y[0] stu[i].age, err = strconv.Atoi(y[1]) stu[i].score, err = strconv.Atoi(y[2]) } //排序 \tfor i := 1; i \u0026lt; 4; i++ { for j := 0; j \u0026lt; 4-i; j++ { if stu[j].score \u0026lt; stu[j+1].score { stu[j], stu[j+1] = stu[j+1], stu[j] } } } //输出排序后结果 \tfor i := 0; i \u0026lt; 4; i++ { fmt.Printf(\u0026#34;%s %d %d\\n\u0026#34;, stu[i].name, stu[i].age, stu[i].score) } fmt.Printf(\u0026#34;Next to the list is:%s %d %d\\n\u0026#34;, stu[1].name, stu[1].age, stu[1].score) } ","date":"2021-01-19T16:21:45+08:00","permalink":"https://ldsdsy.github.io/p/exam2000/","title":"Exam2000"},{"content":"Go 项目目录格式的一些问题  1.一个项目只有一个 mian.go 作为入口。所以如何解决一个项目里存在多个 xxx.go 的问题呢？如下为一种方式：\ndemo |___main.go |___exam |___01.go |___02.go //mian.go 作为整个项目入口，exam 为 package （包），exam 下面又包含多个函数，每个函数可在 main.go 中调用。 01.go\npackage exam import \u0026#34;fmt\u0026#34; //Add is used to calculate the sum of two numbers func Add(a,b int) int { return a+b } //Go 要求公有函数以大写字母开头，并且需要在函数上方书写用于说明函数用处的注释，注释必须以函数名开头。 main.go\npackage main import \u0026#34;demo/exam\u0026#34; func main() { sum := exam.Add(3,4) fmt.println(sum) } 2.尽量一开始养成编写测试函数的习惯。Go 语言拥有一套单元测试和性能测试系统，仅需要添加很少的代码就可以快速测试一段需求代码。\ngo test 命令，会自动读取源码目录下面名为 *_test.go 的文件，生成并运行测试用的可执行文件。\n单元测试源码文件可以由多个测试用例组成，每个测试用例函数需要以 Test 为前缀，例如：\npackage exam import \u0026#34;testing\u0026#34; func TestAdd(t *testing.T) { if res := addadd(3, 4); res != 7 { t.Error(\u0026#34;计算错误\u0026#34;) } } //测试用例文件不会参与正常源码编译，不会被包含到可执行文件中。 //测试用例文件使用 go test 指令来执行，没有也不需要 main() 作为函数入口。所有在以 _test 结尾的源码内以 Test 开头的函数会自动被执行。 //测试用例可以不传入 *testing.T 参数。 ","date":"2021-01-11T21:23:59+08:00","permalink":"https://ldsdsy.github.io/p/go_day03/","title":"Go_day03"},{"content":"1.安装好 Go 之后需人为设置一个 GOPATH 文件夹，这个目录用来存放 Go 源码， Go 的可运行文件，以及相应的编译之后的包文件。所以这个目录下面有三个子目录：src、bin、pkg。（例如：在 D 盘下新建一个名为 GOPATH 文件夹）\nsrc :存放源代码 pkg :编译后生成的包文件 bin :编译后生成的可执行文件 //一般，bin 和 pkg 目录可以不创建，go 命令会自动创建（如 go install），只需要创建 src 目录即可。 2.配置 GOPATH 的环境变量，进入用户变量新建\n变量 ：GOPATH 值 ：D:\\GOPATH 3.进入 vscode 安装 go 插件，然后就可以在 src 下面创建 Hello_world.go 并编译执行， vs 提示安装什么就安装什么。(相比较 GoLand , vs 免费且内存消耗小)\npackage main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, World!\u0026#34;) } ","date":"2021-01-05T10:30:42+08:00","permalink":"https://ldsdsy.github.io/p/go_day02/","title":"GO_day02"},{"content":"Window 安装 Go 语言环境   进入以下网址  https://golang.google.cn/dl/ //选择 .msi 后缀的文件下载，下载完成后一路 next 安装即可。 进入 cmd  $ go version //能显示版本号即安装成功 在终端依次执行  $ go env -w GO111MODULE=on $ go env -w GOPROXY=https://goproxy.cn,direct  //第一条使源代码可存储在任意位置，第二条为国内代理 ","date":"2021-01-04T22:03:04+08:00","permalink":"https://ldsdsy.github.io/p/go_day01/","title":"Go_day01"},{"content":" Flutter 项目目录介绍：  android: android 平台相关代码；\nios: ios 平台相关代码； lib: flutter 相关代码，开发者编写代码的所在地； test: 用于存放测试代码；\npubspec.yaml: 存放配置文件，一般是第三方库的依赖。\nFlutter 入口文件，入口方法： lib 目录下的 main.dart 就是 Flutter 的入口文件；  main.dart :\nvoid main(){ runApp(MyApp); } 或者简写为： void main()=\u0026gt;runApp(MyApp()); //main()是 dart 的入口方法； //runApp()是 flutter 的入口方法； //MyApp 是一个自定义组件。 ","date":"2020-06-11T21:38:42+08:00","permalink":"https://ldsdsy.github.io/p/04_flutter%E9%A1%B9%E7%9B%AE%E5%9F%BA%E7%A1%80%E4%BA%86%E8%A7%A3/","title":"04_Flutter项目基础了解"},{"content":"1.安装 jdk：\n$ sudo apt-get install openjdk-8-jdk //JDK：java development kit （java 开发环境，包括 JVM，基础类库，开发工具） //JRE：java runtime environment （java 运行时环境） //JDK 包含 JRE $ java $ javac //查看是否安装完成 2.安装 Android Studio (有图形快捷键)：\n//下载并解压\nhttps://www.jetbrains.com/toolbox-app/\n//安装完成后，在 JetBrains Toolbox 中安装 AS 稳定版。\n//打开 AS 一路默认安装，先不要设置属性参数；\n//安装完成导入插件: Plugins 中安装 Dart 和 Flutter ;\n//重启 AS\n3.配置 Flutter 国内镜像：\n//选择镜像\nhttps://flutter-io.cn/\n$ sudo vim /etc/profile //文本末尾添加如下内容 export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn export PUB_HOSTED_URL=https://pub.flutter-io.cn //保存退出 $ source /etc/profile 4.输入 flutter doctor 检测安装配置是否完成。\n出现 ✗ Unable to locate Android SDK. 打开 AS -\u0026gt; Tools -\u0026gt; SDK Manager 安装 SDK 出现 ✗ Android licenses not accepted. $ flutter doctor --android-licenses //一路 y Adds: AS 中出现 adb bridge not found\n//进入 File -\u0026gt; Project instructure 菜单，Project 中能看到 No SDK;\n//选中 Modules -\u0026gt; flutter_app_android -\u0026gt; Dependencies -\u0026gt; Module SDK\n","date":"2020-05-28T07:06:45+08:00","permalink":"https://ldsdsy.github.io/p/03_flutterandroid%E6%90%AD%E5%BB%BA/","title":"03_FlutterAndroid搭建"},{"content":"安装Flutter：\n1.点击链接，下载压缩包：\nhttps://flutter.dev/docs/get-started/install/linux\n2.选一个心仪的文件夹(例如 development )，解压缩:\n$ cd ~/development $ tar xf ~/Downloads/flutter_linux_1.17.1-stable.tar.xz 3.设置环境变量（永久设置）：\n//profile 是开机就会自启的文件,打开后编辑 $ sudo vim /etc/profile //文件末尾添加如下内容，路径为上一步 Flutter 解压后所在的地方 export PATH=$PATH:/home/ldsdsy/development/flutter/bin //强制执行 profile 或 重启 $ source /etc/profile //查看是否添加成功 $ echo $PATH 4.输入 flutter 检测是否安装完成。\nAdds:\n//若出现 Error: Unable to find git in your PATH.\n$ sudo apt-get install git ","date":"2020-05-22T09:58:25+08:00","permalink":"https://ldsdsy.github.io/p/02_flutter%E5%AE%89%E8%A3%85/","title":"02_Flutter安装"},{"content":"安装 dart：（使用apt-get安装就不用配置环境变量）\n1.依次执行以下命令:\n$ sudo apt-get update $ sudo apt-get install apt-transport-https //科学上网 $ sudo sh -c \u0026#39;wget -qO- https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -\u0026#39; $ sudo sh -c \u0026#39;wget -qO- https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list \u0026gt; /etc/apt/sources.list.d/dart_stable.list\u0026#39; 2.安装 Dart SDK:\n$ sudo apt-get update $ sudo apt-get install dart 3.输入 dart 检测是否安装完成。\nAdds:\n//查看 dart 安装在何处 $ which dart //查看系统环境变量 $ echo $PATH ","date":"2020-05-21T19:43:18+08:00","permalink":"https://ldsdsy.github.io/p/01_dart%E5%AE%89%E8%A3%85/","title":"01_dart安装"}]